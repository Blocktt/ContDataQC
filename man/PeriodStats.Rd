% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fun.PeriodStats.R
\name{PeriodStats}
\alias{PeriodStats}
\title{Daily stats for a given time period}
\usage{
PeriodStats(fun.myDate, fun.myDate.Format = NA, fun.myPeriod.N = 30,
  fun.myPeriod.Units = "d", fun.myFile, fun.myDir.import = getwd(),
  fun.myDir.export = getwd(), fun.myParam.Name,
  fun.myDateTime.Name = "Date.Time", fun.myDateTime.Format = NA,
  fun.myThreshold = NA, fun.myConfig = "", fun.myReport.format = "")
}
\arguments{
\item{fun.myDate}{Benchmark date.}

\item{fun.myDate.Format}{Format of benchmark date.  This should be the same format of the date in the data file.  Default is \%Y-\%m-\%d (e.g., 2017-12-31).}

\item{fun.myPeriod.N}{Period length.  Default = 30.}

\item{fun.myPeriod.Units}{Period units (days or years written as d or y).  Default is d.}

\item{fun.myFile}{Filename (no directory) of data file.  Must be CSV file.}

\item{fun.myDir.import}{Directory for import data.  Default is current working directory.}

\item{fun.myDir.export}{Directory for export data.  Default is current working directory.}

\item{fun.myParam.Name}{Column name in myFile to perform summary statistics.}

\item{fun.myDateTime.Name}{Column name in myFile for date time.  Default = "Date.Time".}

\item{fun.myDateTime.Format}{Format of DateTime field.  Default = \%Y-\%m-\%d \%H:\%M:\%S.}

\item{fun.myThreshold}{Value to draw line on plot.  For example, a regulatory limit.  Default = NA}

\item{fun.myConfig}{Configuration file to use for this data analysis.  The default is always loaded first so only "new" values need to be included.  This is the easiest way to control date and time formats.}

\item{fun.myReport.format}{Report format (docx or html).  Default is specified in config.R (docx).}
}
\value{
Returns a csv with daily means and a PDF summary with plots into the specified export directory for the specified time period before the given date.
}
\description{
Generates daily stats (N, mean, min, max, range, std deviation) for the
specified time period before a given date. Output is a multiple column CSV
(Date and Parameter Name by statistic) and a report (HTML or DOCX) with plots.
Input is the ouput file of the QC operation of ContDataQC().
}
\details{
The input is output file of the QC operation in ContDataQC().  That is, a file with
Date.Time, and parameters (matching formats in config.R).

To get different periods (30, 60, or 90 days) change function input "fun.myPeriod.N".
It is possible to provide a vector for Period.N and Period.Units.

Requires doBy library for the statistics summary and rmarkdown for the report.
}
\examples{
# Save example file
df.x <- DATA_period_test2_Aw_20130101_20141231
write.csv(df.x,"DATA_period_test2_Aw_20130101_20141231.csv")

# function inputs
myDate <- "2013-09-30"
myDate.Format <- "\%Y-\%m-\%d"
myPeriod.N <- c(30, 60, 90, 120, 1)
myPeriod.Units <- c("d", "d", "d", "d", "y")
myFile <- "DATA_period_test2_Aw_20130101_20141231.csv"
myDir.import <- getwd()
myDir.export <- getwd()
myParam.Name <- "Water.Temp.C"
myDateTime.Name <- "Date.Time"
myDateTime.Format <- "\%Y-\%m-\%d \%H:\%M:\%S"
myThreshold <- 20
myConfig <- ""
myReport.format <- "docx"

# Run Function
## default report format (html)
PeriodStats(myDate
          , myDate.Format
          , myPeriod.N
          , myPeriod.Units
          , myFile
          , myDir.import
          , myDir.export
          , myParam.Name
          , myDateTime.Name
          , myDateTime.Format
          , myThreshold
          , myConfig)

## DOCX report format
PeriodStats(myDate
          , myDate.Format
          , myPeriod.N
          , myPeriod.Units
          , myFile
          , myDir.import
          , myDir.export
          , myParam.Name
          , myDateTime.Name
          , myDateTime.Format
          , myThreshold
          , myConfig
          , myReport.format)
}
\keyword{continuous}
\keyword{daily}
\keyword{data,}
\keyword{mean,}
\keyword{period}
