myDir.export <- file.path(wd, "PeriodStats", "DV")
myParam.Name <- "Water.Temp.C"
myDateTime.Name <- "Date.Time"
myDateTime.Format <- "%Y-%m-%d %H:%M:%S"
myThreshold <- 20
myConfig <- ""
myReport.format <- "html"
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig
, myReport.format)
myDir.import <- file.path(wd, "_TestFiles")
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig
, myReport.format)
```
library(ContDataQC)
wd <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\NCEA_RMN\\Test_PeriodStats"
#
# function inputs
myDate <- "2017-09-01"
myDate.Format <- "%Y-%m-%d"
myPeriod.N <- c(30, 60, 90, 120, 1)
myPeriod.Units <- c("d", "d", "d", "d", "y")
myFile <- "DV_211226000002a_Water_20160727_20170911_Water.Temp.C.CSV"
myDir.import <- file.path(wd, "_TestFiles")
myDir.export <- file.path(wd, "PeriodStats", "DV")
myParam.Name <- "mean"
myDateTime.Name <- "Date"
myDateTime.Format <- "%Y-%m-%d"
myThreshold <- 20
myConfig <- ""
myReport.format <- "html"
# Run Function
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig
, myReport.format)
library(devtools)
install_github("leppott/ContDataQC")
library(ContDataQC)
sessionInfo()
library(ContDataQC)
help(package="ContDataQC")
library(ContDataQC)
wd <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\NCEA_RMN\\Test_CSV"
#
myFile <- "1034407_Water_20130603_20140522.csv"
#
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Copy example file to Raw folder
file.copy(file.path(wd, myFile), file.path(wd, Selection.SUB[1]))
library(ContDataQC)
wd <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\NCEA_RMN\\Test_CSV"
setwd(wd)
#
myFile <- "1034407_Water_20130603_20140522.csv"
#
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Copy example file to Raw folder
file.copy(file.path(wd, myFile), file.path(wd, Selection.SUB[1]))
library(ContDataQC)
wd <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\NCEA_RMN\\Test_CSV"
setwd(wd)
#
myFile <- "1034407_Water_20130603_20140522.csv"
#
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Copy example file to Raw folder
file.copy(file.path(wd, myFile), file.path(wd, Selection.SUB[1]))
library(ContDataQC)
wd <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\NCEA_RMN\\Test_CSV"
setwd(wd)
# QC Raw Data
myData.Operation <- "QCRaw"
myData.SiteID    <- "1034407"
myData.Type      <- "Water"
myData.DateRange.Start  <- "2013-06-03"
myData.DateRange.End    <- "2014-05-22"
myDir.import <- file.path(myDir.BASE, "Data1_RAW")
myDir.export <- file.path(myDir.BASE, "Data2_QC")
myReport.format <- "html"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
# QC Raw Data
myData.Operation <- "QCRaw"
myData.SiteID    <- "1034407a"
myData.Type      <- "Water"
myData.DateRange.Start  <- "2013-06-03"
myData.DateRange.End    <- "2014-05-22"
myDir.import <- file.path(myDir.BASE, "Data1_RAW")
myDir.export <- file.path(myDir.BASE, "Data2_QC")
myReport.format <- "html"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
# QC Raw Data
myData.Operation <- "QCRaw"
myData.SiteID    <- "1034407MOD"
myData.Type      <- "Water"
myData.DateRange.Start  <- "2013-06-03"
myData.DateRange.End    <- "2014-05-22"
myDir.import <- file.path(myDir.BASE, "Data1_RAW")
myDir.export <- file.path(myDir.BASE, "Data2_QC")
myReport.format <- "html"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
library(knitr)
wd <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\NCEA_RMN\\Test_CSV"
myFile <- "1034407_Water_20130603_20140522.csv"
#
# open file
df.load <- read.csv(file.path(wd, myFile))
View(df.load)
head(df.load)
tail(df.load)
str(df.load)
?class
?ISOdate
install.packages("LAGOSNE")
library(LAGOSNE)
?lagosne
??lagosne
??lagosne
library(ContDataQC)
sessionInfo()
library(devtools)
install_github("leppott\ContDataQC")
install_github("leppott/ContDataQC")
library(ContDataQC)
sessionInfo()
library(ContDataQC)
wd <- "P:\\Current\\USEPA\\NCEA\\Climate\\DataInfrastructure\\FY2018\\QCTesting_ContDataQC\\20180118_Test_PeriodStats"
setwd(wd)
wd <- "P:\\Current\\USEPA\\NCEA\Climate\\DataInfrastructure\\FY2018\\QCTesting_ContDataQC\\20180118_Test_PeriodStats\\_TestFiles20180122"
#
list.files(file.path(wd))
wd <- "P:\\Current\\USEPA\\NCEA\\Climate\\DataInfrastructure\\FY2018\\QCTesting_ContDataQC\\20180118_Test_PeriodStats\\_TestFiles20180122"
#
list.files(file.path(wd))
wd <- "P:\\Current\\USEPA\\NCEA\\Climate\\DataInfrastructure\\FY2018\\QCTesting_ContDataQC\\20180118_Test_PeriodStats\\_TestFiles20180122"
dir1 <- "_TestFiles20180122"
dir2 <- "Data2_QC"
myFile <- "QC_211226000002a_Water_20160727_20170518.csv"
#
file.copy(file.path(wd, dir1, myFile), file.path(wd, dir2, myFile))
wd
dir1
file.path(wd, dir1, myFile)
file.path(wd, dir2, myFile)
wd <- "P:\\Current\\USEPA\\NCEA\\Climate\\DataInfrastructure\\FY2018\\QCTesting_ContDataQC\\20180118_Test_PeriodStats"
dir1 <- "_TestFiles20180122"
dir2 <- "Data2_QC"
myFile <- "QC_211226000002a_Water_20160727_20170518.csv"
#
file.copy(file.path(wd, dir1, myFile), file.path(wd, dir2, myFile))
library(ContDataQC)
wd <- "P:\\Current\\USEPA\\NCEA\\Climate\\DataInfrastructure\\FY2018\\QCTesting_ContDataQC\\20180118_Test_PeriodStats"
difftime("2017-05-18", "2016-07-27")
# function inputs
myDate <- "2017-05-18"
myDate.Format <- "%Y-%m-%d"
myPeriod.N <- c(30, 60, 90, 120, 180)
myPeriod.Units <- c("d", "d", "d", "d", "d")
myFile <- "QC_211226000002a_Water_20160727_20170518.csv"
myDir.import <- file.path(wd, "Data2_QC")
myDir.export <- file.path(wd, "PeriodStats", "20180122")
myParam.Name <- "Water.Temp.C"
myDateTime.Name <- "Date.Time"
myDateTime.Format <- "%Y-%m-%d %H:%M:%S"
myThreshold <- 20
myConfig <- ""
myReport.format <- "html"
# Run Function
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig
, myReport.format)
# function inputs
myDate <- "2017-05-18"
myDate.Format <- "%Y-%m-%d"
myPeriod.N <- c(30, 60, 90, 120, 1)
myPeriod.Units <- c("d", "d", "d", "d", "y")
myFile <- "QC_211226000002a_Water_20160727_20170518.csv"
myDir.import <- file.path(wd, "Data2_QC")
myDir.export <- file.path(wd, "PeriodStats", "20180122")
myParam.Name <- "Water.Temp.C"
myDateTime.Name <- "Date.Time"
myDateTime.Format <- "%Y-%m-%d %H:%M:%S"
myThreshold <- 20
myConfig <- ""
myReport.format <- "html"
# Run Function
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig
, myReport.format)
```
library(ContDataQC)
wd <- "P:\\Current\\USEPA\\NCEA\\Climate\\DataInfrastructure\\FY2018\\QCTesting_ContDataQC\\20180118_Test_PeriodStats"
#
# function inputs
myDate <- "2017-05-18"
myDate.Format <- "%Y-%m-%d"
myPeriod.N <- c(30, 60, 90, 120, 180)
myPeriod.Units <- c("d", "d", "d", "d", "d")
myFile <- "QC_211226000002a_Water_20160727_20170518.csv"
myDir.import <- file.path(wd, "Data2_QC")
myDir.export <- file.path(wd, "PeriodStats", "20180122")
myParam.Name <- "Water.Temp.C"
myDateTime.Name <- "Date.Time"
myDateTime.Format <- "%Y-%m-%d %H:%M:%S"
myThreshold <- 20
myConfig <- ""
myReport.format <- "html"
# Run Function
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig
, myReport.format)
difftime("2017-05-18", "2016-07-27")
library(ContDataQC)
help(package="ContDataQC")
library(ContDataQC)
?config.load
vignette("ContDataQC_Vignette",package="ContDataQC")
install_github("leppott/ContDataQC", force=TRUE, build_vignettes=TRUE)
library(devtools)
install_github("leppott/ContDataQC", force=TRUE, build_vignettes=TRUE)
library(ContDataQC)
?ContDataQC
?config.load
vignette("ContDataQC_Vignette",package="ContDataQC")
help(package="ContDataQC")
?ContDataQC
file.edit(file.path(path.package("ContDataQC"),"R","config.R"))
library(ContDataQC)
file.edit(file.path(path.package("ContDataQC"),"R","config.R"))
file.path(path.package("ContDataQC"),"R","config.R")
?ContDataQC
?config.load
ContDataQC:::config
?ContDataQC
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/NCEA_RMN/GuideVideos")
?ContDataQC
getwd()
# Examples of each operation
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[1],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile)
,file.path(getwd(),Selection.SUB[1],myFile))
# Get Gage Data
myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "01187300" # Hubbard River near West Hartland, CT
myData.Type         <- Selection.Type[4] #"Gage"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- ""
myDir.export <- file.path(myDir.BASE,Selection.SUB[1])
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ContDataQC)
help(package="ContDataQC")
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
help(package="ContDataQC")
library(ContDataQC)
?Export.IHA
library(ContDataQC)
help(package="ContDataQC")
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(devtools)
install.packages("digest")
library(devtools)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
help(package="ContDataQC")
