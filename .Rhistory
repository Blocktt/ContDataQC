, paste0(">= ", val_WaterP[8]," ",val_WaterP[2]," (+/-)")
, "NA"
, paste0("> ",val_WaterP[12]
," consecutive measurements within ",val_WaterP[13]
," units of one another"))
# AirBP
nam_AirBP <- c("myLab.AirBP"                          #1
, "myUnits.AirBP"                    #2
, "myThresh.Gross.Fail.Hi.AirBP"     #3
, "myThresh.Gross.Fail.Lo.AirBP"     #4
, "myThresh.Gross.Suspect.Hi.AirBP"  #5
, "myThresh.Gross.Suspect.Lo.AirBP"  #6
, "myThresh.Spike.Hi.AirBP"          #7
, "myThresh.Spike.Lo.AirBP"          #8
, "myThresh.RoC.SD.number.AirBP"     #9
, "myThresh.RoC.SD.period.AirBP"     #10
, "myThresh.Flat.Hi.AirBP"           #11
, "myThresh.Flat.Lo.AirBP"           #12
, "myThresh.Flat.Tolerance.AirBP"    #13
)
val_AirBP <- mget(nam_AirBP, envir=ContData.env)
txt_AirBP_F <- c(val_AirBP[1]
, "Fail"
, paste0("> ",val_AirBP[3]," ",val_AirBP[2]
,"  or < ",val_AirBP[4]," ",val_AirBP[2])
, paste0(">= ", val_AirBP[7]," ",val_AirBP[2]," (+/-)")
, "NA"
, paste0("> ",val_AirBP[11]
," consecutive measurements within ",val_AirBP[13]
," units of one another"))
txt_AirBP_S <- c(val_AirBP[1]
, "Suspect"
, paste0("> ",val_AirBP[4]," ",val_AirBP[2]
," or < ",val_AirBP[6]," ",val_AirBP[2])
, paste0(">= ", val_AirBP[8]," ",val_AirBP[2]," (+/-)")
, "NA"
, paste0("> ",val_AirBP[12]
," consecutive measurements within ",val_AirBP[13]
," units of one another"))
# SensorDepth
nam_SensorDepth <- c("myLab.SensorDepth"                          #1
, "myUnits.SensorDepth"                    #2
, "myThresh.Gross.Fail.Hi.SensorDepth"     #3
, "myThresh.Gross.Fail.Lo.SensorDepth"     #4
, "myThresh.Gross.Suspect.Hi.SensorDepth"  #5
, "myThresh.Gross.Suspect.Lo.SensorDepth"  #6
, "myThresh.Spike.Hi.SensorDepth"          #7
, "myThresh.Spike.Lo.SensorDepth"          #8
, "myThresh.RoC.SD.number.SensorDepth"     #9
, "myThresh.RoC.SD.period.SensorDepth"     #10
, "myThresh.Flat.Hi.SensorDepth"           #11
, "myThresh.Flat.Lo.SensorDepth"           #12
, "myThresh.Flat.Tolerance.SensorDepth"    #13
)
val_SensorDepth <- mget(nam_SensorDepth, envir=ContData.env)
txt_SensorDepth_F <- c(val_SensorDepth[1]
, "Fail"
, paste0("> ",val_SensorDepth[3]," ",val_SensorDepth[2]
,"  or < ",val_SensorDepth[4]," ",val_SensorDepth[2])
, paste0(">= ", val_SensorDepth[7]," ",val_SensorDepth[2]," (+/-)")
, "NA"
, paste0("> ",val_SensorDepth[11]
," consecutive measurements within ",val_SensorDepth[13]
," units of one another"))
txt_SensorDepth_S <- c(val_SensorDepth[1]
, "Suspect"
, paste0("> ",val_SensorDepth[4]," ",val_SensorDepth[2]
," or < ",val_SensorDepth[6]," ",val_SensorDepth[2])
, paste0(">= ", val_SensorDepth[8]," ",val_SensorDepth[2]," (+/-)")
, "NA"
, paste0("> ",val_SensorDepth[12]
," consecutive measurements within ",val_SensorDepth[13]
," units of one another"))
# Discharge
nam_Discharge <- c("myLab.Discharge"                          #1
, "myUnits.Discharge"                    #2
, "myThresh.Gross.Fail.Hi.Discharge"     #3
, "myThresh.Gross.Fail.Lo.Discharge"     #4
, "myThresh.Gross.Suspect.Hi.Discharge"  #5
, "myThresh.Gross.Suspect.Lo.Discharge"  #6
, "myThresh.Spike.Hi.Discharge"          #7
, "myThresh.Spike.Lo.Discharge"          #8
, "myThresh.RoC.SD.number.Discharge"     #9
, "myThresh.RoC.SD.period.Discharge"     #10
, "myThresh.Flat.Hi.Discharge"           #11
, "myThresh.Flat.Lo.Discharge"           #12
, "myThresh.Flat.Tolerance.Discharge"    #13
)
val_Discharge <- mget(nam_Discharge, envir=ContData.env)
txt_Discharge_F <- c(val_Discharge[1]
, "Fail"
, paste0("> ",val_Discharge[3]," ",val_Discharge[2]
,"  or < ",val_Discharge[4]," ",val_Discharge[2])
, paste0(">= ", val_Discharge[7]," ",val_Discharge[2]," (+/-)")
, "NA"
, paste0("> ",val_Discharge[11]
," consecutive measurements within ",val_Discharge[13]
," units of one another"))
txt_Discharge_S <- c(val_Discharge[1]
, "Suspect"
, paste0("> ",val_Discharge[4]," ",val_Discharge[2]
," or < ",val_Discharge[6]," ",val_Discharge[2])
, paste0(">= ", val_Discharge[8]," ",val_Discharge[2]," (+/-)")
, "NA"
, paste0("> ",val_Discharge[12]
," consecutive measurements within ",val_Discharge[13]
," units of one another"))
# Cond
nam_Cond <- c("myLab.Cond"                          #1
, "myUnits.Cond"                    #2
, "myThresh.Gross.Fail.Hi.Cond"     #3
, "myThresh.Gross.Fail.Lo.Cond"     #4
, "myThresh.Gross.Suspect.Hi.Cond"  #5
, "myThresh.Gross.Suspect.Lo.Cond"  #6
, "myThresh.Spike.Hi.Cond"          #7
, "myThresh.Spike.Lo.Cond"          #8
, "myThresh.RoC.SD.number.Cond"     #9
, "myThresh.RoC.SD.period.Cond"     #10
, "myThresh.Flat.Hi.Cond"           #11
, "myThresh.Flat.Lo.Cond"           #12
, "myThresh.Flat.Tolerance.Cond"    #13
)
val_Cond <- mget(nam_Cond, envir=ContData.env)
txt_Cond_F <- c(val_Cond[1]
, "Fail"
, paste0("> ",val_Cond[3]," ",val_Cond[2]
,"  or < ",val_Cond[4]," ",val_Cond[2])
, paste0(">= ", val_Cond[7]," ",val_Cond[2]," (+/-)")
, "NA"
, paste0("> ",val_Cond[11]
," consecutive measurements within ",val_Cond[13]
," units of one another"))
txt_Cond_S <- c(val_Cond[1]
, "Suspect"
, paste0("> ",val_Cond[4]," ",val_Cond[2]
," or < ",val_Cond[6]," ",val_Cond[2])
, paste0(">= ", val_Cond[8]," ",val_Cond[2]," (+/-)")
, "NA"
, paste0("> ",val_Cond[12]
," consecutive measurements within ",val_Cond[13]
," units of one another"))
# DO
nam_DO <- c("myLab.DO"                          #1
, "myUnits.DO"                    #2
, "myThresh.Gross.Fail.Hi.DO"     #3
, "myThresh.Gross.Fail.Lo.DO"     #4
, "myThresh.Gross.Suspect.Hi.DO"  #5
, "myThresh.Gross.Suspect.Lo.DO"  #6
, "myThresh.Spike.Hi.DO"          #7
, "myThresh.Spike.Lo.DO"          #8
, "myThresh.RoC.SD.number.DO"     #9
, "myThresh.RoC.SD.period.DO"     #10
, "myThresh.Flat.Hi.DO"           #11
, "myThresh.Flat.Lo.DO"           #12
, "myThresh.Flat.Tolerance.DO"    #13
)
val_DO <- mget(nam_DO, envir=ContData.env)
txt_DO_F <- c(val_DO[1]
, "Fail"
, paste0("> ",val_DO[3]," ",val_DO[2]
,"  or < ",val_DO[4]," ",val_DO[2])
, paste0(">= ", val_DO[7]," ",val_DO[2]," (+/-)")
, "NA"
, paste0("> ",val_DO[11]
," consecutive measurements within ",val_DO[13]
," units of one another"))
txt_DO_S <- c(val_DO[1]
, "Suspect"
, paste0("> ",val_DO[4]," ",val_DO[2]
," or < ",val_DO[6]," ",val_DO[2])
, paste0(">= ", val_DO[8]," ",val_DO[2]," (+/-)")
, "NA"
, paste0("> ",val_DO[12]
," consecutive measurements within ",val_DO[13]
," units of one another"))
# pH
nam_pH <- c("myLab.pH"                          #1
, "myUnits.pH"                    #2
, "myThresh.Gross.Fail.Hi.pH"     #3
, "myThresh.Gross.Fail.Lo.pH"     #4
, "myThresh.Gross.Suspect.Hi.pH"  #5
, "myThresh.Gross.Suspect.Lo.pH"  #6
, "myThresh.Spike.Hi.pH"          #7
, "myThresh.Spike.Lo.pH"          #8
, "myThresh.RoC.SD.number.pH"     #9
, "myThresh.RoC.SD.period.pH"     #10
, "myThresh.Flat.Hi.pH"           #11
, "myThresh.Flat.Lo.pH"           #12
, "myThresh.Flat.Tolerance.pH"    #13
)
val_pH <- mget(nam_pH, envir=ContData.env)
txt_pH_F <- c(val_pH[1]
, "Fail"
, paste0("> ",val_pH[3]," ",val_pH[2]
,"  or < ",val_pH[4]," ",val_pH[2])
, paste0(">= ", val_pH[7]," ",val_pH[2]," (+/-)")
, "NA"
, paste0("> ",val_pH[11]
," consecutive measurements within ",val_pH[13]
," units of one another"))
txt_pH_S <- c(val_pH[1]
, "Suspect"
, paste0("> ",val_pH[4]," ",val_pH[2]
," or < ",val_pH[6]," ",val_pH[2])
, paste0(">= ", val_pH[8]," ",val_pH[2]," (+/-)")
, "NA"
, paste0("> ",val_pH[12]
," consecutive measurements within ",val_pH[13]
," units of one another"))
# Turbidity
nam_Turbidity <- c("myLab.Turbidity"                          #1
, "myUnits.Turbidity"                    #2
, "myThresh.Gross.Fail.Hi.Turbidity"     #3
, "myThresh.Gross.Fail.Lo.Turbidity"     #4
, "myThresh.Gross.Suspect.Hi.Turbidity"  #5
, "myThresh.Gross.Suspect.Lo.Turbidity"  #6
, "myThresh.Spike.Hi.Turbidity"          #7
, "myThresh.Spike.Lo.Turbidity"          #8
, "myThresh.RoC.SD.number.Turbidity"     #9
, "myThresh.RoC.SD.period.Turbidity"     #10
, "myThresh.Flat.Hi.Turbidity"           #11
, "myThresh.Flat.Lo.Turbidity"           #12
, "myThresh.Flat.Tolerance.Turbidity"    #13
)
val_Turbidity <- mget(nam_Turbidity, envir=ContData.env)
txt_Turbidity_F <- c(val_Turbidity[1]
, "Fail"
, paste0("> ",val_Turbidity[3]," ",val_Turbidity[2]
,"  or < ",val_Turbidity[4]," ",val_Turbidity[2])
, paste0(">= ", val_Turbidity[7]," ",val_Turbidity[2]," (+/-)")
, "NA"
, paste0("> ",val_Turbidity[11]
," consecutive measurements within ",val_Turbidity[13]
," units of one another"))
txt_Turbidity_S <- c(val_Turbidity[1]
, "Suspect"
, paste0("> ",val_Turbidity[4]," ",val_Turbidity[2]
," or < ",val_Turbidity[6]," ",val_Turbidity[2])
, paste0(">= ", val_Turbidity[8]," ",val_Turbidity[2]," (+/-)")
, "NA"
, paste0("> ",val_Turbidity[12]
," consecutive measurements within ",val_Turbidity[13]
," units of one another"))
# Chlorophylla
nam_Chlorophylla <- c("myLab.Chlorophylla"                          #1
, "myUnits.Chlorophylla"                    #2
, "myThresh.Gross.Fail.Hi.Chlorophylla"     #3
, "myThresh.Gross.Fail.Lo.Chlorophylla"     #4
, "myThresh.Gross.Suspect.Hi.Chlorophylla"  #5
, "myThresh.Gross.Suspect.Lo.Chlorophylla"  #6
, "myThresh.Spike.Hi.Chlorophylla"          #7
, "myThresh.Spike.Lo.Chlorophylla"          #8
, "myThresh.RoC.SD.number.Chlorophylla"     #9
, "myThresh.RoC.SD.period.Chlorophylla"     #10
, "myThresh.Flat.Hi.Chlorophylla"           #11
, "myThresh.Flat.Lo.Chlorophylla"           #12
, "myThresh.Flat.Tolerance.Chlorophylla"    #13
)
val_Chlorophylla <- mget(nam_Chlorophylla, envir=ContData.env)
txt_Chlorophylla_F <- c(val_Chlorophylla[1]
, "Fail"
, paste0("> ",val_Chlorophylla[3]," ",val_Chlorophylla[2]
,"  or < ",val_Chlorophylla[4]," ",val_Chlorophylla[2])
, paste0(">= ", val_Chlorophylla[7]," ",val_Chlorophylla[2]," (+/-)")
, "NA"
, paste0("> ",val_Chlorophylla[11]
," consecutive measurements within ",val_Chlorophylla[13]
," units of one another"))
txt_Chlorophylla_S <- c(val_Chlorophylla[1]
, "Suspect"
, paste0("> ",val_Chlorophylla[4]," ",val_Chlorophylla[2]
," or < ",val_Chlorophylla[6]," ",val_Chlorophylla[2])
, paste0(">= ", val_Chlorophylla[8]," ",val_Chlorophylla[2]," (+/-)")
, "NA"
, paste0("> ",val_Chlorophylla[12]
," consecutive measurements within ",val_Chlorophylla[13]
," units of one another"))
# GageHeight
nam_GageHeight <- c("myLab.GageHeight"                          #1
, "myUnits.GageHeight"                    #2
, "myThresh.Gross.Fail.Hi.GageHeight"     #3
, "myThresh.Gross.Fail.Lo.GageHeight"     #4
, "myThresh.Gross.Suspect.Hi.GageHeight"  #5
, "myThresh.Gross.Suspect.Lo.GageHeight"  #6
#, "myThresh.Spike.Hi.GageHeight"          #7 -removed
#, "myThresh.Spike.Lo.GageHeight"          #8 - removed
, "myThresh.RoC.SD.number.GageHeight"     #9 - 7
, "myThresh.RoC.SD.period.GageHeight"     #10 - 8
, "myThresh.Flat.Hi.GageHeight"           #11 - 9
, "myThresh.Flat.Lo.GageHeight"           #12 - 10
, "myThresh.Flat.Tolerance.GageHeight"    #13 - 11
)
val_GageHeight <- mget(nam_GageHeight, envir=ContData.env)
txt_GageHeight_F <- c(val_GageHeight[1]
, "Fail"
, paste0("> ",val_GageHeight[3]," ",val_GageHeight[2]
,"  or < ",val_GageHeight[4]," ",val_GageHeight[2])
, "NA"
, "NA"
, paste0("> ",val_GageHeight[9]
," consecutive measurements within ",val_GageHeight[11]
," units of one another"))
txt_GageHeight_S <- c(val_GageHeight[1]
, "Suspect"
, paste0("> ",val_GageHeight[4]," ",val_GageHeight[2]
," or < ",val_GageHeight[6]," ",val_GageHeight[2])
, "NA"
, "NA"
, paste0("> ",val_GageHeight[10]
," consecutive measurements within ",val_GageHeight[11]
," units of one another"))
# Create Table
df_Env <- data.frame(rbind(txt_WaterTemp_F, txt_WaterTemp_S
, txt_AirTemp_F, txt_AirTemp_S
, txt_WaterP_F, txt_WaterP_S
, txt_AirBP_F, txt_AirBP_S
, txt_SensorDepth_F, txt_SensorDepth_S
, txt_Discharge_F, txt_Discharge_S
, txt_Cond_F, txt_Cond_S
, txt_DO_F, txt_DO_S
, txt_pH_F, txt_pH_S
, txt_Turbidity_F, txt_Turbidity_S
, txt_Chlorophylla_F, txt_Chlorophylla_S
, txt_GageHeight_F, txt_GageHeight_S
)
, row.names = NULL)
names(df_Env) <- txt_header
knitr::kable(df_Env, caption = kbl_caption)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
help(package="ContDataQC")
fun.ConfigOut()
?config.load
config.load(fun.myConfig)
fun.myConfig <- ""
config.load(fun.myConfig)
Config.Out <- function(fun.myConfig="", fun.myDir.export=getwd(), fun.myReport.Dir=""){##FUNCTION.START
#
# config file load, 20170517
if (fun.myConfig!="") {##IF.fun.myConfig.START
config.load(fun.myConfig)
}##IF.fun.myConfig.START
#
# Error Check, Report Directory
if(fun.myReport.Dir==""){
fun.myReport.Dir <- ContData.env$myReport.Dir
}
#
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
#
myReport.Name <- "Report_Config"
fun.myReport.format <- "html"
#
strFile.RMD <- file.path(fun.myReport.Dir, paste0(myReport.Name, ".rmd"))
strFile.out.ext <- paste0(".",fun.myReport.format) #".docx" # ".html"
strFile.out <- paste0(paste(myReport.Name,myDate,myTime,sep=ContData.env$myDelim),fun.myReport.format)
#paste(paste(strFile.Prefix,strFile.SiteID,fun.myData.Type,,myReport.Name,sep=ContData.env$myDelim),strFile.out.ext,sep="")
#
# Test if RMD file exists
if (file.exists(strFile.RMD)){##IF.file.exists.START
#suppressWarnings(
rmarkdown::render(strFile.RMD, output_file=strFile.out, output_dir=fun.myDir.export, quiet=TRUE)
#)
} else {
Msg.Line0 <- "\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
Msg.Line1 <- "Provided report template file directory does not include the necessary RMD file to generate the report.  So no report will be generated."
Msg.Line2 <- "The default report directory can be modified in config.R (ContData.env$myReport.Dir) and used as input to the function (fun.myConfig)."
Msg.Line3 <- paste0("file = ", paste0(myReport.Name, ".rmd"))
Msg.Line4 <- paste0("directory = ", fun.myReport.Dir)
Msg <- paste(Msg.Line0, Msg.Line1, Msg.Line2, Msg.Line3, Msg.Line4, Msg.Line0, sep="\n\n")
cat(Msg)
flush.console()
}##IF.file.exists.END
#
}##FUNCTION.END
Config.Out
Config.Out()
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
help(package="ContDataQC")
Config.Out()
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
help(package="ContDataQC")
Config.Out()
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
help(package="ContDataQC")
Config.Out()
