myDir.BASE <- getwd()
# Function Inputs
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
myFiles <- c(fn1, fn2)
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export)
library(plotly)
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(getwd(), "Data1_RAW"), fn1)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(getwd(), "Data1_RAW"), fn1)
df_2 <- read.csv(file.path(getwd(), "Data1_RAW"), fn2)
(file.path(getwd(), "Data1_RAW")
)
?read.csv
df_1 <- read.csv(file.path(getwd(), "Data1_RAW"), fn1)
df_1 <- read.delim(file.path(getwd(), "Data1_RAW"), fn1)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(getwd(), "Data1_RAW"), fn1)
fn1 <- "_TestPlot_Ellis_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(getwd(), "Data1_RAW"), fn1)
getwd()
df_1 <- read.csv(file.path(wd, "Data1_RAW"), fn1)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn1 <- "_TestPlot_Ellis_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(wd, "Data1_RAW"), fn1)
df_1 <- read.csv(file.path(wd), fn1)
?read.csv
read.csv(file.path(wd, fn1))
df_1 <- read.csv(file.path(wd, "Data1_RAW", fn1))
df_2 <- read.csv(file.path(wd, "Data1_RAW", fn2), header=FALSE)
head(df_1)
head(df_2)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(wd, "Data1_RAW", fn1))
df_2 <- read.csv(file.path(wd, "Data1_RAW", fn2))
head(df_2)
?rbind
dim(df_1)
dim(df_2)
head(df_1)
head(df_2)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(wd, "Data1_RAW", fn1))
df_2 <- read.csv(file.path(wd, "Data1_RAW", fn2))
head(df_1)
head(df_2)
library(ContDataQC)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Function Inputs
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
myFiles <- c(fn1, fn2)
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(wd, "Data1_RAW", fn1))
df_2 <- read.csv(file.path(wd, "Data1_RAW", fn2))
head(df_1)
head(df_2)
?formatHobo
# Packages
library(ContDataQC)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Function Inputs
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
myFiles <- c(fn1, fn2)
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
myFormat = "YMD"
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export, fun.HoboDateFormat=myFormat)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(wd, "Data1_RAW", fn1))
df_2 <- read.csv(file.path(wd, "Data1_RAW", fn2))
head(df_1)
head(df_2)
dim(c(df_1, df_2))
df_lake <- rbind(df_1, df_2)
dim(df_1)
dim(df_2)
dim(df_lake)
str(df_1)
str(df_2)
str(df_lake)
?gsub
df_lake$SiteID_Depth <- df_lake$SiteID
mySiteID <- "Ellis"
df_lake$SiteID <- mySiteID
df_lake$Depth_Units <- sub(mySiteID, "", df_lake$SiteID_Depth)
head(df_lake)
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
getwd()
setwd(..)
setwd("..")
getwd()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
devtools::install(myLibrary)
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
# Packages
library(ContDataQC)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Function Inputs
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
myFiles <- c(fn1, fn2)
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
myFormat = "YMD"
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export, fun.HoboDateFormat=myFormat)
# Packages
library(ggplot2)
library(plotly)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(wd, "Data1_RAW", fn1))
df_2 <- read.csv(file.path(wd, "Data1_RAW", fn2))
head(df_1)
head(df_2)
# Combine
df_lake <- rbind(df_1, df_2)
dim(df_1)
dim(df_2)
dim(df_lake)
# Parse SiteID and Depth
df_lake$SiteID_Depth <- df_lake$SiteID
mySiteID <- "Ellis"
df_lake$SiteID <- mySiteID
df_lake$Depth_Units <- sub(mySiteID, "", df_lake$SiteID_Depth)
head(df_lake)
?gsub
x <- "1.0m"
regexp("[a-z]$", x)
regexpr("[a-z]$", x)
sub("[a-z]$", x)
sub("[a-z]$", "", x)
df_lake$Depth <- sub("[a-z]$", "", df_lake$Depth_Units)
head(df_lake)
df_lake$Depth_Units <- sub(df_lake$Depth, "", df_lake$Depth_Units)
?apply
?replace
str(df_lakes)
str(df_lake)
sort(unique(df_lake$Depth))
sub("?![a-z]$", "", df_lake$Depth_Units)
sub("![a-z]$", "", df_lake$Depth_Units)
df_lake$Depth_Units
head(df_lake)
df_lake$Depth_Units <- sub(mySiteID, "", df_lake$SiteID_Depth)
x <- c("1.0m", "3.0m")
x
head(df_lake)
sub("![a-z]$", "", x)
y <- "^[0-9]\\d*(\\.\\d+)"
sub(y, "", x)
# Parse SiteID and Depth
df_lake$SiteID_Depth <- df_lake$SiteID
mySiteID <- "Ellis"
df_lake$SiteID <- mySiteID
df_lake$Depth_Units <- sub(mySiteID, "", df_lake$SiteID_Depth)
pattern_1 <- "[a-z]$"
df_lake$Depth <- sub(pattern_1, "", df_lake$Depth_Units)
pattern_2 <- "^[0-9]\\d*(\\.\\d+)"
#https://stackoverflow.com/questions/2811031/decimal-or-numeric-values-in-regular-expression-validation
df_lake$Depth_Units <- sub(pattern_2, "", df_lake$Depth_Units)
head(df_lake)
str(df_lake)
df_lake$SiteID_Depth <- df_lake$SiteID
mySiteID <- "Ellis"
df_lake$SiteID <- mySiteID
df_lake$Depth_Units <- sub(mySiteID, "", df_lake$SiteID_Depth)
pattern_1 <- "[a-z]$"
df_lake$Depth <- sub(pattern_1, "", df_lake$Depth_Units)
head(df_lake)
# Packages
library(ggplot2)
library(plotly)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(wd, "Data1_RAW", fn1))
df_2 <- read.csv(file.path(wd, "Data1_RAW", fn2))
head(df_1)
head(df_2)
# Combine
df_lake <- rbind(df_1, df_2)
dim(df_1)
dim(df_2)
dim(df_lake)
# Parse SiteID and Depth
df_lake$SiteID_Depth <- df_lake$SiteID
mySiteID <- "Ellis"
df_lake$SiteID <- mySiteID
df_lake$Depth_Units <- sub(mySiteID, "", df_lake$SiteID_Depth)
pattern_1 <- "[a-z]$"
df_lake$Depth <- sub(pattern_1, "", df_lake$Depth_Units)
pattern_2 <- "^[0-9]\\d*(\\.\\d+)"
#https://stackoverflow.com/questions/2811031/decimal-or-numeric-values-in-regular-expression-validation
df_lake$Depth_Units <- sub(pattern_2, "", df_lake$Depth_Units)
head(df_lake)
# Packages
library(ggplot2)
library(plotly)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(wd, "Data1_RAW", fn1))
df_2 <- read.csv(file.path(wd, "Data1_RAW", fn2))
head(df_1)
head(df_2)
# Combine
df_lake <- rbind(df_1, df_2)
dim(df_1)
dim(df_2)
dim(df_lake)
# Parse SiteID and Depth
df_lake$SiteID_Orig <- df_lake$SiteID
mySiteID <- "Ellis"
df_lake$SiteID <- mySiteID
df_lake
head(df_lake)
df_lake$Depth_Units <- sub(mySiteID, "", df_lake$SiteID_Orig)
head(df_lake)
pattern_1 <- "[a-z]$"
df_lake$Depth <- sub(pattern_1, "", df_lake$Depth_Units)
head(df_lake)
pattern_2 <- "^[0-9]\\d*(\\.\\d+)"
#https://stackoverflow.com/questions/2811031/decimal-or-numeric-values-in-regular-expression-validation
df_lake$Depth_Units <- sub(pattern_2, "", df_lake$Depth_Units)
head(df_lake)
str(df_lake)
unique(df_lake$Depth)
unique(df_lake$Depth_Units)
p1 <- ggplot(df_lake, aes(Date.Time, Water.Temp.C))
p1 + geom_line()
p1
p1 + geom_line(x=Date.Time, y=Water.Temp.C)
p1 + geom_line(aes(x=Date.Time, y=Water.Temp.C, colour=Depth))
range(df_lake$Water.Temp.C)
p1 <- ggplot(df_lake, aes(Date.Time, Water.Temp.C))
p1 <- p1 + geom_line(aes(x=Date.Time, y=Water.Temp.C, colour=Depth))
p1
p1 <- p1 + geom_line(aes(x=Date.Time, y=Water.Temp.C))
p1
library(plotly)
?plotly
p1_ly <- ggplotly(p1)
p1_ly
p1 <- ggplot(df_lake, aes(Date.Time, Water.Temp.C))
p1 <- p1 + geom_point(aes(x=Date.Time, y=Water.Temp.C, colour=Depth))
p1
p1_ly <- ggplotly(p1)
p1_ly
# Packages
library(ggplot2)
library(plotly)
# Dir
wd <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190121_Lakes"
setwd(wd)
# Data
fn1 <- "Ellis1.0m_Water_20180524_20180918.csv"
fn2 <- "Ellis3.0m_Water_20180524_20180918.csv"
df_1 <- read.csv(file.path(wd, "Data1_RAW", fn1))
df_2 <- read.csv(file.path(wd, "Data1_RAW", fn2))
head(df_1)
head(df_2)
# Combine
df_lake <- rbind(df_1, df_2)
dim(df_1)
dim(df_2)
dim(df_lake)
# Parse SiteID and Depth
df_lake$SiteID_Orig <- df_lake$SiteID
mySiteID <- "Ellis"
df_lake$SiteID <- mySiteID
df_lake$Depth_Units <- sub(mySiteID, "", df_lake$SiteID_Orig)
pattern_1 <- "[a-z]$"
df_lake$Depth <- sub(pattern_1, "", df_lake$Depth_Units)
pattern_2 <- "^[0-9]\\d*(\\.\\d+)"
#https://stackoverflow.com/questions/2811031/decimal-or-numeric-values-in-regular-expression-validation
df_lake$Depth_Units <- sub(pattern_2, "", df_lake$Depth_Units)
head(df_lake)
# Plot
## ggplot
p1 <- ggplot(df_lake, aes(Date.Time, Water.Temp.C))
p1 <- p1 + geom_point(aes(x=Date.Time, y=Water.Temp.C, colour=Depth))
p1
## plotly
p1_ly <- ggplotly(p1)
p1_ly
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
getwd()
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC")
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
