, "myThresh.RoC.SD.period.pH"     #10
, "myThresh.Flat.Hi.pH"           #11
, "myThresh.Flat.Lo.pH"           #12
, "myThresh.Flat.Tolerance.pH"    #13
)
val_pH <- mget(nam_pH, envir=ContData.env)
txt_pH_F <- c(val_pH[1]
, "Fail"
, paste0("> ",val_pH[3]," ",val_pH[2]
,"  or < ",val_pH[4]," ",val_pH[2])
, paste0(">= ", val_pH[7]," ",val_pH[2]," (+/-)")
, "NA"
, paste0("> ",val_pH[11]
," consecutive measurements within ",val_pH[13]
," units of one another"))
txt_pH_S <- c(val_pH[1]
, "Suspect"
, paste0("> ",val_pH[4]," ",val_pH[2]
," or < ",val_pH[6]," ",val_pH[2])
, paste0(">= ", val_pH[8]," ",val_pH[2]," (+/-)")
, paste0(">= ",val_pH[9]," standard deviations within "
,val_pH[10]," hours")
, paste0("> ",val_pH[12]
," consecutive measurements within ",val_pH[13]
," units of one another"))
# Turbidity
nam_Turbidity <- c("myLab.Turbidity"                          #1
, "myUnits.Turbidity"                    #2
, "myThresh.Gross.Fail.Hi.Turbidity"     #3
, "myThresh.Gross.Fail.Lo.Turbidity"     #4
, "myThresh.Gross.Suspect.Hi.Turbidity"  #5
, "myThresh.Gross.Suspect.Lo.Turbidity"  #6
, "myThresh.Spike.Hi.Turbidity"          #7
, "myThresh.Spike.Lo.Turbidity"          #8
, "myThresh.RoC.SD.number.Turbidity"     #9
, "myThresh.RoC.SD.period.Turbidity"     #10
, "myThresh.Flat.Hi.Turbidity"           #11
, "myThresh.Flat.Lo.Turbidity"           #12
, "myThresh.Flat.Tolerance.Turbidity"    #13
)
val_Turbidity <- mget(nam_Turbidity, envir=ContData.env)
txt_Turbidity_F <- c(val_Turbidity[1]
, "Fail"
, paste0("> ",val_Turbidity[3]," ",val_Turbidity[2]
,"  or < ",val_Turbidity[4]," ",val_Turbidity[2])
, paste0(">= ", val_Turbidity[7]," ",val_Turbidity[2]," (+/-)")
, "NA"
, paste0("> ",val_Turbidity[11]
," consecutive measurements within ",val_Turbidity[13]
," units of one another"))
txt_Turbidity_S <- c(val_Turbidity[1]
, "Suspect"
, paste0("> ",val_Turbidity[4]," ",val_Turbidity[2]
," or < ",val_Turbidity[6]," ",val_Turbidity[2])
, paste0(">= ", val_Turbidity[8]," ",val_Turbidity[2]," (+/-)")
, paste0(">= ",val_Turbidity[9]," standard deviations within "
,val_Turbidity[10]," hours")
, paste0("> ",val_Turbidity[12]
," consecutive measurements within ",val_Turbidity[13]
," units of one another"))
# Chlorophylla
nam_Chlorophylla <- c("myLab.Chlorophylla"                          #1
, "myUnits.Chlorophylla"                    #2
, "myThresh.Gross.Fail.Hi.Chlorophylla"     #3
, "myThresh.Gross.Fail.Lo.Chlorophylla"     #4
, "myThresh.Gross.Suspect.Hi.Chlorophylla"  #5
, "myThresh.Gross.Suspect.Lo.Chlorophylla"  #6
, "myThresh.Spike.Hi.Chlorophylla"          #7
, "myThresh.Spike.Lo.Chlorophylla"          #8
, "myThresh.RoC.SD.number.Chlorophylla"     #9
, "myThresh.RoC.SD.period.Chlorophylla"     #10
, "myThresh.Flat.Hi.Chlorophylla"           #11
, "myThresh.Flat.Lo.Chlorophylla"           #12
, "myThresh.Flat.Tolerance.Chlorophylla"    #13
)
val_Chlorophylla <- mget(nam_Chlorophylla, envir=ContData.env)
txt_Chlorophylla_F <- c(val_Chlorophylla[1]
, "Fail"
, paste0("> ",val_Chlorophylla[3]," ",val_Chlorophylla[2]
,"  or < ",val_Chlorophylla[4]," ",val_Chlorophylla[2])
, paste0(">= ", val_Chlorophylla[7]," ",val_Chlorophylla[2]," (+/-)")
, "NA"
, paste0("> ",val_Chlorophylla[11]
," consecutive measurements within ",val_Chlorophylla[13]
," units of one another"))
txt_Chlorophylla_S <- c(val_Chlorophylla[1]
, "Suspect"
, paste0("> ",val_Chlorophylla[4]," ",val_Chlorophylla[2]
," or < ",val_Chlorophylla[6]," ",val_Chlorophylla[2])
, paste0(">= ", val_Chlorophylla[8]," ",val_Chlorophylla[2]," (+/-)")
, paste0(">= ",val_Chlorophylla[9]," standard deviations within "
,val_Chlorophylla[10]," hours")
, paste0("> ",val_Chlorophylla[12]
," consecutive measurements within ",val_Chlorophylla[13]
," units of one another"))
# GageHeight
nam_GageHeight <- c("myLab.GageHeight"                          #1
, "myUnits.GageHeight"                    #2
, "myThresh.Gross.Fail.Hi.GageHeight"     #3
, "myThresh.Gross.Fail.Lo.GageHeight"     #4
, "myThresh.Gross.Suspect.Hi.GageHeight"  #5
, "myThresh.Gross.Suspect.Lo.GageHeight"  #6
#, "myThresh.Spike.Hi.GageHeight"          #7 -removed
#, "myThresh.Spike.Lo.GageHeight"          #8 - removed
, "myThresh.RoC.SD.number.GageHeight"     #9 - 7
, "myThresh.RoC.SD.period.GageHeight"     #10 - 8
, "myThresh.Flat.Hi.GageHeight"           #11 - 9
, "myThresh.Flat.Lo.GageHeight"           #12 - 10
, "myThresh.Flat.Tolerance.GageHeight"    #13 - 11
)
val_GageHeight <- mget(nam_GageHeight, envir=ContData.env)
txt_GageHeight_F <- c(val_GageHeight[1]
, "Fail"
, paste0("> ",val_GageHeight[3]," ",val_GageHeight[2]
,"  or < ",val_GageHeight[4]," ",val_GageHeight[2])
, "NA"
, "NA"
, paste0("> ",val_GageHeight[9]
," consecutive measurements within ",val_GageHeight[11]
," units of one another"))
txt_GageHeight_S <- c(val_GageHeight[1]
, "Suspect"
, paste0("> ",val_GageHeight[4]," ",val_GageHeight[2]
," or < ",val_GageHeight[6]," ",val_GageHeight[2])
, "NA"
, paste0(">= ",val_GageHeight[7]," standard deviations within "
,val_GageHeight[8]," hours")
, paste0("> ",val_GageHeight[10]
," consecutive measurements within ",val_GageHeight[11]
," units of one another"))
# Create Table
## Display only those parameters used in current dataset (data.import)
# QC
boo.QC <- FALSE
if(boo.QC==TRUE){##IF.boo.QC.START
# Ensure have ContDat.env loaded
myConfig <- file.path(system.file(package="ContDataQC"), "extdata", "config.ORIG.R")
source(myConfig)
# load dat.import
fn.import <- file.path(getwd(), "Data1_RAW", "test2_AW_20130426_20130725.csv")
data.import <- read.csv(fn.import)
}##IF.boo.QC.END
#
# Check for Presence of each Analyte in data
# if not present convert to NULL
# if NULL then won't be included in result data.frame
if(!(ContData.env$myName.WaterTemp %in% names(data.import))){
txt_WaterTemp_F <- NULL
txt_WaterTemp_S <- NULL
}
myConfig <- file.path(system.file(package="ContDataQC"), "extdata", "config.ORIG.R")
?config
??config
Config.Out()
library(ContDataQC)
Config.Out()
# WaterTemp
nam_WaterTemp <- c("myLab.WaterTemp"                       #1
, "myUnits.WaterTemp"                    #2
, "myThresh.Gross.Fail.Hi.WaterTemp"     #3
, "myThresh.Gross.Fail.Lo.WaterTemp"     #4
, "myThresh.Gross.Suspect.Hi.WaterTemp"  #5
, "myThresh.Gross.Suspect.Lo.WaterTemp"  #6
, "myThresh.Spike.Hi.WaterTemp"          #7
, "myThresh.Spike.Lo.WaterTemp"          #8
, "myThresh.RoC.SD.number.WaterTemp"     #9
, "myThresh.RoC.SD.period.WaterTemp"     #10
, "myThresh.Flat.Hi.WaterTemp"           #11
, "myThresh.Flat.Lo.WaterTemp"           #12
, "myThresh.Flat.Tolerance.WaterTemp"    #13
)
val_WaterTemp <- mget(nam_WaterTemp, envir=ContData.env)
txt_WaterTemp_F <- c(val_WaterTemp[1]
, "Fail"
, paste0("> ",val_WaterTemp[3]," deg ",val_WaterTemp[2]
,"  or < ",val_WaterTemp[4]," deg ",val_WaterTemp[2])
, paste0(">= ", val_WaterTemp[7]," deg ",val_WaterTemp[2]," (+/-)")
, "NA"
, paste0("> ",val_WaterTemp[11]
," consecutive measurements within ",val_WaterTemp[13]
," units of one another"))
txt_WaterTemp_S <- c(val_WaterTemp[1]
, "Suspect"
, paste0("> ",val_WaterTemp[4]," deg ",val_WaterTemp[2]
," or < ",val_WaterTemp[6]," deg ",val_WaterTemp[2])
, paste0(">= ", val_WaterTemp[8]," deg ",val_WaterTemp[2]," (+/-)")
, paste0(">= ",val_WaterTemp[9]," standard deviations within "
,val_WaterTemp[10]," hours")
, paste0("> ",val_WaterTemp[12]
," consecutive measurements within ",val_WaterTemp[13]
," units of one another"))
txt_WaterTemp_F
txt_WaterTemp_S
val_WaterTemp
?formatHobo
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
# Examples of each operation
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[2],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile)
,file.path(getwd(),Selection.SUB[2],myFile))
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "docx"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Restart R within RStudio:  Ctrl + Shift + F10
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
#
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
getwd()
wd <- getwd()
fn <- file.path(wd, "R", "config.R")
cat(readLines(fn), sep="\n")
wd <- getwd()
fn <- file.path(wd, "R", "config.R")
cat(readLines(fn), sep="\n")
wd <- getwd()
fn <- file.path(wd, "R", "config.R")
cat(readLines(fn), sep="\n")
fn <- file.path(system.file("extdata", "config.ORIG.R", package="ContDataQC"))
cat(readLines(fn), sep="\n")
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
#
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
#
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Restart R within RStudio:  Ctrl + Shift + F10
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
fn <- file.path(system.file("extdata", "config.ORIG.R", package="ContDataQC"))
cat(readLines(fn), sep="\n")
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
