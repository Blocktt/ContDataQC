fun.myDir.import <- file.path(getwd(), "Data0_Original")
fun.myDir.export <- file.path(getwd(), "Data1_RAW")
fun.HoboDateFormat <- "MDY"
# Load environment
#ContData.env <- new.env(parent = emptyenv()) # in config.R
source(file.path(getwd(),"R","config.R"), local=TRUE)
## config file load, 20170517
if (fun.myConfig!="") {##IF.fun.myConfig.START
config.load(fun.myConfig)
}##IF.fun.myConfig.START
#
## dont need check if using "files" version
if(fun.myFile[1]==""){##IF.fun.myFile.START
# Error checking.  If any null then kick back
## (add later)
# 20160204, Check for required fields
#   Add to individual scripts as need to load the file first
# QC Check - delimiter in site ID
if(ContData.env$myDelim==".") {##IF.myDelim.START
# special case for regex check to follow (20170531)
myDelim2Check <- "\\."
} else {
myDelim2Check <- ContData.env$myDelim
}##IF.myDelim.END
#
# QC.SiteID.myDelim <- grepl(myDelim2Check, fun.myData.SiteID) #T/F
# #
# if(QC.SiteID.myDelim==TRUE){##IF.QC.SiteID.myDelim.START
#   #
#   myMsg <- paste("\n
#                  SiteID (",fun.myData.SiteID,") contains the same delimiter (",ContData.env$myDelim,") as in your file names.
#                  \n
#                  Scripts will not work properly while this is true.
#                  \n
#                  Change SiteID names so they do not include the same delimiter.
#                  \n
#                  Or change file names and the variable 'myDelim' in the configuration script 'config.R' (or in the file specified by the user).",sep="")
#   stop(myMsg)
#   #
# }##IF.QC.SiteID.myDelim.END
}##IF.fun.myFile.END
# 01. Loop Files ####
fun.myConfig <- ""
# 00. QC ####
## config file load, 20170517
if (fun.myConfig!="") {##IF.fun.myConfig.START
config.load(fun.myConfig)
}##IF.fun.myConfig.START
## dont need check if using "files" version
if(fun.myFile[1]==""){##IF.fun.myFile.START
# Error checking.  If any null then kick back
## (add later)
# 20160204, Check for required fields
#   Add to individual scripts as need to load the file first
# QC Check - delimiter in site ID
if(ContData.env$myDelim==".") {##IF.myDelim.START
# special case for regex check to follow (20170531)
myDelim2Check <- "\\."
} else {
myDelim2Check <- ContData.env$myDelim
}##IF.myDelim.END
#
# QC.SiteID.myDelim <- grepl(myDelim2Check, fun.myData.SiteID) #T/F
# #
# if(QC.SiteID.myDelim==TRUE){##IF.QC.SiteID.myDelim.START
#   #
#   myMsg <- paste("\n
#                  SiteID (",fun.myData.SiteID,") contains the same delimiter (",ContData.env$myDelim,") as in your file names.
#                  \n
#                  Scripts will not work properly while this is true.
#                  \n
#                  Change SiteID names so they do not include the same delimiter.
#                  \n
#                  Or change file names and the variable 'myDelim' in the configuration script 'config.R' (or in the file specified by the user).",sep="")
#   stop(myMsg)
#   #
# }##IF.QC.SiteID.myDelim.END
}##IF.fun.myFile.END
i <- fun.myFile[1]
boo.DEBUG
boo.DEBUG<- FALSE
# 01.00. Setup ####
# current file is "i"
i.num <- match(i, fun.myFile)
i.len <- length(fun.myFile)
# User feedback
cat(paste0("Working on item (", i.num, "/", i.len, "); ", i, "\n"))
flush.console()
# 01.01. Import ####
# import with read.delim (greater control than read.csv)
df_hobo <- read.delim(file.path(fun.myDir.import, i), skip=1, header=TRUE, sep=","
, check.names=FALSE, stringsAsFactors = FALSE)
# 01.02. Munge ####
# parse name on "." (for extension) or "_"
split_fn_hobo   <- unlist(strsplit(i, paste0("[.]|[",ContData.env$myDelim,"]")))
SiteID          <- split_fn_hobo[1]
Type            <- split_fn_hobo[2]
DateRange.Start <- split_fn_hobo[3]
DateRange.End   <- split_fn_hobo[4]
FileFormat      <- split_fn_hobo[5]
# 01.03. Columns ####
# Check for columns (all lower case)
find_Date <- "date"
find_Temp <- "temp"
find_Pres <- "pres"
find_Air  <- "air"
find_Water <- "water"
find_Depth <- "depth"
find_Barom <- "barom"
find_badchar <- "Ã‚"
find_logger <- "LGR S/N:"
# Replace bad character
names(df_hobo) <- gsub(find_badchar, "", names(df_hobo))
# Columns, Hobo
## Date
col_Date <- names(df_hobo)[grepl(find_Date, tolower(names(df_hobo)))]
## Air Temp
col_AirTemp <- names(df_hobo)[grepl(paste0(find_Air,".*",find_Temp,"|",find_Temp,".*",find_Air)
, tolower(names(df_hobo)))]
## Water Temp
col_WaterTemp <- names(df_hobo)[grepl(paste0(find_Water,".*",find_Temp,"|",find_Temp,".*",find_Water)
, tolower(names(df_hobo)))]
## Air Pressure
col_AirBP <- names(df_hobo)[grepl(paste0(find_Barom,".*",find_Pres,"|",find_Pres,".*",find_Barom)
, tolower(names(df_hobo)))]
## Water Pressure
# find Pres and not Barom
col_WaterP_find <- grepl(find_Pres, tolower(names(df_hobo))) + !grepl(find_Barom, tolower(names(df_hobo)))
col_WaterP <- names(df_hobo)[col_WaterP_find==2]
## Sensor Depth
col_SensorDepth <- names(df_hobo)[grepl(find_Depth, tolower(names(df_hobo)))]
## Logger (both)
LogID_str <- "LGR S/N: "
## Logger, Water
### conditional so is below
## Logger, Air
### conditional so is below
is.null(fun.HoboDateFormat)==TRUE
fun.HoboDateFormat
# Modify Date ####
if(is.null(fun.HoboDateFormat)==FALSE){##IF.isnull.hobodate.START
# new date
date_new <- df_hobo[,col_Date]
# Determine delimiter
if(grepl("-", date_new[1])==TRUE){
HW_delim <- "-"
} else if (grepl("/", date_new[1])==TRUE){
HW_delim <- "/"
} else {
msg <- "Data format not discernable."
stop(msg)
}
# Determine format
if(toupper(fun.HoboDateFormat)=="MDY"){
HW_format <- paste0("%m",HW_delim,"%d",HW_delim,"%y %H:%M:%S")
} else if (toupper(fun.HoboDateFormat)=="DMY") {
HW_format <- paste0("%d",HW_delim,"%m",HW_delim,"%y %H:%M:%S")
} else if (toupper(fun.HoboDateFormat)=="YMD") {
HW_format <- paste0("%y",HW_delim,"%m",HW_delim,"%d %H:%M:%S")
} else {
msg <- paste0("Incorrect Hoboware format (MDY, DMY, YMD) specified, ", fun.HoboDateFormat)
stop(msg)
}
# Modify dates
date_new_mod <- format(strptime(date_new, format=HW_format), ContData.env$myFormat.DateTime)
# modify hobo data frame to updated date format
df_hobo[,col_Date] <- date_new_mod
}##IF.isnull.hobodate.END
head(df_hobo)
wd <- getwd()
myFile <- "ECO66G12_AW_20160128_20160418.csv"
df.4 <- read.delim(file.path(wd,"data-raw", myFile))
myFile <- "ECO66G12_AW_20160128_20160418.csv"
df.4 <- read.delim(file.path(wd,"data-raw", myFile))
View(df.4)
dim(df.4)
str(df.4)
data_raw_ECO66G12_AW_20160128_20160418 <- df.4
devtools::use_data(data_raw_ECO66G12_AW_20160128_20160418, overwrite = TRUE)
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
?formatHobo
library(ContDataQC)
?formatHobo
library(ContDataQC)
?formatHobo
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB       <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE          <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data0_Original/ exists)
fn_1 <- "Charlies_Air_20170726_20170926.csv"
fn_2 <- "Charlies_AW_20170726_20170926.csv"
fn_3 <- "Charlies_Water_20170726_20170926.csv"
fn_4 <- "ECO66G12_AW_20160128_20160418.csv"
lapply(c(fn_1, fn_2, fn_3, fn_4), function(x)
file.copy(system.file("extdata", x, package="ContDataQC")
, file.path(myDir.BASE, Selection.SUB[1], x)))
# Function Inputs
myFiles <- c("Charlies_Air_20170726_20170926.csv"
, "Charlies_AW_20170726_20170926.csv"
, "Charlies_Water_20170726_20170926.csv")
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# QC Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- myFiles
myDir.import <- file.path(".","Data1_RAW")
myDir.export <- file.path(".","Data2_QC")
myReport.format <- "html"
ContDataQC(myData.Operation, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export, fun.myFile=myFile
, fun.myReport.format=myReport.format)
# Example with unmodified dates
myFiles <- "ECO66G12_AW_20160128_20160418.csv"
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
HoboDateFormat <- "MDY"
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export, HoboDateFormat)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB       <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE          <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data0_Original/ exists)
fn_1 <- "Charlies_Air_20170726_20170926.csv"
fn_2 <- "Charlies_AW_20170726_20170926.csv"
fn_3 <- "Charlies_Water_20170726_20170926.csv"
fn_4 <- "ECO66G12_AW_20160128_20160418.csv"
lapply(c(fn_1, fn_2, fn_3, fn_4), function(x)
file.copy(system.file("extdata", x, package="ContDataQC")
, file.path(myDir.BASE, Selection.SUB[1], x)))
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Restart R within RStudio:  Ctrl + Shift + F10
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB       <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE          <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data0_Original/ exists)
fn_1 <- "Charlies_Air_20170726_20170926.csv"
fn_2 <- "Charlies_AW_20170726_20170926.csv"
fn_3 <- "Charlies_Water_20170726_20170926.csv"
fn_4 <- "ECO66G12_AW_20160128_20160418.csv"
lapply(c(fn_1, fn_2, fn_3, fn_4), function(x)
file.copy(system.file("extdata", x, package="ContDataQC")
, file.path(myDir.BASE, Selection.SUB[1], x)))
# Example with unmodified dates
myFiles <- "ECO66G12_AW_20160128_20160418.csv"
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
HoboDateFormat <- "MDY"
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export, HoboDateFormat)
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- myFiles
myDir.import <- file.path(".","Data1_RAW")
myDir.export <- file.path(".","Data2_QC")
myReport.format <- "html"
ContDataQC(myData.Operation, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export, fun.myFile=myFile
, fun.myReport.format=myReport.format)
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
