# almost worked
#data.import[!(is.na(data.import[,myName.DateTime])),][myName.DateTime] <- strftime(data.import[!(is.na(data.import[,myName.DateTime])),][myName.DateTime]
#                                                                                   ,format="%Y-%m-%d")
# have to do where is NOT NA because will fail if the first item is NA
# assume all records have the same format.
#
# B.5.1.1. Update Date to "%Y-%m-%d" (equivalent to %F)
myField   <- ContData.env$myName.Date
myFormat.In  <- format.Date #"%Y-%m-%d"
myFormat.Out <- ContData.env$myFormat.Date #"%Y-%m-%d"
data.import[,myField][!is.na(data.import[,myField])] <- format(strptime(data.import[,myField][!is.na(data.import[,myField])],format=myFormat.In)
,format=myFormat.Out)
# B.5.1.2. Update Time to "%H:%M:%S" (equivalent to %T) (uses different function)
myField   <- ContData.env$myName.Time
myFormat.In  <- format.Time #"%H:%M:%S"
myFormat.Out <- ContData.env$myFormat.Time #"%H:%M:%S"
data.import[,myField][!is.na(data.import[,myField])] <- format(as.POSIXct(data.import[,myField][!is.na(data.import[,myField])],format=myFormat.In)
,format=myFormat.Out)
# B.5.1.3. Update DateTime to "%Y-%m-%d %H:%M:%S" (equivalent to %F %T)
myField   <- ContData.env$myName.DateTime
myFormat.In  <- format.DateTime #"%Y-%m-%d %H:%M:%S"
myFormat.Out <- ContData.env$myFormat.DateTime #"%Y-%m-%d %H:%M:%S"
data.import[,myField][!is.na(data.import[,myField])] <- format(strptime(data.import[,myField][!is.na(data.import[,myField])],format=myFormat.In)
,format=myFormat.Out)
#   x<-data.import[,myField][!is.na(data.import[,myField])]
#   (z<-x[2])
#   (a <- strptime(z,format=myFormat.In))
#   (b <- strptime(x,format=myFormat.In))
#   # works on single record but fails on vector with strftime
#   # strptime works but adds time zone (don't like but it works)
#
#
# B.5.2. Update DateTime, Date, and Time if NA based on other fields
# B.5.2.1. Update Date_Time if NA (use Date and Time)
myField   <- ContData.env$myName.DateTime
myFormat  <- ContData.env$myFormat.DateTime #"%Y-%m-%d %H:%M:%S"
#   data.import[,myField][data.import[,myField]==""] <- strftime(paste(data.import[,myName.Date][data.import[,myField]==""]
#                                                                       ,data.import[,myName.Time][data.import[,myField]==""],sep="")
#                                                                 ,format=myFormat,usetz=FALSE)
data.import[,myField][is.na(data.import[,myField])] <- strftime(paste(data.import[,ContData.env$myName.Date][is.na(data.import[,myField])]
,data.import[,ContData.env$myName.Time][is.na(data.import[,myField])]
,sep=" ")
,format=myFormat,usetz=FALSE)
# B.5.2.2. Update Date if NA (use Date_Time)
myField   <- ContData.env$myName.Date
myFormat  <- ContData.env$myFormat.Date #"%Y-%m-%d"
#   data.import[,myField][data.import[,myField]==""] <- strftime(data.import[,myName.DateTime][data.import[,myName.Date]==""]
#                                                               ,format=myFormat,usetz=FALSE)
data.import[,myField][is.na(data.import[,myField])] <- strftime(data.import[,ContData.env$myName.DateTime][is.na(data.import[,myField])]
,format=myFormat,usetz=FALSE)
# B.5.2.3. Update Time if NA (use Date_Time)
myField   <- ContData.env$myName.Time
myFormat  <- ContData.env$myFormat.Time #"%H:%M:%S"
#   data.import[,myField][data.import[,myField]==""] <- strftime(data.import[,myName.DateTime][data.import[,myName.Time]==""]
#                                                               ,format=myFormat,usetz=FALSE)
data.import[,myField][is.na(data.import[,myField])] <- as.POSIXct(data.import[,ContData.env$myName.DateTime][is.na(data.import[,myField])]
,format=myFormat,usetz=FALSE)
#   data.import[,myName.DateTime] <- strftime(data.import[,myName.DateTime],format="%Y-%m-%d %H:%M:%S")
#
#
# Create Month and Day Fields
# month
#     myField   <- "month"
#     data.import[,myField] <- data.import[,myName.Date]
#     myFormat  <- "%m"
#     data.import[,myField][!is.na(data.import[,myName.Date])] <- strftime(data.import[,myName.Date][!is.na(data.import[,myName.DateTime])]
#                                                                     ,format=myFormat,usetz=FALSE)
data.import[,ContData.env$myName.Mo] <- as.POSIXlt(data.import[,ContData.env$myName.Date])$mon+1
# day
#     myField   <- "day"
#     data.import[,myField] <- data.import[,myName.Date]
#     myFormat.In  <- myFormat.Date #"%Y-%m-%d"
#     myFormat.Out <- "%d"
#     data.import[,myField][!is.na(data.import[,myField])] <- format(strptime(data.import[,myField][!is.na(data.import[,myField])],format=myFormat.In)
#                                                                    ,format=myFormat.Out)
data.import[,ContData.env$myName.Day] <- as.POSIXlt(data.import[,ContData.env$myName.Date])$mday
# year
data.import[,ContData.env$myName.Yr] <- as.POSIXlt(data.import[,ContData.env$myName.Date])$year+1900
#     ?DateTimeClasses
#
# B.6. QC for each Data Type present ####
# sub routine adds QC Calcs, QC Test Flags, Assigns overall Flag, and removes QC Calc Fields
# cycle each data type (manually code)
#
# skip if not present
# 20170512, move message inside of IF so user doesn't see it.
#
# 6.01. WaterTemp
myField <- ContData.env$myName.WaterTemp
if(myField %in% myNames.DataFields.Present==TRUE){##IF.myField.START
#
myMsg.data <- "WaterTemp"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.WaterTemp
,ContData.env$myThresh.Gross.Fail.Lo.WaterTemp
,ContData.env$myThresh.Gross.Suspect.Hi.WaterTemp
,ContData.env$myThresh.Gross.Suspect.Lo.WaterTemp
,ContData.env$myThresh.Spike.Hi.WaterTemp
,ContData.env$myThresh.Spike.Lo.WaterTemp
,ContData.env$myThresh.RoC.SD.period.WaterTemp
,ContData.env$myThresh.RoC.SD.number.WaterTemp
,ContData.env$myThresh.Flat.Hi.WaterTemp
,ContData.env$myThresh.Flat.Lo.WaterTemp
,ContData.env$myThresh.Flat.Tolerance.WaterTemp)
#
}##IF.myField.END
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/R/fun.Helper.R', echo=TRUE)
#     ?DateTimeClasses
#
# B.6. QC for each Data Type present ####
# sub routine adds QC Calcs, QC Test Flags, Assigns overall Flag, and removes QC Calc Fields
# cycle each data type (manually code)
#
# skip if not present
# 20170512, move message inside of IF so user doesn't see it.
#
# 6.01. WaterTemp
myField <- ContData.env$myName.WaterTemp
if(myField %in% myNames.DataFields.Present==TRUE){##IF.myField.START
#
myMsg.data <- "WaterTemp"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.WaterTemp
,ContData.env$myThresh.Gross.Fail.Lo.WaterTemp
,ContData.env$myThresh.Gross.Suspect.Hi.WaterTemp
,ContData.env$myThresh.Gross.Suspect.Lo.WaterTemp
,ContData.env$myThresh.Spike.Hi.WaterTemp
,ContData.env$myThresh.Spike.Lo.WaterTemp
,ContData.env$myThresh.RoC.SD.period.WaterTemp
,ContData.env$myThresh.RoC.SD.number.WaterTemp
,ContData.env$myThresh.Flat.Hi.WaterTemp
,ContData.env$myThresh.Flat.Lo.WaterTemp
,ContData.env$myThresh.Flat.Tolerance.WaterTemp)
#
}##IF.myField.END
#
# B.6.02. AirTemp
myField <- ContData.env$myName.AirTemp
if(myField %in% myNames.DataFields.Present==TRUE){##IF.myField.START
#
myMsg.data <- "AirTemp"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.AirTemp
,ContData.env$myThresh.Gross.Fail.Lo.AirTemp
,ContData.env$myThresh.Gross.Suspect.Hi.AirTemp
,ContData.env$myThresh.Gross.Suspect.Lo.AirTemp
,ContData.env$myThresh.Spike.Hi.AirTemp
,ContData.env$myThresh.Spike.Lo.AirTemp
,ContData.env$myThresh.RoC.SD.period.AirTemp
,ContData.env$myThresh.RoC.SD.number.AirTemp
,ContData.env$myThresh.Flat.Hi.AirTemp
,ContData.env$myThresh.Flat.Lo.AirTemp
,ContData.env$myThresh.Flat.Tolerance.AirTemp)
#
}##IF.myField.END
#
# B.6.03. WaterP
myField <- ContData.env$myName.WaterP
if(myField %in% myNames.DataFields.Present==TRUE){##IF.myField.START
#
myMsg.data <- "WaterP"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.WaterP
,ContData.env$myThresh.Gross.Fail.Lo.WaterP
,ContData.env$myThresh.Gross.Suspect.Hi.WaterP
,ContData.env$myThresh.Gross.Suspect.Lo.WaterP
,ContData.env$myThresh.Spike.Hi.WaterP
,ContData.env$myThresh.Spike.Lo.WaterP
,ContData.env$myThresh.RoC.SD.period.WaterP
,ContData.env$myThresh.RoC.SD.number.WaterP
,ContData.env$myThresh.Flat.Hi.WaterP
,ContData.env$myThresh.Flat.Lo.WaterP
,ContData.env$myThresh.Flat.Tolerance.WaterP)
#
}##IF.myField.END
#
# B.6.04. AirP
myField <- ContData.env$myName.AirBP
if(myField %in% myNames.DataFields.Present==TRUE){##IF.myField.START
#
myMsg.data <- "AirP"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.AirBP
,ContData.env$myThresh.Gross.Fail.Lo.AirBP
,ContData.env$myThresh.Gross.Suspect.Hi.AirBP
,ContData.env$myThresh.Gross.Suspect.Lo.AirBP
,ContData.env$myThresh.Spike.Hi.AirBP
,ContData.env$myThresh.Spike.Lo.AirBP
,ContData.env$myThresh.RoC.SD.period.AirBP
,ContData.env$myThresh.RoC.SD.number.AirBP
,ContData.env$myThresh.Flat.Hi.AirBP
,ContData.env$myThresh.Flat.Lo.AirBP
,ContData.env$myThresh.Flat.Tolerance.AirBP)
#
}##IF.myField.END
#
# B.6.05. SensorDepth
myField <- ContData.env$myName.SensorDepth
if(myField %in% myNames.DataFields.Present==TRUE){##IF.myField.START
#
myMsg.data <- "SensorDepth"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.SensorDepth
,ContData.env$myThresh.Gross.Fail.Lo.SensorDepth
,ContData.env$myThresh.Gross.Suspect.Hi.SensorDepth
,ContData.env$myThresh.Gross.Suspect.Lo.SensorDepth
,ContData.env$myThresh.Spike.Hi.SensorDepth
,ContData.env$myThresh.Spike.Lo.SensorDepth
,ContData.env$myThresh.RoC.SD.period.SensorDepth
,ContData.env$myThresh.RoC.SD.number.SensorDepth
,ContData.env$myThresh.Flat.Hi.SensorDepth
,ContData.env$myThresh.Flat.Lo.SensorDepth
,ContData.env$myThresh.Flat.Tolerance.SensorDepth)
#
}##IF.myField.END
#
# B.6.06. Discharge
myField <- ContData.env$myName.Discharge
if(myField %in% myNames.DataFields.Present==TRUE){##IF.myField.START
#
myMsg.data <- "Discharge"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.Discharge
,ContData.env$myThresh.Gross.Fail.Lo.Discharge
,ContData.env$myThresh.Gross.Suspect.Hi.Discharge
,ContData.env$myThresh.Gross.Suspect.Lo.Discharge
,ContData.env$myThresh.Spike.Hi.Discharge
,ContData.env$myThresh.Spike.Lo.Discharge
,ContData.env$myThresh.RoC.SD.period.Discharge
,ContData.env$myThresh.RoC.SD.number.Discharge
,ContData.env$myThresh.Flat.Hi.Discharge
,ContData.env$myThresh.Flat.Lo.Discharge
,ContData.env$myThresh.Flat.Tolerance.Discharge)
}##IF.myField.END
#
# B.6.07. Conductivity
myField <- ContData.env$myName.Cond
if(myField %in% myNames.DataFields.Present==TRUE){##IF.myField.START
#
myMsg.data <- "Cond"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.Cond
,ContData.env$myThresh.Gross.Fail.Lo.Cond
,ContData.env$myThresh.Gross.Suspect.Hi.Cond
,ContData.env$myThresh.Gross.Suspect.Lo.Cond
,ContData.env$myThresh.Spike.Hi.Cond
,ContData.env$myThresh.Spike.Lo.Cond
,ContData.env$myThresh.RoC.SD.period.Cond
,ContData.env$myThresh.RoC.SD.number.Cond
,ContData.env$myThresh.Flat.Hi.Cond
,ContData.env$myThresh.Flat.Lo.Cond
,ContData.env$myThresh.Flat.Tolerance.Cond)
}##IF.myField.END
#
# B.6.08. Dissolved Oxygen
myField <- ContData.env$myName.DO
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Restart R within RStudio:  Ctrl + Shift + F10
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
#
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB       <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE          <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data0_Original/ exists)
fn_1 <- "Charlies_Air_20170726_20170926.csv"
fn_2 <- "Charlies_AW_20170726_20170926.csv"
fn_3 <- "Charlies_Water_20170726_20170926.csv"
lapply(c(fn_1,fn_2,fn_3), function(x)
file.copy(system.file("extdata", x, package="ContDataQC")
, file.path(myDir.BASE, Selection.SUB[1], x)))
# Function Inputs
myFiles <- c("Charlies_Air_20170726_20170926.csv"
, "Charlies_AW_20170726_20170926.csv"
, "Charlies_Water_20170726_20170926.csv")
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# QC Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- myFiles
myDir.import <- file.path(".","Data1_RAW")
myDir.export <- file.path(".","Data2_QC")
myReport.format <- "html"
ContDataQC(myData.Operation, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export, fun.myFile=myFile
, fun.myReport.format=myReport.format)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[1],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile)
,file.path(getwd(),Selection.SUB[1],myFile))
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[1]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myReport.format <- "docx"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
warnings()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
