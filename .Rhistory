# ## add Season fields
data.import[,"Season"] <- NA
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0101") & as.numeric(data.import[,"MonthDay"])<as.numeric("0301")] <- "Winter"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0301") & as.numeric(data.import[,"MonthDay"])<as.numeric("0601")] <- "Spring"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0601") & as.numeric(data.import[,"MonthDay"])<as.numeric("0901")] <- "Summer"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0901") & as.numeric(data.import[,"MonthDay"])<as.numeric("1201")] <- "Fall"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("1201") & as.numeric(data.import[,"MonthDay"])<=as.numeric("1231")] <- "Winter"
data.import[,"YearSeason"] <- paste(data.import[,"Year"],data.import[,"Season"],sep="")
# rectify December as part of winter of year + 1
mySelection <- data.import[,"Month"]=="12"
if(sum(mySelection) != 0){##IF.sum.START
data.import[,"YearSeason"][mySelection] <- paste(as.numeric(data.import[,"Year"])+1,data.import[,"Season"],sep="")
}##IF.sum.END
#
#View(data.import)
#
# Color Blind Palatte
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# The palette with black:
#cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#
myColors <- cbPalette #rainbow(length(Col.Sites))
#
# Season Names
SeasonNames <- c("Fall", "Winter", "Spring","Summer")
#
#~~~~~~~~PLOT CODE~~~~~~~~~~~
CreatePlots <- function(...) {##FUNCTION.CreatePlots.START
# PLOT 1
for (i in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.i <- data.plot[,Col.Sites[i]]
# different first iteration
if (i==1) {##IF.j==1,START
# need ylim
myYlim.max <- 0
for (ii in 1:length(Col.Sites)) {
myYlim.max <- max(hist(data.plot[,Col.Sites[ii]],plot=FALSE)$density, myYlim.max)
}
myYlim <- c(0,myYlim.max)
#
hist(data.plot[,Col.Sites[i]], prob=TRUE, border="white"
,main=myMain, xlab=ParamName.xlab, ylab="Proportion = value"
,ylim=myYlim)
box()
}##IF.j==1.END
# plot lines
lines(density(data.i, na.rm=TRUE), col=myColors[i], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
#
# Plot 2
myLWD <- 1.5
for (j in 1:length(Col.Sites)){##FOR.i.START
if(j==1){##IF.i==1.START
plot(ecdf(data.plot[,Col.Sites[j]]), col=myColors[j], verticals=TRUE, lwd=myLWD, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main=myMain, xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.plot[,Col.Sites[j]]), col=myColors[j], verticals=TRUE, lwd=myLWD, do.p=FALSE, add=T)
}##IF.i==1.END
}##FOR.i.END
legend("bottomright",Col.Sites,fill=myColors)
}##FUNCTION.CreatePlots.END
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# 2 plots per page
# par(mfrow=c(2,1))
#
# ALL
myMain <- "All Data"
data.plot <- data.import
CreatePlots()
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# Load Data
myDF <- data_CompSiteCDF
# X Label
myXlab <- "Temperature, Water (deg C)"
ParamName.xlab <- myXlab
# get code from function
data.import <- myDF
# Site Names (Columns)
Col.Sites <- names(data.import)[!(names(data.import) %in% "Date")]
#
# Add columns for time periods
# add Year, Month, Season, YearSeason (names are in config.R)
# assume Date is POSIXct
#
# add time period fields
data.import[,"Year"]   <- format(as.Date(data.import[,"Date"]),format="%Y")
data.import[,"Month"]   <- format(as.Date(data.import[,"Date"]),format="%m")
data.import[,"YearMonth"] <- format(as.Date(data.import[,"Date"]),format="%Y%m")
data.import[,"MonthDay"] <- format(as.Date(data.import[,"Date"]),format="%m%d")
# Remove bad date records
data.import <- data.import[!is.na(data.import[,"Year"]),]
# ## add Season fields
data.import[,"Season"] <- NA
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0101") & as.numeric(data.import[,"MonthDay"])<as.numeric("0301")] <- "Winter"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0301") & as.numeric(data.import[,"MonthDay"])<as.numeric("0601")] <- "Spring"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0601") & as.numeric(data.import[,"MonthDay"])<as.numeric("0901")] <- "Summer"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0901") & as.numeric(data.import[,"MonthDay"])<as.numeric("1201")] <- "Fall"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("1201") & as.numeric(data.import[,"MonthDay"])<=as.numeric("1231")] <- "Winter"
data.import[,"YearSeason"] <- paste(data.import[,"Year"],data.import[,"Season"],sep="")
# rectify December as part of winter of year + 1
mySelection <- data.import[,"Month"]=="12"
if(sum(mySelection) != 0){##IF.sum.START
data.import[,"YearSeason"][mySelection] <- paste(as.numeric(data.import[,"Year"])+1,data.import[,"Season"],sep="")
}##IF.sum.END
#
#View(data.import)
#
# Color Blind Palatte
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# The palette with black:
#cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#
myColors <- cbPalette #rainbow(length(Col.Sites))
#
# Season Names
SeasonNames <- c("Fall", "Winter", "Spring","Summer")
#
#~~~~~~~~PLOT CODE~~~~~~~~~~~
CreatePlots <- function(...) {##FUNCTION.CreatePlots.START
# PLOT 1
for (i in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.i <- data.plot[,Col.Sites[i]]
# different first iteration
if (i==1) {##IF.j==1,START
# need ylim
myYlim.max <- 0
for (ii in 1:length(Col.Sites)) {
myYlim.max <- max(hist(data.plot[,Col.Sites[ii]],plot=FALSE)$density, myYlim.max)
}
myYlim <- c(0,myYlim.max)
#
hist(data.plot[,Col.Sites[i]], prob=TRUE, border="white"
,main=myMain, xlab=ParamName.xlab, ylab="Proportion = value"
,ylim=myYlim)
box()
}##IF.j==1.END
# plot lines
lines(density(data.i, na.rm=TRUE), col=myColors[i], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
#
# Plot 2
myLWD <- 1.5
for (j in 1:length(Col.Sites)){##FOR.i.START
if(j==1){##IF.i==1.START
plot(ecdf(data.plot[,Col.Sites[j]]), col=myColors[j], verticals=TRUE, lwd=myLWD, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main=myMain, xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.plot[,Col.Sites[j]]), col=myColors[j], verticals=TRUE, lwd=myLWD, do.p=FALSE, add=T)
}##IF.i==1.END
}##FOR.i.END
legend("bottomright",Col.Sites,fill=myColors)
}##FUNCTION.CreatePlots.END
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# 2 plots per page
# par(mfrow=c(2,1))
#
# ALL
myMain <- "All Data"
data.plot <- data.import
CreatePlots()
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# Load Data
myDF <- data_CompSiteCDF
# X Label
myXlab <- "Temperature, Water (deg C)"
ParamName.xlab <- myXlab
# get code from function
data.import <- myDF
# Site Names (Columns)
Col.Sites <- names(data.import)[!(names(data.import) %in% "Date")]
#
# Add columns for time periods
# add Year, Month, Season, YearSeason (names are in config.R)
# assume Date is POSIXct
#
# add time period fields
data.import[,"Year"]   <- format(as.Date(data.import[,"Date"]),format="%Y")
data.import[,"Month"]   <- format(as.Date(data.import[,"Date"]),format="%m")
data.import[,"YearMonth"] <- format(as.Date(data.import[,"Date"]),format="%Y%m")
data.import[,"MonthDay"] <- format(as.Date(data.import[,"Date"]),format="%m%d")
# Remove bad date records
data.import <- data.import[!is.na(data.import[,"Year"]),]
# ## add Season fields
data.import[,"Season"] <- NA
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0101") & as.numeric(data.import[,"MonthDay"])<as.numeric("0301")] <- "Winter"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0301") & as.numeric(data.import[,"MonthDay"])<as.numeric("0601")] <- "Spring"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0601") & as.numeric(data.import[,"MonthDay"])<as.numeric("0901")] <- "Summer"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0901") & as.numeric(data.import[,"MonthDay"])<as.numeric("1201")] <- "Fall"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("1201") & as.numeric(data.import[,"MonthDay"])<=as.numeric("1231")] <- "Winter"
data.import[,"YearSeason"] <- paste(data.import[,"Year"],data.import[,"Season"],sep="")
# rectify December as part of winter of year + 1
mySelection <- data.import[,"Month"]=="12"
if(sum(mySelection) != 0){##IF.sum.START
data.import[,"YearSeason"][mySelection] <- paste(as.numeric(data.import[,"Year"])+1,data.import[,"Season"],sep="")
}##IF.sum.END
#
#View(data.import)
#
# Color Blind Palatte
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# The palette with black:
#cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#
myColors <- cbPalette #rainbow(length(Col.Sites))
#
# Season Names
SeasonNames <- c("Fall", "Winter", "Spring","Summer")
#
#~~~~~~~~PLOT CODE~~~~~~~~~~~
CreatePlots <- function(...) {##FUNCTION.CreatePlots.START
# PLOT 1
for (i in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.i <- data.plot[,Col.Sites[i]]
# different first iteration
if (i==1) {##IF.j==1,START
# need ylim
myYlim.max <- 0
for (ii in 1:length(Col.Sites)) {
myYlim.max <- max(hist(data.plot[,Col.Sites[ii]],plot=FALSE)$density, myYlim.max)
}
myYlim <- c(0,myYlim.max)
#
hist(data.plot[,Col.Sites[i]], prob=TRUE, border="white"
,main=myMain, xlab=ParamName.xlab, ylab="Proportion = value"
,ylim=myYlim)
box()
}##IF.j==1.END
# plot lines
lines(density(data.i, na.rm=TRUE), col=myColors[i], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
#
# Plot 2
myLWD <- 1.5
for (j in 1:length(Col.Sites)){##FOR.i.START
if(j==1){##IF.i==1.START
plot(ecdf(data.plot[,Col.Sites[j]]), col=myColors[j], verticals=TRUE, lwd=myLWD, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main=myMain, xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.plot[,Col.Sites[j]]), col=myColors[j], verticals=TRUE, lwd=myLWD, do.p=FALSE, add=T)
}##IF.i==1.END
}##FOR.i.END
legend("bottomright",Col.Sites,fill=myColors)
}##FUNCTION.CreatePlots.END
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# 2 plots per page
par(mfrow=c(1,2))
#
# ALL
myMain <- "All Data"
data.plot <- data.import
CreatePlots()
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
?ContDataQC
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ContDataQC)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# QC Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
#myFile <- "test2_AW_20130426_20130725.csv"
myFile <- c("test2_AW_20130426_20130725.csv", "test2_AW_20130725_20131015.csv", "test2_AW_20140901_20140930.csv")
myDir.import <- file.path(".","Data1_RAW")
myDir.export <- file.path(".","Data2_QC")
ContDataQC(myData.Operation, fun.myDir.import=myDir.import, fun.myDir.export=myDir.export, fun.myFile=myFile)
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myFile <- c("QC_test2_AW_20130426_20130725.csv", "QC_test2_AW_20130725_20131015.csv", "QC_test2_AW_20140901_20140930.csv")
myDir.import <- file.path(".","Data2_QC")
myDir.export <- file.path(".","Data3_Aggregated")
ContDataQC(myData.Operation, fun.myDir.import=myDir.import, fun.myDir.export=myDir.export, fun.myFile=myFile)
myFile
# QC Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
#myFile <- "test2_AW_20130426_20130725.csv"
myFile <- c("test2_AW_20130426_20130725.csv", "test2_AW_20130725_20131015.csv", "test2_AW_20140901_20140930.csv")
myDir.import <- file.path(".","Data1_RAW")
myDir.export <- file.path(".","Data2_QC")
myFile
list.files(file.path(myDir.import))
list.files(file.path(myDir.import)) %in% myFile
myFile %in% list.files(file.path(myDir.import))
library(ContDataQC)
# QC Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
#myFile <- "test2_AW_20130426_20130725.csv"
myFile <- c("test2_AW_20130426_20130725.csv", "test2_AW_20130725_20131015.csv", "test2_AW_20140901_20140930.csv")
myDir.import <- file.path(".","Data1_RAW")
myDir.export <- file.path(".","Data2_QC")
ContDataQC(myData.Operation, fun.myDir.import=myDir.import, fun.myDir.export=myDir.export, fun.myFile=myFile)
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myFile <- c("QC_test2_AW_20130426_20130725.csv", "QC_test2_AW_20130725_20131015.csv", "QC_test2_AW_20140901_20140930.csv")
myDir.import <- file.path(".","Data2_QC")
myDir.export <- file.path(".","Data3_Aggregated")
ContDataQC(myData.Operation, fun.myDir.import=myDir.import, fun.myDir.export=myDir.export, fun.myFile=myFile)
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
library(ContDataQC)
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[1]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# QC Raw Data (offset collection times for air and water sensors)
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test4"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2016-04-28"
myData.DateRange.End    <- "2016-07-26"
myDir.import <- file.path(myDir.BASE,Selection.SUB[1]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Summary Stats
myData.Operation <- "SummaryStats" #Selection.Operation[4]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
myDir.export <- file.path(myDir.BASE,Selection.SUB[4]) #"Data4_Stats"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# QC Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
#myFile <- "test2_AW_20130426_20130725.csv"
myFile <- c("test2_AW_20130426_20130725.csv", "test2_AW_20130725_20131015.csv", "test2_AW_20140901_20140930.csv")
myDir.import <- file.path(".","Data1_RAW")
myDir.export <- file.path(".","Data2_QC")
ContDataQC(myData.Operation, fun.myDir.import=myDir.import, fun.myDir.export=myDir.export, fun.myFile=myFile)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
ContDataQC()
library(ContDataQC)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
