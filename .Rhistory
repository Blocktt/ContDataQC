}
cat("**Period (N, Units): **",paste0(mySets),collapse="\n\n",sep="")
cat(paste("**Date Range: **",myDate.Start," to ",myDate.End,sep=""),collapse="\n\n")
cat("**Parameter: **",fun.myParam.Name,collapse="\n\n",sep="")
cat("**Threshold: **",fun.myThreshold,collapse="\n\n",sep="")
cat("**Filename, Input: **",fun.myFile,"\n\n",sep="")
#cat("**Filename, Output: **",paste0(myFile.Export.part,myFile.Export.ext),sep="")
myReportDate <- format(Sys.Date(),fun.myDate.Format)
# myReportDate <- format(Sys.Date(),fd01)
cat(paste("**Report Date:** ",myReportDate,"\n\n",sep=""))
cat("**Benchmark Date: ** ",fun.myDate,collapse="\n\n",sep="")
mySets <- for (a in 1:length(fun.myPeriod.N)) {
if (a==1) {
x <- paste0(fun.myPeriod.N[a], fun.myPeriod.Units[a])
} else {
x <- paste0(x,", ",fun.myPeriod.N[a], fun.myPeriod.Units[a])
}
}
cat("**Period (N, Units): ** ",paste0(mySets),collapse="\n\n",sep="")
cat(paste("**Date Range: **",myDate.Start," to ",myDate.End,sep=""),collapse="\n\n")
cat("**Parameter: ** ",fun.myParam.Name,collapse="\n\n",sep="")
cat("**Threshold: ** ",fun.myThreshold,collapse="\n\n",sep="")
cat("**Filename, Input: ** ",fun.myFile,"\n\n",sep="")
#cat("**Filename, Output: ** ",paste0(myFile.Export.part,myFile.Export.ext),sep="")
fun.myPeriod.N
mySets
for (a in 1:length(fun.myPeriod.N)) {
if (a==1) {
x <- paste0(fun.myPeriod.N[a], fun.myPeriod.Units[a])
} else {
x <- paste0(x,", ",fun.myPeriod.N[a], fun.myPeriod.Units[a])
}
}
mySets <- for (a in 1:length(fun.myPeriod.N)) {
if (a==1) {
x <- paste0(fun.myPeriod.N[a], fun.myPeriod.Units[a])
} else {
x <- paste0(x,", ",fun.myPeriod.N[a], fun.myPeriod.Units[a])
}
return(x)
}
mySets
for (k in 1:numPeriods){##FOR.j.START
# subset
df.plot <- df.summary[df.summary[,myDate.Name]>=as.Date(myDate.Start[k]) & df.summary[,myDate.Name]<=as.Date(myDate.End),]
# create file name
plot(df.plot)
if(!is.na(fun.myThreshold)){
abline(h=fun.myThreshold)
}
}##FOR.j.END
for (k in 1:numPeriods){##FOR.j.START
# subset
df.plot <- df.summary[df.summary[,myDate.Name]>=as.Date(myDate.Start[k]) & df.summary[,myDate.Name]<=as.Date(myDate.End),]
# create file name
plot(df.plot[,1:2])
if(!is.na(fun.myThreshold)){
abline(h=fun.myThreshold)
}
}##FOR.j.END
for (k in 1:numPeriods){##FOR.j.START
# subset
df.plot <- df.summary[df.summary[,myDate.Name]>=as.Date(myDate.Start[k]) & df.summary[,myDate.Name]<=as.Date(myDate.End),]
# create file name
plot(df.plot[,1:2],main=paste0(fun.myPeriod.N[k],fun.myPeriod.Units[k]))
if(!is.na(fun.myThreshold)){
abline(h=fun.myThreshold)
}
}##FOR.j.END
for (k in 1:numPeriods){##FOR.j.START
# subset
df.plot <- df.summary[df.summary[,myDate.Name]>=as.Date(myDate.Start[k]) & df.summary[,myDate.Name]<=as.Date(myDate.End),]
# create file name
plot(df.plot[,1:2],main=paste0(fun.myDate," ("fun.myPeriod.N[k],fun.myPeriod.Units[k],")"))
for (k in 1:numPeriods){##FOR.j.START
# subset
df.plot <- df.summary[df.summary[,myDate.Name]>=as.Date(myDate.Start[k]) & df.summary[,myDate.Name]<=as.Date(myDate.End),]
# create file name
plot(df.plot[,1:2],main=paste0(fun.myDate," (",fun.myPeriod.N[k],fun.myPeriod.Units[k],")"))
if(!is.na(fun.myThreshold)){
abline(h=fun.myThreshold)
}
}##FOR.j.END
for (k in 1:numPeriods){##FOR.j.START
# subset
df.plot <- df.summary[df.summary[,myDate.Name]>=as.Date(myDate.Start[k]) & df.summary[,myDate.Name]<=as.Date(myDate.End),]
# create file name
plot(df.plot[,1:2],main=paste0(fun.myDate," (",fun.myPeriod.N[k],fun.myPeriod.Units[k],")"),subtitle="x")
if(!is.na(fun.myThreshold)){
abline(h=fun.myThreshold)
}
}##FOR.j.END
for (k in 1:numPeriods){##FOR.j.START
# subset
df.plot <- df.summary[df.summary[,myDate.Name]>=as.Date(myDate.Start[k]) & df.summary[,myDate.Name]<=as.Date(myDate.End),]
# create file name
plot(df.plot[,1:2],main=paste0(fun.myDate," (",fun.myPeriod.N[k],fun.myPeriod.Units[k],")"),sub="x")
if(!is.na(fun.myThreshold)){
abline(h=fun.myThreshold)
}
}##FOR.j.END
for (k in 1:numPeriods){##FOR.j.START
# subset
df.plot <- df.summary[df.summary[,myDate.Name]>=as.Date(myDate.Start[k]) & df.summary[,myDate.Name]<=as.Date(myDate.End),]
# create file name
plot(df.plot[,1:2],main=paste0(fun.myDate," /n (",fun.myPeriod.N[k],fun.myPeriod.Units[k],")"))
if(!is.na(fun.myThreshold)){
abline(h=fun.myThreshold)
}
}##FOR.j.END
for (k in 1:numPeriods){##FOR.j.START
# subset
df.plot <- df.summary[df.summary[,myDate.Name]>=as.Date(myDate.Start[k]) & df.summary[,myDate.Name]<=as.Date(myDate.End),]
# create file name
plot(df.plot[,1:2],main=paste0(fun.myDate," \n(",fun.myPeriod.N[k],fun.myPeriod.Units[k],")"))
if(!is.na(fun.myThreshold)){
abline(h=fun.myThreshold)
}
}##FOR.j.END
rmarkdown::render(strFile.RMD, output_file=strFile.out, output_dir=fun.myDir.export, quiet=TRUE)
strFile.out <- paste0(myFile.Export.base,"_PeriodStats_",strFile.out.ext)
rmarkdown::render(strFile.RMD, output_file=strFile.out, output_dir=fun.myDir.export, quiet=TRUE)
strFile.out <- paste0(myFile.Export.base,"_PeriodStats_",fun.myDate,"_",myDate,"_",myTime,strFile.out.ext)
rmarkdown::render(strFile.RMD, output_file=strFile.out, output_dir=fun.myDir.export, quiet=TRUE)
mySets <- function(){
for (a in 1:numPeriods) {
if (a==1) {
x <- paste0(fun.myPeriod.N[a], fun.myPeriod.Units[a])
} else {
x <- paste0(x,", ",fun.myPeriod.N[a], fun.myPeriod.Units[a])
}
}
return(x)
}
mySets
mySets <- function(...){
for (a in 1:numPeriods) {
if (a==1) {
x <- paste0(fun.myPeriod.N[a], fun.myPeriod.Units[a])
} else {
x <- paste0(x,", ",fun.myPeriod.N[a], fun.myPeriod.Units[a])
}
}
return(x)
}
mySets
mySets()
myReportDate <- format(Sys.Date(),fun.myDate.Format)
# myReportDate <- format(Sys.Date(),fd01)
cat(paste("**Report Date:** ",myReportDate,"\n\n",sep=""))
cat("**Benchmark Date: ** ",fun.myDate,collapse="\n\n",sep="")
mySets <- function(...){
for (a in 1:numPeriods) {
if (a==1) {
x <- paste0(fun.myPeriod.N[a], fun.myPeriod.Units[a])
} else {
x <- paste0(x,", ",fun.myPeriod.N[a], fun.myPeriod.Units[a])
}
}
return(x)
}
cat("**Period (N, Units): ** ",paste0(mySets()),collapse="\n\n",sep="")
#cat(paste("**Date Range: **",myDate.Start," to ",myDate.End,sep=""),collapse="\n\n")
cat("**Parameter: ** ",fun.myParam.Name,collapse="\n\n",sep="")
cat("**Threshold: ** ",fun.myThreshold,collapse="\n\n",sep="")
cat("**Filename, Input: ** ",fun.myFile,"\n\n",sep="")
#cat("**Filename, Output: ** ",paste0(myFile.Export.part,myFile.Export.ext),sep="")
myReportDate <- format(Sys.Date(),fun.myDate.Format)
# myReportDate <- format(Sys.Date(),fd01)
cat(paste("**Report Date:** ",myReportDate,"\n\n",sep=""))
cat("**Benchmark Date: ** ",fun.myDate,collapse="\n\n",sep="")
mySets <- function(...){
for (a in 1:numPeriods) {
if (a==1) {
x <- paste0(fun.myPeriod.N[a], fun.myPeriod.Units[a])
} else {
x <- paste0(x,", ",fun.myPeriod.N[a], fun.myPeriod.Units[a])
}
}
return(x)
}
cat("**Period (N, Units): ** ",paste0(mySets()),collapse="\n\n",sep="")
cat(paste("**Period Start Date: **",myDate.Start[1:numPeriods],sep=""),collapse="\n\n")
cat("**Parameter: ** ",fun.myParam.Name,collapse="\n\n",sep="")
cat("**Threshold: ** ",fun.myThreshold,collapse="\n\n",sep="")
cat("**Filename, Input: ** ",fun.myFile,"\n\n",sep="")
#cat("**Filename, Output: ** ",paste0(myFile.Export.part,myFile.Export.ext),sep="")
myDate.Start[1:numPeriods]
c(myDate.Start[1:numPeriods])
myReportDate <- format(Sys.Date(),fun.myDate.Format)
# myReportDate <- format(Sys.Date(),fd01)
cat(paste("**Report Date:** ",myReportDate,"\n\n",sep=""))
cat("**Benchmark Date: ** ",fun.myDate,collapse="\n\n",sep="")
mySets <- function(...){
for (a in 1:numPeriods) {
if (a==1) {
x <- paste0(fun.myPeriod.N[a], fun.myPeriod.Units[a])
} else {
x <- paste0(x,", ",fun.myPeriod.N[a], fun.myPeriod.Units[a])
}
}
return(x)
}
cat("**Period (N, Units): ** ",paste0(mySets()),collapse="\n\n",sep="")
cat(paste("**Period Start Date: **",c(as.Date(myDate.Start[1:numPeriods])),sep=""),collapse="\n\n")
cat("**Parameter: ** ",fun.myParam.Name,collapse="\n\n",sep="")
cat("**Threshold: ** ",fun.myThreshold,collapse="\n\n",sep="")
cat("**Filename, Input: ** ",fun.myFile,"\n\n",sep="")
#cat("**Filename, Output: ** ",paste0(myFile.Export.part,myFile.Export.ext),sep="")
paste(as.Date(myDate.Start[1:numPeriods]),collapse="")
paste(as.Date(myDate.Start[1:numPeriods]),collapse=", ")
myReportDate <- format(Sys.Date(),fun.myDate.Format)
# myReportDate <- format(Sys.Date(),fd01)
cat(paste("**Report Date:** ",myReportDate,"\n\n",sep=""))
cat("**Benchmark Date: ** ",fun.myDate,collapse="\n\n",sep="")
mySets <- function(...){
for (a in 1:numPeriods) {
if (a==1) {
x <- paste0(fun.myPeriod.N[a], fun.myPeriod.Units[a])
} else {
x <- paste0(x,", ",fun.myPeriod.N[a], fun.myPeriod.Units[a])
}
}
return(x)
}
cat("**Period (N, Units): ** ",paste0(mySets()),collapse="\n\n",sep="")
cat(paste("**Period Start Date: **",paste(as.Date(myDate.Start[1:numPeriods]),collapse=", "),sep=""),collapse="\n\n")
cat("**Parameter: ** ",fun.myParam.Name,collapse="\n\n",sep="")
cat("**Threshold: ** ",fun.myThreshold,collapse="\n\n",sep="")
cat("**Filename, Input: ** ",fun.myFile,"\n\n",sep="")
#cat("**Filename, Output: ** ",paste0(myFile.Export.part,myFile.Export.ext),sep="")
paste(fun.myPeriod.N[1:numPeriods], fun.myPeriod.Units[1:numPeriods], collapse=", ")
paste(fun.myPeriod.N[1:numPeriods],fun.myPeriod.Units[1:numPeriods], collapse=", ")
myReportDate <- format(Sys.Date(),fun.myDate.Format)
# myReportDate <- format(Sys.Date(),fd01)
cat(paste("**Report Date:** ",myReportDate,"\n\n",sep=""))
cat("**Benchmark Date: ** ",fun.myDate,collapse="\n\n",sep="")
mySets <- function(...){
for (a in 1:numPeriods) {
if (a==1) {
x <- paste0(fun.myPeriod.N[a], fun.myPeriod.Units[a])
} else {
x <- paste0(x,", ",fun.myPeriod.N[a], fun.myPeriod.Units[a])
}
}
return(x)
}
paste(fun.myPeriod.N[1:numPeriods],fun.myPeriod.Units[1:numPeriods], collapse=", ")
cat("**Period (N, Units): ** ",paste(fun.myPeriod.N[1:numPeriods],fun.myPeriod.Units[1:numPeriods], collapse=", "),collapse="\n\n",sep="")
cat(paste("**Period Start Date: **",paste(as.Date(myDate.Start[1:numPeriods]),collapse=", "),sep=""),collapse="\n\n")
cat("**Parameter: ** ",fun.myParam.Name,collapse="\n\n",sep="")
cat("**Threshold: ** ",fun.myThreshold,collapse="\n\n",sep="")
cat("**Filename, Input: ** ",fun.myFile,"\n\n",sep="")
#cat("**Filename, Output: ** ",paste0(myFile.Export.part,myFile.Export.ext),sep="")
myReportDate <- format(Sys.Date(),fun.myDate.Format)
# myReportDate <- format(Sys.Date(),fd01)
cat(paste("**Report Date:** ",myReportDate,"\n\n",sep=""))
cat("**Benchmark Date: ** ",fun.myDate,collapse="\n\n",sep="")
cat("**Period (N, Units): ** ",paste(fun.myPeriod.N[1:numPeriods],fun.myPeriod.Units[1:numPeriods], collapse=", "),collapse="\n\n",sep="")
cat(paste("**Period Start Date: **",paste(as.Date(myDate.Start[1:numPeriods]),collapse=", "),sep=""),collapse="\n\n")
cat("**Parameter: ** ",fun.myParam.Name,collapse="\n\n",sep="")
cat("**Threshold: ** ",fun.myThreshold,collapse="\n\n",sep="")
cat("**Filename, Input: ** ",fun.myFile,"\n\n",sep="")
#cat("**Filename, Output: ** ",paste0(myFile.Export.part,myFile.Export.ext),sep="")
rmarkdown::render(strFile.RMD, output_file=strFile.out, output_dir=fun.myDir.export, quiet=TRUE)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ContDataQC)
??ContDataQC
?PeriodMean
?PeriodStats
# Save example file
df.x <- DATA_period_test2_Aw_20130101_20141231
write.csv(df.x,"DATA_period_test2_Aw_20130101_20141231.csv")
# Save example file
df.x <- DATA_period_test2_Aw_20130101_20141231
write.csv(df.x,"DATA_period_test2_Aw_20130101_20141231.csv")
# function inputs
myDate <- "2013-09-30"
myDate.Format <- "%Y-%m-%d"
myPeriod.N <- c(30, 60, 90, 120, 1)
myPeriod.Units <- c("d", "d", "d", "d", "y")
myFile <- "DATA_period_test2_Aw_20130101_20141231.csv"
myDir.import <- getwd()
myDir.export <- getwd()
myParam.Name <- "Water.Temp.C"
myDateTime.Name <- "Date.Time"
myDateTime.Format <- "%Y-%m-%d %H:%M:%S"
myThreshold <- 20
myConfig <- ""
# Run Function
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig)
cat("Task complete.  CSV and DOCX files saved to directory:\n\n")
cat(fun.myDir.export)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Restart R within RStudio:  Ctrl + Shift + F10
library(ContDataQC)
??ContDataQC
?PeriodStats
# Save example file
df.x <- DATA_period_test2_Aw_20130101_20141231
write.csv(df.x,"DATA_period_test2_Aw_20130101_20141231.csv")
# function inputs
myDate <- "2013-09-30"
myDate.Format <- "%Y-%m-%d"
myPeriod.N <- c(30, 60, 90, 120, 1)
myPeriod.Units <- c("d", "d", "d", "d", "y")
myFile <- "DATA_period_test2_Aw_20130101_20141231.csv"
myDir.import <- getwd()
myDir.export <- getwd()
myParam.Name <- "Water.Temp.C"
myDateTime.Name <- "Date.Time"
myDateTime.Format <- "%Y-%m-%d %H:%M:%S"
myThreshold <- 20
myConfig <- ""
# Run Function
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Restart R within RStudio:  Ctrl + Shift + F10
library(ContDataQC)
??ContDataQC
?PeriodStats
# Save example file
df.x <- DATA_period_test2_Aw_20130101_20141231
write.csv(df.x,"DATA_period_test2_Aw_20130101_20141231.csv")
# function inputs
myDate <- "2013-09-30"
myDate.Format <- "%Y-%m-%d"
myPeriod.N <- c(30, 60, 90, 120, 1)
myPeriod.Units <- c("d", "d", "d", "d", "y")
myFile <- "DATA_period_test2_Aw_20130101_20141231.csv"
myDir.import <- getwd()
myDir.export <- getwd()
myParam.Name <- "Water.Temp.C"
myDateTime.Name <- "Date.Time"
myDateTime.Format <- "%Y-%m-%d %H:%M:%S"
myThreshold <- 20
myConfig <- ""
# Run Function
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig)
str(df.x)
library(ContDataQC)
myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "01187300" # Hubbard River near West Hartland, CT
myData.Type         <- "Gage"
myData.DateRange.Start  <- "2015-01-01"
myData.DateRange.End    <- "2016-12-31"
myDir.import <- ""
myDir.export <- ""# file.path(myDir.BASE,Selection.SUB[1])
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
