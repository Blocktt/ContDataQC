# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
??ContDataQC
library(ContDataQC)
?ContDataQC
# Examples of each operation
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[1],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile),file.path(getwd(),Selection.SUB[1],myFile))
# Get Gage Data
myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "01187300" # Hubbard River near West Hartland, CT
myData.Type         <- Selection.Type[4] #"Gage"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- ""
myDir.export <- file.path(myDir.BASE,Selection.SUB[1])
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Get Gage Data (central time zone)
myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "07032000" # Mississippi River at Memphis, TN
myData.Type         <- Selection.Type[4] #"Gage"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- ""
myDir.export <- file.path(myDir.BASE,Selection.SUB[1])
myConfig            <- file.path(getwd(),Selection.SUB[1],"config.TZ.central.R") # include path if not in working directory
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export, myConfig)
library(devtools)
install_github("USGS-R/dataRetrieval")
install.packages("dataRetrieval",repos="https://owi.usgs.gov/R")
install.packages("dataRetrieval", repos = "https://owi.usgs.gov/R")
library(ContDataQC)
install.packages("dplyr")
library(ContDataQC)
# Get Gage Data
myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "01187300" # Hubbard River near West Hartland, CT
myData.Type         <- Selection.Type[4] #"Gage"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- ""
myDir.export <- file.path(myDir.BASE,Selection.SUB[1])
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Get Gage Data
myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "01187300" # Hubbard River near West Hartland, CT
myData.Type         <- "Gage" #Selection.Type[4]
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- ""
myDir.export <- file.path(myDir.BASE,Selection.SUB[1])
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
# generate Vignette
devtools::build_vignettes()
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
??ContDataQC
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ContDataQC)
library(StreamThermal)
?ST.freq
?T_frequency
library(dataRetrieval)
ExUSGSStreamTemp<-readNWISdv("01382310","00010","2011-01-01","2011-12-31",c("00001","00002","00003"))
sitedata<-subset(ExUSGSStreamTemp, select=c("site_no","Date","X_00010_00001","X_00010_00002","X_00010_00003"))
names(sitedata)<-c("siteID","Date","MaxT","MinT","MeanT")
T_frequency(sitedata)
?Export.IHA
?T_frequency
View(sitedata)
?ContDataQC
# Examples of each operation
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[1],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile),file.path(getwd(),Selection.SUB[1],myFile))
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[1]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Summary Stats
myData.Operation <- "SummaryStats" #Selection.Operation[4]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
myDir.export <- file.path(myDir.BASE,Selection.SUB[4]) #"Data4_Stats"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
myFile <- "STATS_test2_Aw_20130101_20141231_Water.Temp.C.csv"
myDir <- "Data4_Stats"
myData <- read.csv(file.path(getwd(),myDir,myFile),row.names=FALSE)
myData <- read.csv(file.path(getwd(),myDir,myFile))
View(myData)
names(myData)
dim(myData)
df.ST <- myData[myData[,"TimeFrame"]=="day",]
dim(df.ST)
View(df.ST)
Col.Keep <- c("SiteID", "TimeValue", "max", "min", "mean")
df.ST <- myData[myData[,"TimeFrame"]=="day",Col.Keep]
View(df.ST)
names(df.ST)
Names.ST <- c("SiteID", "Date", "MaxT", "MinT", "MeanT")
names(df.ST) <- Names.ST
sitedata <- myData[myData[,"TimeFrame"]=="day",Col.Keep]
Names.ST <- c("SiteID", "Date", "MaxT", "MinT", "MeanT")
names(sitedata) <- Names.ST
View(sitedata)
ST.freq <- T_frequency(sitedata)
ST.mag  <- T_magnitude(sitedata)
ST.roc  <- T_rateofchange(sitedata)
ST.tim  <- T_timing(sitedata)
ST.var  <- T_variability(sitedata)
str(sitedata)
?T_frequency
ExUSGSStreamTemp<-readNWISdv("01382310","00010","2011-01-01","2011-12-31",c("00001","00002","00003"))
sitedata<-subset(ExUSGSStreamTemp, select=c("site_no","Date","X_00010_00001","X_00010_00002","X_00010_00003"))
names(sitedata)<-c("siteID","Date","MaxT","MinT","MeanT")
str(sitedata)
myData <- read.csv(file.path(getwd(),myDir,myFile), stringAsFactors=FALSE)
?read.csv
myData <- read.csv(file.path(getwd(),myDir,myFile), stringsAsFactors=FALSE)
str(myData)
Col.Keep <- c("SiteID", "TimeValue", "max", "min", "mean")
x <- myData[myData[,"TimeFrame"]=="day",Col.Keep]
str(x)
Names.ST <- c("SiteID", "Date", "MaxT", "MinT", "MeanT")
names(x) <- Names.ST
x[,"Date"] <- as.date(x[,"Date"])
x[,"Date"] <- as.Date(x[,"Date"])
str(x)
str(sitedata)
T_frequency(sitedata)
a<-T_frequency(sitedata)
View(a)
T_magnitude(sitedata)
T_rateofchange(sitedata)
T_timing(sitedata)
T_variability(sitedata)
ExUSGSStreamTemp<-readNWISdv("01382310","00010","2011-01-01","2011-12-31",c("00001","00002","00003"))
sitedata<-subset(ExUSGSStreamTemp, select=c("site_no","Date","X_00010_00001","X_00010_00002","X_00010_00003"))
names(sitedata)<-c("siteID","Date","MaxT","MinT","MeanT")
(ST.freq <- T_frequency(sitedata))
(ST.mag  <- T_magnitude(sitedata))
(ST.roc  <- T_rateofchange(sitedata))
(ST.tim  <- T_timing(sitedata))
(ST.var  <- T_variability(sitedata))
?T_variability
ExUSGSStreamTemp<-readNWISdv("01382310","00010","2011-01-01","2011-12-31",c("00001","00002","00003"))
sitedata<-subset(ExUSGSStreamTemp, select=c("site_no","Date","X_00010_00001","X_00010_00002","X_00010_00003"))
names(sitedata)<-c("siteID","Date","MaxT","MinT","MeanT")
T_variability(sitedata)
?ContDataQC
?T_frequency
ExUSGSStreamTemp<-readNWISdv("01187300","00010","2011-01-01","2011-12-31",c("00001","00002","00003"))
ExUSGSStreamTemp<-readNWISdv("01187300","00010","2013-01-01","2014-12-31",c("00001","00002","00003"))
sitedata<-subset(ExUSGSStreamTemp, select=c("site_no","Date","X_00010_00001","X_00010_00002","X_00010_00003"))
names(sitedata)<-c("siteID","Date","MaxT","MinT","MeanT")
T_frequency(sitedata)
ExUSGSStreamTemp<-readNWISdv("01187300","00010","2011-01-01","2011-12-31",c("00001","00002","00003"))
sitedata<-subset(ExUSGSStreamTemp, select=c("site_no","Date","X_00010_00001","X_00010_00002","X_00010_00003"))
myDF <- DATA_period_test2_Aw_20130101_20141231
dim(myDF)
View(myDF)
myDF <- DATA_period_test2_Aw_20130101_20141231
# parameters to use
Col.Keep <- c("SiteID", "Date", "Water.Temp.C" )
# Col.Keep <- c(ContData.env$myName.SiteID
#               , ContData.env$myName.Date
#               , ContData.env$myName.WaterTemp
#               )
myDF.small <- myDF[,Col.Keep]
head(myDF.small)
?aggregate
myDF.small <- myDF[,Col.Keep]
myFUN <- c(max, min, mean)
myDF.stats <- aggregate(myDF.small[,2] ~ myDF.small[,1] + myDF.small[,2], FUN=myFUN)
myDF.stats <- aggregate(myDF.small[,2] ~ myDF.small[,1] + myDF.small[,2], FUN=mean)
myDF.stats <- aggregate(myDF.small[,2] ~ myDF.small[,1] + myDF.small[,2], FUN=mean, na.rm=TRUE)
myDF.stats
myDF.stats <- aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2], FUN=mean, na.rm=TRUE)
View(myDF.stats)
myDF.stats <- aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2], FUN=myFUN, na.rm=TRUE)
myDF.stats <- aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x)), na.rm=TRUE)
myDF.stats <- aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2]
, FUN=function(x) c(MaxT=max(x, na.rm=TRUE), MinT=min(x, na.rm=TRUE), MeanT=mean(x, na.rm=TRUE)))
View(myDF.stats)
myDF.stats <- aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x)))
myDF.stats
View(myDF.stats)
myDF.stats <- aggregate(myDF.small[,3] ~ myDF.small[,Col.Keep[1]] + myDF.small[,Col.Keep[2]]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x) ) )
head(myDF.stats )
myDF.stats <- aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x) ) )
head(myDF.stats)
Names.ST <- c("SiteID", "Date", "MaxT", "MinT", "MeanT")
names(myDF.stats) <- Names.ST
names(myDF.stats)
myDF <- DATA_period_test2_Aw_20130101_20141231
Col.Keep <- c("SiteID", "Date", "Water.Temp.C" )
myDF.small <- myDF[,Col.Keep]
myFUN <- c(max, min, mean)
myDF.stats <- aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x) ) )
Names.ST <- c("SiteID", "Date", "MaxT", "MinT", "MeanT")
names(myDF.stats) <- Names.ST
head(myDF.stats)
names(myDF.stats)
myDF.stats <- aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x) ) )
str(myDF.stats)
myDF.stats <- as.data.frame(aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x) ) ))
str(myDF.stats)
x<- cbind(myDF.stats)
dim(x)
str(x)
x <- do.call(data.frame, myDF.stats)
str(x)
agg.stats <- data.frame(aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x) ) ))
str(add.stats)
str(agg.stats)
agg.stats <- aggregate(myDF.small[,3] ~ myDF.small[,1] + myDF.small[,2]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x) ) )
df.stats <- do.call(data.frame, agg.stats)
Names.ST <- c("SiteID", "Date", "MaxT", "MinT", "MeanT")
names(df.stats) <- Names.ST
head(df.stats)
(ST.freq <- T_frequency(sitedata))
(ST.freq <- T_frequency(sitedata))
(ST.mag  <- T_magnitude(sitedata))
(ST.roc  <- T_rateofchange(sitedata))
(ST.tim  <- T_timing(sitedata))
myData         <- DATA_period_test2_Aw_20130101_20141231
fun.myDF       <- myData
fun.col.SiteID <- "SiteID"
fun.col.Date   <- "Date"
fun.col.Temp   <- "Water.Temp.C"
agg.stats <- aggregate(fun.myDF[,fun.col.Temp] ~ fun.myDF[,fun.col.SiteID] + fun.myDF[,fun.col.Date]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x) ) )
View(agg.stats)
str(agg.stats)
df.stats <- do.call(data.frame, agg.stats)
View(df.stats)
myData         <- DATA_period_test2_Aw_20130101_20141231
fun.myDF       <- myData
fun.col.SiteID <- "SiteID"
fun.col.Date   <- "Date"
fun.col.Temp   <- "Water.Temp.C"
agg.stats <- aggregate(fun.myDF[,fun.col.Temp] ~ fun.myDF[,fun.col.SiteID] + fun.myDF[,fun.col.Date]
, FUN=function(x) c(MaxT=max(x), MinT=min(x), MeanT=mean(x) ) )
df.stats <- do.call(data.frame, agg.stats)
Names.ST <- c("SiteID", "Date", "MaxT", "MinT", "MeanT")
names(df.stats) <- Names.ST
View(df.stats)
(ST.freq <- T_frequency(sitedata))
(ST.mag  <- T_magnitude(sitedata))
(ST.roc  <- T_rateofchange(sitedata))
sitedata <- df.stats
(ST.freq <- T_frequency(sitedata))
(ST.mag  <- T_magnitude(sitedata))
dim(sitedata)
str(sitedata)
df.stats[,Names.ST[1]] <- as.character(df.stats[,Names.ST[1]])
df.stats[,Names.ST[2]] <- as.Date(df.stats[,Names.ST[2]])
str(df.stats)
sitedata <- df.stats
(ST.freq <- T_frequency(sitedata))
(ST.mag  <- T_magnitude(sitedata))
warnings()
(ST.roc  <- T_rateofchange(sitedata))
(ST.tim  <- T_timing(sitedata))
(ST.var  <- T_variability(sitedata))
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
?Export.StreamThermal
# 1.3. Export.StreamThermal to use User data
myData <- DATA_period_test2_Aw_20130101_20141231
sitedata <- Export.StreamThermal(myData)
require(StreamThermal)
(ST.freq <- T_frequency(sitedata))
(ST.mag  <- T_magnitude(sitedata))
(ST.roc  <- T_rateofchange(sitedata))
(ST.tim  <- T_timing(sitedata))
(ST.var  <- T_variability(sitedata)) # example in package doesn't work
# 1.1. Get USGS data
# code from StreamThermal T_frequency example
ExUSGSStreamTemp<-dataRetrieval::readNWISdv("01382310","00010","2011-01-01","2011-12-31",c("00001","00002","00003"))
sitedata<-subset(ExUSGSStreamTemp, select=c("site_no","Date","X_00010_00001","X_00010_00002","X_00010_00003"))
names(sitedata)<-c("siteID","Date","MaxT","MinT","MeanT")
knitr::kable(head(sitedata))
# 1.2. Use ContDataQC SummaryStats Data
myFile <- "STATS_test2_Aw_20130101_20141231_Water.Temp.C.csv"
myDir <- "Data4_Stats"
myData <- read.csv(file.path(getwd(),myDir,myFile), stringsAsFactors=FALSE)
# 1.2. Use ContDataQC SummaryStats Data
myFile <- "STATS_test2_Aw_20130101_20141231_Water.Temp.C.csv"
myDir <- "Data4_Stats"
setwd("..") #resets to vignette dir when run as code chunk
myData <- read.csv(file.path(getwd(),myDir,myFile), stringsAsFactors=FALSE)
# Subset
Col.Keep <- c("SiteID", "TimeValue", "max", "min", "mean")
sitedata <- myData[myData[,"TimeFrame"]=="day",Col.Keep]
Names.ST <- c("SiteID", "Date", "MaxT", "MinT", "MeanT")
names(sitedata) <- Names.ST
# Convert date column to date type
sitedata[,"Date"] <- as.Date(sitedata[,"Date"])
knitr::kable(head(sitedata))
# 1.3. Use user data that has been QCed
myData <- DATA_period_test2_Aw_20130101_20141231
sitedata <- Export.StreamThermal(myData)
knitr::kable(head(sitedata))
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
getwd()
# generate Vignette
devtools::build_vignettes()
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
devtools::build_vignettes()
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[1],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile),file.path(getwd(),Selection.SUB[1],myFile))
devtools::build_vignettes()
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
??ContDataQC
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
??ContDataQC
