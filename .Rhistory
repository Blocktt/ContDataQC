message(msg)
dim(df)
df[df$Date.Time >= i_A_start & df$Date.Time <= i_A_end, "Comp"] <- "A"
df[df$Date.Time >= i_A_start & df$Date.Time <= i_A_end, "Comp"] <- "A"
df[df$Date.Time >= i_B_start & df$Date.Time <= i_B_end, "Comp"] <- "B"
View(df)
View(df[, c("Date.Time", "Comp")])
View(df[, c("Date.Time", "Logger.Deployment", "Comp")])
i_A_end
table(df$Comp)
df[df$Date.Time > i_A_start & df$Date.Time <= i_A_end, "Comp"] <- "A"
df[df$Date.Time >= i_B_start & df$Date.Time < i_B_end, "Comp"] <- "B"
df$Comp <- NA
df[df$Date.Time > i_A_start & df$Date.Time <= i_A_end, "Comp"] <- "A"
df[df$Date.Time >= i_B_start & df$Date.Time < i_B_end, "Comp"] <- "B"
table(df$Comp)
vec_A <- df[df$Comp == "A", fun.col.Param]
vec_B <- df[df$Comp == "B", fun.col.Param]
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/R/fun.Helper.R')
rquery.t.test(vec_A, vec_B)
vec_A
sum(df$Comp == "A")
table(df$Comp)
sum(df$Comp == "A", na.rm = TRUE)
df$Comp <- "X"
df[df$Date.Time > i_A_start & df$Date.Time <= i_A_end, "Comp"] <- "A"
df[df$Date.Time >= i_B_start & df$Date.Time < i_B_end, "Comp"] <- "B"
# get data for comparison
vec_A <- df[df$Comp == "A", fun.col.Param]
vec_B <- df[df$Comp == "B", fun.col.Param]
vec_A
vec_B
rquery.t.test(vec_A, vec_B)
?Wilcoxon
wilcox.test(vec_A, vec_B)
vec_A
vec_B
sd(vec_A)
sd(vec_B)
mean(vec_A)
mean(vec_B)
rquery.t.test(vec_A, vec_B)
rquery.t.test(vec_A, vec_B, paired = TRUE)
wilcox.test(vec_A, vec_B, paired = TRUE)
View(df)
fun.col.Param <- "Water.Temp.C"
fun.CompHours <- 25
fun.CompHoursMax <- 12
fun.logdeploy.start <- "start"
fun.logdeploy.end = "end"
fun.col.DateTime = "Date.Time"
fun.col.logdeploy <- "Logger.Deployment"
logdeploy.terms <- c(fun.logdeploy.start, fun.logdeploy.end)
col2keep <- c(fun.col.DateTime, fun.col.Param, fun.col.logdeploy)
df <- read.csv(file.path(tempdir(), "Data3_Aggregated", "DATA_test2_Aw_20130101_20141231.csv"))
tempdir()
library(ContDataQC)
?ContDataQC
# Examples of each operation
# 00. Set up
# Parameters
Selection.Operation <- c("GetGageData"
, "QCRaw"
, "Aggregate"
, "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original"
, "Data1_RAW"
, "Data2_QC"
, "Data3_Aggregated"
, "Data4_Stats")
(myDir.BASE <- tempdir()) # create and print temp directory for example data
# Create data directories
myDir.create <- file.path(myDir.BASE, Selection.SUB[1])
ifelse(dir.exists(myDir.create) == FALSE
, dir.create(myDir.create)
, "Directory already exists")
myDir.create <- file.path(myDir.BASE, Selection.SUB[2])
ifelse(dir.exists(myDir.create) == FALSE
, dir.create(myDir.create)
, "Directory already exists")
myDir.create <- file.path(myDir.BASE, Selection.SUB[3])
ifelse(dir.exists(myDir.create) == FALSE
, dir.create(myDir.create)
, "Directory already exists")
myDir.create <- file.path(myDir.BASE, Selection.SUB[4])
ifelse(dir.exists(myDir.create) == FALSE
, dir.create(myDir.create)
, "Directory already exists")
myDir.create <- file.path(myDir.BASE, Selection.SUB[5])
ifelse(dir.exists(myDir.create) == FALSE
, dir.create(myDir.create)
, "Directory already exists")
# Save example data (assumes myDir.BASE directory exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData, file.path(myDir.BASE
, Selection.SUB[2]
, "test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData, file.path(myDir.BASE
, Selection.SUB[2]
, "test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData, file.path(myDir.BASE
, Selection.SUB[2]
, "test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData, file.path(myDir.BASE
, Selection.SUB[2]
, "test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"), "extdata", myFile)
, file.path(myDir.BASE, Selection.SUB[2], myFile))
# 02.A. QC Raw Data
myData.Operation       <- "QCRaw" #Selection.Operation[2]
myData.SiteID          <- "test2"
myData.Type            <- Selection.Type[3] #"AW"
myData.DateRange.Start <- "2013-01-01"
myData.DateRange.End   <- "2014-12-31"
myDir.import           <- file.path(myDir.BASE, Selection.SUB[2]) #"Data1_RAW"
myDir.export           <- file.path(myDir.BASE, Selection.SUB[3]) #"Data2_QC"
myReport.format        <- "docx"
ContDataQC(myData.Operation
, myData.SiteID
, myData.Type
, myData.DateRange.Start
, myData.DateRange.End
, myDir.import
, myDir.export
, fun.myReport.format = myReport.format)
# 03. Aggregate Data
myData.Operation       <- "Aggregate" #Selection.Operation[3]
myData.SiteID          <- "test2"
myData.Type            <- Selection.Type[3] #"AW"
myData.DateRange.Start <- "2013-01-01"
myData.DateRange.End   <- "2014-12-31"
myDir.import           <- file.path(myDir.BASE, Selection.SUB[3]) #"Data2_QC"
myDir.export           <- file.path(myDir.BASE, Selection.SUB[4]) #"Data3_Aggregated"
#Leave off myReport.format and get default (docx).
ContDataQC(myData.Operation
, myData.SiteID
, myData.Type
, myData.DateRange.Start
, myData.DateRange.End
, myDir.import
, myDir.export)
logdeploy.terms <- c(fun.logdeploy.start, fun.logdeploy.end)
col2keep <- c(fun.col.DateTime, fun.col.Param, fun.col.logdeploy)
df <- read.csv(file.path(tempdir(), "Data3_Aggregated", "DATA_test2_Aw_20130101_20141231.csv"))
df_small <- df[df[, fun.col.logdeploy] %in% c(logdeploy.terms), col2keep]
n_start <- sum(df[, fun.col.logdeploy] == fun.logdeploy.start, na.rm = TRUE)
n_end   <- sum(df[, fun.col.logdeploy] == fun.logdeploy.end, na.rm = TRUE)
n_deploy <- min(n_start, n_end)
msg <- paste0("Number of deployments identified = ", n_deploy)
message(msg)
date_start <- df_small[df_small[, fun.col.logdeploy] == fun.logdeploy.start, fun.col.DateTime]
date_end <- df_small[df_small[, fun.col.logdeploy] == fun.logdeploy.end, fun.col.DateTime]
date_start
date_end
i <- 1
i_A_end <- as.POSIXlt(date_end[i])
i_B_start <- as.POSIXlt(date_start[i + 1])
i_A_start <- i_A_end - (fun.CompHours * 3600)
i_B_end   <- i_B_start + (fun.CompHours * 3600)
# Compare time
i_diff <- as.vector(difftime(i_B_start, i_A_end, units = "hours"))
# QC, stop if gap too large
if(i_diff > fun.CompHoursMax){
msg <- paste0("Time difference between end of deployment "
, i
, " and start of deployment "
, i + 1
, " is too large ("
, i_diff
, " hours).")
message(msg)
next
}## IF ~ i_diff ~ END
# Identify the range to examine
df$Comp <- "X"
df[df$Date.Time > i_A_start & df$Date.Time <= i_A_end, "Comp"] <- "A"
df[df$Date.Time >= i_B_start & df$Date.Time < i_B_end, "Comp"] <- "B"
df$Date.Time > i_A_start & df$Date.Time <= i_A_end
sum(df$Date.Time > i_A_start & df$Date.Time <= i_A_end)
df_plot <- df[df[, "Comp"] %in% c("A", "B"), fun.col.Param]
df_plot
names(df)
col4plot <- c("SiteID", "Date.Time", fun.col.Param, "Comp")
df_plot <- df[df[, "Comp"] %in% c("A", "B"), col4plot]
df_plot
library(ggplot)
library(ggplot2)
ggplot(df_plot, aes(x = "Comp", y = fun.col.Param)) +
geom_boxplot()
ggplot(df_plot, aes(x = Comp, y = Water.Temp.C)) +
geom_boxplot()
ggplot(df_plot, aes_(x = "Comp", y = Water.Temp.C)) +
geom_boxplot()
ggplot(df_plot, aes_(x = "Comp", y = fun.col.Param)) +
geom_boxplot()
ggplot(df_plot, aes_(x = col_Comp, y = fun.col.Param)) +
geom_boxplot()
col_Comp <- "Comp"
ggplot(df_plot, aes_(x = col_Comp, y = fun.col.Param)) +
geom_boxplot()
ggplot(df_plot, aes_string(x = col_Comp, y = fun.col.Param)) +
geom_boxplot()
p_box <- ggplot(df_plot, aes_string(x = col_Comp, y = fun.col.Param)) +
geom_boxplot()
p_box
ggplot(df_plot, aes_string(x = col_Comp, y = fun.col.Param)) +
geom_boxplot() +
labs(title = "Deployment end/start comparison"
, subtitle = paste0(i, " (A) and ", i+1, "(B)")
)
ggplot(df_plot, aes_string(x = col_Comp, y = fun.col.Param)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)"))
ggplot(df_plot, aes_string(x = col_Comp, y = fun.col.Param)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)"))
ggplot(df_plot, aes_string(x = col_Comp, y = fun.col.Param)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)"))
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, group = col_comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)"))
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, group = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)"))
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)"))
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)")) +
theme(legend.title = element_blank())
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)")) +
theme(legend.position = "none")
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)")
, x = "Deployments") +
theme(legend.position = "none")
ggplot(df_plot, aes_string(x = Date.Time, y = Water.Temp.C)) +
geom_point()
head(df.plot)
head(df_plot)
ggplot(df_plot, aes(x = Date.Time, y = Water.Temp.C)) +
geom_point()
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)")
, x = "Deployments") +
theme(legend.position = "none")
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)")
, x = "Deployments") +
theme("minimal", legend.position = "none")
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)")
, x = "Deployments") +
theme_minimal(legend.position = "none")
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)")
, x = "Deployments") +
theme(legend.position = "none") +
theme_minimal()
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)")
, x = "Deployments") +
theme(legend.position = "none") +
theme_bw()
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = paste0("Deployment end/start comparison; ", i_A_end)
, subtitle = paste0(i, " (A) and ", i+1, " (B)")
, x = "Deployments") +
theme_bw() +
theme(legend.position = "none")
ggplot(df_plot, aes(x = Date.Time, y = Water.Temp.C)) +
geom_point() +
theme_minimal()
lab.title <- paste0("Deployment end/start comparison; ", i_A_end)
lab.subtitle <- paste0(i, " (A) and ", i+1, " (B)")
# Plot, box
p_box <- ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = lab.title
, subtitle = lab.subtitle
, x = "Deployments") +
theme_bw() +
theme(legend.position = "none")
p_box
ggplot(df_plot, aes(x = Date.Time, y = Water.Temp.C)) +
geom_point() +
labs(title = lab.title, subtitle = lab.subtitle) +
theme_minimal()
ggplot(df_plot, aes_string(x = fun.col.DateTime
, y = fun.col.Param)) +
geom_point() +
labs(title = lab.title, subtitle = lab.subtitle) +
theme_minimal()
ggplot(df_plot, aes_string(x = fun.col.DateTime
, y = fun.col.Param)) +
geom_point() +
geom_vline(xintercept = i_A_end)
labs(title = lab.title, subtitle = lab.subtitle) +
theme_minimal()
ggplot(df_plot, aes_string(x = fun.col.DateTime
, y = fun.col.Param)) +
geom_point() +
geom_vline(xintercept = i_A_end) +
labs(title = lab.title, subtitle = lab.subtitle) +
theme_minimal()
str(df_plot)
logdeploy.terms <- c(fun.logdeploy.start, fun.logdeploy.end)
col2keep <- c(fun.col.DateTime, fun.col.Param, fun.col.logdeploy)
df <- read.csv(file.path(tempdir(), "Data3_Aggregated", "DATA_test2_Aw_20130101_20141231.csv"))
df[, fun.col.DateTime] <- as.POSIXlt(df[, fun.col.DateTime])
df_small <- df[df[, fun.col.logdeploy] %in% c(logdeploy.terms), col2keep]
n_start <- sum(df[, fun.col.logdeploy] == fun.logdeploy.start, na.rm = TRUE)
n_end   <- sum(df[, fun.col.logdeploy] == fun.logdeploy.end, na.rm = TRUE)
n_deploy <- min(n_start, n_end)
msg <- paste0("Number of deployments identified = ", n_deploy)
message(msg)
date_start <- df_small[df_small[, fun.col.logdeploy] == fun.logdeploy.start, fun.col.DateTime]
date_end <- df_small[df_small[, fun.col.logdeploy] == fun.logdeploy.end, fun.col.DateTime]
i <- 1
i_A_end <- date_end[i]
i_B_start <- date_start[i + 1]
i_A_start <- i_A_end - (fun.CompHours * 3600)
i_B_end   <- i_B_start + (fun.CompHours * 3600)
# Compare time
i_diff <- as.vector(difftime(i_B_start, i_A_end, units = "hours"))
# QC, stop if gap too large
if(i_diff > fun.CompHoursMax){
msg <- paste0("Time difference between end of deployment "
, i
, " and start of deployment "
, i + 1
, " is too large ("
, i_diff
, " hours).")
message(msg)
next
}## IF ~ i_diff ~ END
col_Comp <- "Comp"
# Identify the range to examine
df$Comp <- "X"
mark_A <- df$Date.Time > i_A_start & df$Date.Time <= i_A_end
mark_B <- df$Date.Time >= i_B_start & df$Date.Time < i_B_end
df[mark_A, col_Comp] <- "A"
df[mark_B, col_Comp] <- "B"
# Loop through parameters
i_diff
# get data for comparison
vec_A <- df[df[, col_Comp] == "A", fun.col.Param]
vec_B <- df[df[, col_Comp] == "B", fun.col.Param]
# Comment out t test
# Run function
#rquery.t.test(vec_A, vec_B, paired = TRUE)
# wilcoxon test
#wilcox.test(vec_A, vec_B, paired = TRUE)
col4plot <- c("SiteID", "Date.Time", fun.col.Param, col_Comp)
df_plot <- df[df[, col_Comp] %in% c("A", "B"), col4plot]
str(df_plot)
?as.POSIXlt
fun.col.Param <- "Water.Temp.C"
fun.CompHours <- 25
fun.CompHoursMax <- 12
fun.logdeploy.start <- "start"
fun.logdeploy.end = "end"
fun.col.DateTime = "Date.Time"
fun.col.logdeploy <- "Logger.Deployment"
# may just run an RMD as a Log file.  Nothing else is saved.
logdeploy.terms <- c(fun.logdeploy.start, fun.logdeploy.end)
col2keep <- c(fun.col.DateTime, fun.col.Param, fun.col.logdeploy)
df <- read.csv(file.path(tempdir(), "Data3_Aggregated", "DATA_test2_Aw_20130101_20141231.csv"))
df_small <- df[df[, fun.col.logdeploy] %in% c(logdeploy.terms), col2keep]
n_start <- sum(df[, fun.col.logdeploy] == fun.logdeploy.start, na.rm = TRUE)
n_end   <- sum(df[, fun.col.logdeploy] == fun.logdeploy.end, na.rm = TRUE)
n_deploy <- min(n_start, n_end)
msg <- paste0("Number of deployments identified = ", n_deploy)
message(msg)
date_start <- df_small[df_small[, fun.col.logdeploy] == fun.logdeploy.start, fun.col.DateTime]
date_end <- df_small[df_small[, fun.col.logdeploy] == fun.logdeploy.end, fun.col.DateTime]
i <- 1
i_A_end <- as.posixlt(date_end[i])
i_B_start <- as.POSIXlt(date_start[i + 1])
i_A_start <- i_A_end - (fun.CompHours * 3600)
i_B_end   <- i_B_start + (fun.CompHours * 3600)
i_A_end <- as.POSIXlt(date_end[i])
i_B_start <- as.POSIXlt(date_start[i + 1])
i_A_start <- i_A_end - (fun.CompHours * 3600)
i_B_end   <- i_B_start + (fun.CompHours * 3600)
# Compare time
i_diff <- as.vector(difftime(i_B_start, i_A_end, units = "hours"))
# QC, stop if gap too large
if(i_diff > fun.CompHoursMax){
msg <- paste0("Time difference between end of deployment "
, i
, " and start of deployment "
, i + 1
, " is too large ("
, i_diff
, " hours).")
message(msg)
next
}## IF ~ i_diff ~ END
col_Comp <- "Comp"
# Identify the range to examine
df$Comp <- "X"
mark_A <- df$Date.Time > i_A_start & df$Date.Time <= i_A_end
mark_B <- df$Date.Time >= i_B_start & df$Date.Time < i_B_end
df[mark_A, col_Comp] <- "A"
df[mark_B, col_Comp] <- "B"
# Loop through parameters
# get data for comparison
vec_A <- df[df[, col_Comp] == "A", fun.col.Param]
vec_B <- df[df[, col_Comp] == "B", fun.col.Param]
# Comment out t test
# Run function
#rquery.t.test(vec_A, vec_B, paired = TRUE)
# wilcoxon test
#wilcox.test(vec_A, vec_B, paired = TRUE)
col4plot <- c("SiteID", "Date.Time", fun.col.Param, col_Comp)
df_plot <- df[df[, col_Comp] %in% c("A", "B"), col4plot]
# Spike test
lab.title <- paste0("Deployment end/start comparison; ", i_A_end)
lab.subtitle <- paste0(i, " (A) and ", i+1, " (B)")
ggplot(df_plot, aes_string(x = col_Comp
, y = fun.col.Param
, fill = col_Comp)) +
geom_boxplot() +
labs(title = lab.title
, subtitle = lab.subtitle
, x = "Deployments") +
theme_bw() +
theme(legend.position = "none")
ggplot(df_plot, aes_string(x = fun.col.DateTime
, y = fun.col.Param)) +
geom_point()
ggplot(df_plot, aes_string(x = fun.col.DateTime
, y = fun.col.Param)) +
geom_point() +
geom_vline(xintercept = 51)
ggplot(df_plot, aes_string(x = fun.col.DateTime
, y = fun.col.Param)) +
geom_point() +
geom_vline(xintercept = 50.5)
ggplot(df_plot, aes_string(x = fun.col.DateTime
, y = fun.col.Param
, color = col_Comp)) +
geom_point() +
geom_vline(xintercept = 50.5) +
labs(title = lab.title, subtitle = lab.subtitle) +
theme_minimal()
ggplot(df_plot, aes_string(x = fun.col.DateTime
, y = fun.col.Param
, color = col_Comp)) +
geom_point() +
geom_vline(xintercept = 50.5) +
labs(title = lab.title, subtitle = lab.subtitle) +
theme_minimal() +
theme(legend.title = element_blank())
