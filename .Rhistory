ParamName.xlab <- ContData.env$myLab.WaterTemp
wd <- getwd()
myFile <- "CDF_WaterTemp_2014_MA.csv"
data.import <- read.csv(file.path(wd,"data-raw",myFile))
Col.Sites <- names(data.import)[!(names(data.import) %in% myName.Date)]
data.import[,ContData.env$myName.Yr]   <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%Y")
data.import[,ContData.env$myName.Mo]   <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%m")
data.import[,ContData.env$myName.YrMo] <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%Y%m")
data.import[,ContData.env$myName.MoDa] <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%m%d")
data.import[,ContData.env$myName.Season] <- NA
Col.Sites <- names(data.import)[!(names(data.import) %in% ContData.envmyName.Date)]
Col.Sites <- names(data.import)[!(names(data.import) %in% ContData.env$myName.Date)]
data.import[,ContData.env$myName.Yr]   <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%Y")
data.import[,ContData.env$myName.Mo]   <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%m")
data.import[,ContData.env$myName.YrMo] <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%Y%m")
data.import[,ContData.env$myName.MoDa] <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%m%d")
data.import[,ContData.env$myName.Season] <- NA
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric("0101") & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Spring.Start)] <- "Winter"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Spring.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Summer.Start)] <- "Spring"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Summer.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Fall.Start)] <- "Summer"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Fall.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Winter.Start)] <- "Fall"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Winter.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<=as.numeric("1231")] <- "Winter"
data.import[,ContData.env$myName.YrSeason] <- paste(data.import[,ContData.env$myName.Yr],data.import[,ContData.env$myName.Season],sep="")
View(data.import)
x <- ecdf(data.import[,Col.Sites[1]])
plot(x, col="blue")
i=1
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
strFile <- "CompSiteCDF_"
strFile.Out <- paste(paste("CompSiteCDF",myDate,myTime,sep=ContData.env$myDelim),"pdf",sep=".")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
for (i in 1:length(Col.Sites)){
myColors <- cbPalette #rainbow(length(Col.Sites))
if(i==1){
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main="All Data", xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE, add=T)
}
legend("bottomright",Col.Sites,fill=myColors)
}
Col.Sites
#for testing load ContData.env
source(file.path(getwd(),"R","config.R"))
ParamName.xlab <- ContData.env$myLab.WaterTemp
#df.data <- data_CompSiteCDF
wd <- getwd()
myFile <- "CDF_WaterTemp_2014_MA.csv"
data.import <- read.csv(file.path(wd,"data-raw",myFile))
# Site Names (Columns)
Col.Sites <- names(data.import)[!(names(data.import) %in% ContData.env$myName.Date)]
Col.Sites
# add time period fields
data.import[,ContData.env$myName.Yr]   <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%Y")
data.import[,ContData.env$myName.Mo]   <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%m")
data.import[,ContData.env$myName.YrMo] <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%Y%m")
data.import[,ContData.env$myName.MoDa] <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%m%d")
# data.import[,ContData.env$myName.JuDa] <- as.POSIXlt(data.import[,ContData.env$myName.Date], format=ContData.env$myFormat.Date)$yday +1
# ## add Season fields
data.import[,ContData.env$myName.Season] <- NA
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric("0101") & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Spring.Start)] <- "Winter"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Spring.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Summer.Start)] <- "Spring"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Summer.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Fall.Start)] <- "Summer"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Fall.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Winter.Start)] <- "Fall"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Winter.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<=as.numeric("1231")] <- "Winter"
data.import[,ContData.env$myName.YrSeason] <- paste(data.import[,ContData.env$myName.Yr],data.import[,ContData.env$myName.Season],sep="")
#
View(data.import)
# calc CDF
x <- ecdf(data.import[,Col.Sites[1]])
plot(x, col="blue")
# plot
i=1
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
strFile <- "CompSiteCDF_"
strFile.Out <- paste(paste("CompSiteCDF",myDate,myTime,sep=ContData.env$myDelim),"pdf",sep=".")
# Color Blind Palatte
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# The palette with black:
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
for (i in 1:length(Col.Sites)){
myColors <- cbPalette #rainbow(length(Col.Sites))
if(i==1){
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main="All Data", xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE, add=T)
}
legend("bottomright",Col.Sites,fill=myColors)
}
x <- round(data.import$Browns,1)
y <- as.data.frame(table(x))
z <- sum(y$Freq)
y$Freq <- y$Freq/z
plot(y, type="l")
y$x <- as.numeric(y$x)
plot(y, type="l")
pdf(file=strFile.Out)##PDF.START
for (i in 1:length(Col.Sites)){
myColors <- cbPalette #rainbow(length(Col.Sites))
if(i==1){
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main="All Data", xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE, add=T)
}
legend("bottomright",Col.Sites,fill=myColors)
}
plot(y, type="l")
dev.off() ##PDF.END
head(y)
View(y)
hist(y)
?hist
x <- round(data.import$Browns,1)
y <- as.data.frame(table(x))
z <- sum(y$Freq)
hist(x[1])
hist(data.import$Browns)
lines(density(data.import$Browns), col="blue")
data.import$Browns
AA <- !is.na(data.import$Browns)
hist(AA)
AA <- data.import$Browns[!is.na(data.import$Browns)]
hist(AA)
lines(density(AA), col="blue")
hist(AA, prob=TRUE)
lines(density(AA), col="blue")
lines(density(AA), col="blue", lwd=2)
box()
pdf(file=strFile.Out)##PDF.START
for (i in 1:length(Col.Sites)){
myColors <- cbPalette #rainbow(length(Col.Sites))
if(i==1){
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main="All Data", xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE, add=T)
}
legend("bottomright",Col.Sites,fill=myColors)
}
x <- round(data.import$Browns,1)
y <- as.data.frame(table(x))
z <- sum(y$Freq)
y$Freq <- y$Freq/z
plot(y, type="l")
y$x <- as.numeric(y$x)  # works for plot but converts to rowID
plot(y, type="l")
AA <- data.import$Browns[!is.na(data.import$Browns)]
hist(AA, prob=TRUE)
lines(density(AA), col="blue", lwd=2)
box()
dev.off() ##PDF.END
?hist
j=1
hist(data.import[,Col.Sites[j]], plot=FALSE)
hist(data.import[,Col.Sites[j]], plot=TRUE)
dev.off() ##PDF.END
hist(data.import[,Col.Sites[j]], plot=TRUE)
hist(data.import[,Col.Sites[j]], plot=TRUE, density=TRUE)
hist(data.import[,Col.Sites[j]], plot=TRUE)
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,j][!is.na(data.import[,j])]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], plot=TRUE)
box()
}##IF.j==1.END
# plot lines
lines(density(data.j), col=myColors[j], lwd=2)
}##FOR.j.END
j=1
data.j <- data.import[,j][!is.na(data.import[,j])]
data.j
data.j <- data.import[,Col.Sites[j]][!is.na(data.import[,Col.Sites[j]])]
data.j
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]][!is.na(data.import[,Col.Sites[j]])]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], plot=TRUE)
box()
}##IF.j==1.END
# plot lines
lines(density(data.j), col=myColors[j], lwd=2)
}##FOR.j.END
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]][!is.na(data.import[,Col.Sites[j]])]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE)
box()
}##IF.j==1.END
# plot lines
lines(density(data.j), col=myColors[j], lwd=2)
}##FOR.j.END
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]][!is.na(data.import[,Col.Sites[j]])]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE, col="white")
box()
}##IF.j==1.END
# plot lines
lines(density(data.j), col=myColors[j], lwd=2)
}##FOR.j.END
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]][!is.na(data.import[,Col.Sites[j]])]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE, border="white")
box()
}##IF.j==1.END
# plot lines
lines(density(data.j), col=myColors[j], lwd=2)
}##FOR.j.END
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]][!is.na(data.import[,Col.Sites[j]])]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE, border="white"
,main="All Data", xlab=ParamName.xlab, ylab="Proportion = value")
box()
}##IF.j==1.END
# plot lines
lines(density(data.j), col=myColors[j], lwd=2)
}##FOR.j.END
pdf(file=strFile.Out)##PDF.START
myColors <- cbPalette #rainbow(length(Col.Sites))
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]][!is.na(data.import[,Col.Sites[j]])]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE, border="white"
,main="All Data", xlab=ParamName.xlab, ylab="Proportion = value")
box()
}##IF.j==1.END
# plot lines
lines(density(data.j), col=myColors[j], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
for (i in 1:length(Col.Sites)){##FOR.i.START
#myColors <- cbPalette #rainbow(length(Col.Sites))
if(i==1){##IF.i==1.START
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main="All Data", xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE, add=T)
}##IF.i==1.END
legend("bottomright",Col.Sites,fill=myColors)
}##FOR.i.END
dev.off() ##PDF.END
dev.off() ##PDF.END
# PLOT 1
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE, border="white"
,main="All Data", xlab=ParamName.xlab, ylab="Proportion = value")
box()
}##IF.j==1.END
# plot lines
lines(density(data.j, na.rm=TRUE), col=myColors[j], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
{
pdf(file=strFile.Out)##PDF.START
par(mfrow=c(2,1))
myColors <- cbPalette #rainbow(length(Col.Sites))
# PLOT 1
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE, border="white"
,main="All Data", xlab=ParamName.xlab, ylab="Proportion = value")
box()
}##IF.j==1.END
# plot lines
lines(density(data.j, na.rm=TRUE), col=myColors[j], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
# Plot 2
for (i in 1:length(Col.Sites)){##FOR.i.START
#myColors <- cbPalette #rainbow(length(Col.Sites))
if(i==1){##IF.i==1.START
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main="All Data", xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE, add=T)
}##IF.i==1.END
legend("bottomright",Col.Sites,fill=myColors)
}##FOR.i.END
dev.off() ##PDF.END
}
?pdf
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
strFile <- "CompSiteCDF_"
strFile.Out <- paste(paste("CompSiteCDF",myDate,myTime,sep=ContData.env$myDelim),"pdf",sep=".")
{
pdf(file=strFile.Out, width=7, height=10)##PDF.START
par(mfrow=c(2,1))
myColors <- cbPalette #rainbow(length(Col.Sites))
# PLOT 1
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE, border="white"
,main="All Data", xlab=ParamName.xlab, ylab="Proportion = value")
box()
}##IF.j==1.END
# plot lines
lines(density(data.j, na.rm=TRUE), col=myColors[j], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
# Plot 2
for (i in 1:length(Col.Sites)){##FOR.i.START
#myColors <- cbPalette #rainbow(length(Col.Sites))
if(i==1){##IF.i==1.START
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main="All Data", xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=1.5, do.p=FALSE, add=T)
}##IF.i==1.END
legend("bottomright",Col.Sites,fill=myColors)
}##FOR.i.END
dev.off() ##PDF.END
}
{
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
strFile <- "CompSiteCDF_"
strFile.Out <- paste(paste("CompSiteCDF",myDate,myTime,sep=ContData.env$myDelim),"pdf",sep=".")
#
pdf(file=strFile.Out, width=7, height=10)##PDF.START
par(mfrow=c(2,1))
myColors <- cbPalette #rainbow(length(Col.Sites))
# PLOT 1
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE, border="white"
,main="All Data", xlab=ParamName.xlab, ylab="Proportion = value")
box()
}##IF.j==1.END
# plot lines
lines(density(data.j, na.rm=TRUE), col=myColors[j], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
# Plot 2
for (i in 1:length(Col.Sites)){##FOR.i.START
#myColors <- cbPalette #rainbow(length(Col.Sites))
if(i==1){##IF.i==1.START
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=2, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main="All Data", xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=2, do.p=FALSE, add=T)
}##IF.i==1.END
legend("bottomright",Col.Sites,fill=myColors)
}##FOR.i.END
dev.off() ##PDF.END
}
{
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
strFile <- "CompSiteCDF_"
strFile.Out <- paste(paste("CompSiteCDF",myDate,myTime,sep=ContData.env$myDelim),"pdf",sep=".")
#
pdf(file=strFile.Out, width=7, height=10)##PDF.START
par(mfrow=c(2,1))
myColors <- cbPalette #rainbow(length(Col.Sites))
# PLOT 1
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE, border="white"
,main="All Data", xlab=ParamName.xlab, ylab="Proportion = value")
box()
}##IF.j==1.END
# plot lines
lines(density(data.j, na.rm=TRUE), col=myColors[j], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
# Plot 2
myLWD <- 1.5
for (i in 1:length(Col.Sites)){##FOR.i.START
#myColors <- cbPalette #rainbow(length(Col.Sites))
if(i==1){##IF.i==1.START
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=myLWD, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main="All Data", xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=myLWD, do.p=FALSE, add=T)
}##IF.i==1.END
legend("bottomright",Col.Sites,fill=myColors)
}##FOR.i.END
dev.off() ##PDF.END
}
{
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
strFile <- "CompSiteCDF_"
strFile.Out <- paste(paste("CompSiteCDF",myDate,myTime,sep=ContData.env$myDelim),"pdf",sep=".")
#
pdf(file=strFile.Out, width=7, height=10)##PDF.START
par(mfrow=c(2,1))
myColors <- cbPalette #rainbow(length(Col.Sites))
# PLOT 1
for (j in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.j <- data.import[,Col.Sites[j]]
# different first iteration
if (j==1) {##IF.j==1,START
hist(data.import[,Col.Sites[j]], prob=TRUE, border="white"
,main="All Data", xlab=ParamName.xlab, ylab="Proportion = value")
box()
}##IF.j==1.END
# plot lines
lines(density(data.j, na.rm=TRUE), col=myColors[j], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
# Plot 2
myLWD <- 1.5
for (i in 1:length(Col.Sites)){##FOR.i.START
#myColors <- cbPalette #rainbow(length(Col.Sites))
if(i==1){##IF.i==1.START
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=myLWD, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main="All Data", xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.import[,Col.Sites[i]]), col=myColors[i], verticals=TRUE, lwd=myLWD, do.p=FALSE, add=T)
}##IF.i==1.END
}##FOR.i.END
legend("bottomright",Col.Sites,fill=myColors)
dev.off() ##PDF.END
}
library(devtools)
library(ContDataQC)
devtools::check()
devtools::check()
?ContDataQC
library(ContDataQC)
?ContDataQC
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
?ContDataQC
vignette(package="ContDataQC")
print(vignette(package="ContDataQC"))
vignette("rotated", package="grid")
vignette(package="ContDataQC")
vignette("ContDataQC_Vignette",package="ContDataQC")
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
