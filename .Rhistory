#
# Create Month and Day Fields
# month
#     myField   <- "month"
#     data.import[,myField] <- data.import[,myName.Date]
#     myFormat  <- "%m"
#     data.import[,myField][!is.na(data.import[,myName.Date])] <- strftime(data.import[,myName.Date][!is.na(data.import[,myName.DateTime])]
#                                                                     ,format=myFormat,usetz=FALSE)
data.import[,ContData.env$myName.Mo] <- as.POSIXlt(data.import[,ContData.env$myName.Date])$mon+1
# day
#     myField   <- "day"
#     data.import[,myField] <- data.import[,myName.Date]
#     myFormat.In  <- myFormat.Date #"%Y-%m-%d"
#     myFormat.Out <- "%d"
#     data.import[,myField][!is.na(data.import[,myField])] <- format(strptime(data.import[,myField][!is.na(data.import[,myField])],format=myFormat.In)
#                                                                    ,format=myFormat.Out)
data.import[,ContData.env$myName.Day] <- as.POSIXlt(data.import[,ContData.env$myName.Date])$mday
# year
data.import[,ContData.env$myName.Yr] <- as.POSIXlt(data.import[,ContData.env$myName.Date])$year+1900
#
#     # example of classes for POSIXlt
#     Sys.time()
#     unclass(as.POSIXlt(Sys.time()))
#     ?DateTimeClasses
#
# 6. QC for each Data Type present
# sub routine adds QC Calcs, QC Test Flags, Assigns overall Flag, and removes QC Calc Fields
# cycle each data type (manually code)
#
# skip if not present
#
# 6.01. WaterTemp
myField <- ContData.env$myName.WaterTemp
myMsg.data <- "WaterTemp"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.WaterTemp
,ContData.env$myThresh.Gross.Fail.Lo.WaterTemp
,ContData.env$myThresh.Gross.Suspect.Hi.WaterTemp
,ContData.env$myThresh.Gross.Suspect.Lo.WaterTemp
,ContData.env$myThresh.Spike.Hi.WaterTemp
,ContData.env$myThresh.Spike.Lo.WaterTemp
,ContData.env$myThresh.RoC.SD.period.WaterTemp
,ContData.env$myThresh.RoC.SD.number.WaterTemp
,ContData.env$myThresh.Flat.Hi.WaterTemp
,ContData.env$myThresh.Flat.Lo.WaterTemp
,ContData.env$myThresh.Flat.Tolerance.WaterTemp)
#
}##IF.END
#
# 6.02. AirTemp
myField <- ContData.env$myName.AirTemp
myMsg.data <- "AirTemp"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.AirTemp
,ContData.env$myThresh.Gross.Fail.Lo.AirTemp
,ContData.env$myThresh.Gross.Suspect.Hi.AirTemp
,ContData.env$myThresh.Gross.Suspect.Lo.AirTemp
,ContData.env$myThresh.Spike.Hi.AirTemp
,ContData.env$myThresh.Spike.Lo.AirTemp
,ContData.env$myThresh.RoC.SD.period.AirTemp
,ContData.env$myThresh.RoC.SD.number.AirTemp
,ContData.env$myThresh.Flat.Hi.AirTemp
,ContData.env$myThresh.Flat.Lo.AirTemp
,ContData.env$myThresh.Flat.Tolerance.AirTemp)
#
}##IF.END
#
# 6.03. WaterP
myField <- ContData.env$myName.WaterP
myMsg.data <- "WaterP"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.WaterP
,ContData.env$myThresh.Gross.Fail.Lo.WaterP
,ContData.env$myThresh.Gross.Suspect.Hi.WaterP
,ContData.env$myThresh.Gross.Suspect.Lo.WaterP
,ContData.env$myThresh.Spike.Hi.WaterP
,ContData.env$myThresh.Spike.Lo.WaterP
,ContData.env$myThresh.RoC.SD.period.WaterP
,ContData.env$myThresh.RoC.SD.number.WaterP
,ContData.env$myThresh.Flat.Hi.WaterP
,ContData.env$myThresh.Flat.Lo.WaterP
,ContData.env$myThresh.Flat.Tolerance.WaterP)
#
}##IF.END
#
# 6.04. AirBP
myField <- ContData.env$myName.AirBP
myMsg.data <- "AirBP"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.AirBP
,ContData.env$myThresh.Gross.Fail.Lo.AirBP
,ContData.env$myThresh.Gross.Suspect.Hi.AirBP
,ContData.env$myThresh.Gross.Suspect.Lo.AirBP
,ContData.env$myThresh.Spike.Hi.AirBP
,ContData.env$myThresh.Spike.Lo.AirBP
,ContData.env$myThresh.RoC.SD.period.AirBP
,ContData.env$myThresh.RoC.SD.number.AirBP
,ContData.env$myThresh.Flat.Hi.AirBP
,ContData.env$myThresh.Flat.Lo.AirBP
,ContData.env$myThresh.Flat.Tolerance.AirBP)
#
}##IF.END
#
# 6.05. WaterLevel
myField <- ContData.env$myName.WaterLevel
myMsg.data <- "WaterLevel"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.WaterLevel
,ContData.env$myThresh.Gross.Fail.Lo.WaterLevel
,ContData.env$myThresh.Gross.Suspect.Hi.WaterLevel
,ContData.env$myThresh.Gross.Suspect.Lo.WaterLevel
,ContData.env$myThresh.Spike.Hi.WaterLevel
,ContData.env$myThresh.Spike.Lo.WaterLevel
,ContData.env$myThresh.RoC.SD.period.WaterLevel
,ContData.env$myThresh.RoC.SD.number.WaterLevel
,ContData.env$myThresh.Flat.Hi.WaterLevel
,ContData.env$myThresh.Flat.Lo.WaterLevel
,ContData.env$myThresh.Flat.Tolerance.WaterLevel)
#
}##IF.END
#
# 6.06. Discharge
myField <- ContData.env$myName.Discharge
myMsg.data <- "Discharge"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.Discharge
,ContData.env$myThresh.Gross.Fail.Lo.Discharge
,ContData.env$myThresh.Gross.Suspect.Hi.Discharge
,ContData.env$myThresh.Gross.Suspect.Lo.Discharge
,ContData.env$myThresh.Spike.Hi.Discharge
,ContData.env$myThresh.Spike.Lo.Discharge
,ContData.env$myThresh.RoC.SD.period.Discharge
,ContData.env$myThresh.RoC.SD.number.Discharge
,ContData.env$myThresh.Flat.Hi.Discharge
,ContData.env$myThresh.Flat.Lo.Discharge
,ContData.env$myThresh.Flat.Tolerance.Discharge)
#
# 6.07. Conductivity
myField <- ContData.env$myName.Cond
myMsg.data <- "Cond"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.Cond
,ContData.env$myThresh.Gross.Fail.Lo.Cond
,ContData.env$myThresh.Gross.Suspect.Hi.Cond
,ContData.env$myThresh.Gross.Suspect.Lo.Cond
,ContData.env$myThresh.Spike.Hi.Cond
,ContData.env$myThresh.Spike.Lo.Cond
,ContData.env$myThresh.RoC.SD.period.Cond
,ContData.env$myThresh.RoC.SD.number.Cond
,ContData.env$myThresh.Flat.Hi.Cond
,ContData.env$myThresh.Flat.Lo.Cond
,ContData.env$myThresh.Flat.Tolerance.Cond)
#
# 6.08. Dissolved Oxygen
myField <- ContData.env$myName.DO
myMsg.data <- "DO"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.DO
,ContData.env$myThresh.Gross.Fail.Lo.DO
,ContData.env$myThresh.Gross.Suspect.Hi.DO
,ContData.env$myThresh.Gross.Suspect.Lo.DO
,ContData.env$myThresh.Spike.Hi.DO
,ContData.env$myThresh.Spike.Lo.DO
,ContData.env$myThresh.RoC.SD.period.DO
,ContData.env$myThresh.RoC.SD.number.DO
,ContData.env$myThresh.Flat.Hi.DO
,ContData.env$myThresh.Flat.Lo.DO
,ContData.env$myThresh.Flat.Tolerance.DO)
#
# 6.09. pH
myField <- ContData.env$myName.pH
myMsg.data <- "pH"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.pH
,ContData.env$myThresh.Gross.Fail.Lo.pH
,ContData.env$myThresh.Gross.Suspect.Hi.pH
,ContData.env$myThresh.Gross.Suspect.Lo.pH
,ContData.env$myThresh.Spike.Hi.pH
,ContData.env$myThresh.Spike.Lo.pH
,ContData.env$myThresh.RoC.SD.period.pH
,ContData.env$myThresh.RoC.SD.number.pH
,ContData.env$myThresh.Flat.Hi.pH
,ContData.env$myThresh.Flat.Lo.pH
,ContData.env$myThresh.Flat.Tolerance.pH)
#
# 6.10. Turbidity
myField <- ContData.env$myName.Turbidity
myMsg.data <- "Turbidity"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.Turbidity
,ContData.env$myThresh.Gross.Fail.Lo.Turbidity
,ContData.env$myThresh.Gross.Suspect.Hi.Turbidity
,ContData.env$myThresh.Gross.Suspect.Lo.Turbidity
,ContData.env$myThresh.Spike.Hi.Turbidity
,ContData.env$myThresh.Spike.Lo.Turbidity
,ContData.env$myThresh.RoC.SD.period.Turbidity
,ContData.env$myThresh.RoC.SD.number.Turbidity
,ContData.env$myThresh.Flat.Hi.Turbidity
,ContData.env$myThresh.Flat.Lo.Turbidity
,ContData.env$myThresh.Flat.Tolerance.Turbidity)
#
# 6.11. Chlorophyll a
myField <- ContData.env$myName.Chlorophylla
myMsg.data <- "Chlorophylla"
myMsg <- paste("WORKING (QC Tests and Flags - ",myMsg.data,")",sep="")
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
if(myField %in% myNames.DataFields.Present==TRUE){##IF.START
#
data.import <- fun.CalcQCStats(data.import
,myField
,ContData.env$myThresh.Gross.Fail.Hi.Chlorophylla
,ContData.env$myThresh.Gross.Fail.Lo.Chlorophylla
,ContData.env$myThresh.Gross.Suspect.Hi.Chlorophylla
,ContData.env$myThresh.Gross.Suspect.Lo.Chlorophylla
,ContData.env$myThresh.Spike.Hi.Chlorophylla
,ContData.env$myThresh.Spike.Lo.Chlorophylla
,ContData.env$myThresh.RoC.SD.period.Chlorophylla
,ContData.env$myThresh.RoC.SD.number.Chlorophylla
,ContData.env$myThresh.Flat.Hi.Chlorophylla
,ContData.env$myThresh.Flat.Lo.Chlorophylla
,ContData.env$myThresh.Flat.Tolerance.Chlorophylla)
#
}##IF.END
#
#
#############################
# Names of columns for QC Calculations and Tests with Flags for each data column present
# combine so can check for and remove later.
myNames.DataFields.Present.QCCalcs <- as.vector(t(outer(myNames.DataFields.Present,ContData.env$myNames.QCCalcs,paste,sep=".")))
myNames.Flags.QCTests <- paste("Flag.",as.vector(t(outer(ContData.env$myNames.QCTests,myNames.DataFields.Present,paste,sep="."))),sep="")
#################################
# not sure if need this little bit anymore
################################
#
#
# 7. QC Tests
# incorporated into subroutine in step 6
#
# 8. Generate QC File
# incorporated into subroutine in step 6
#
# 9. Generate Log File
# incorporated into subroutine in step 6
#
###########################
# save file then run QC Report in a separate Script
###############
#     # 10.0. Output file (only works if DataType is Air OR Water *not* both)
#     # 10.1. Set Name
#     #File.Date.Start <- format(as.Date(myData.DateRange.Start,myFormat.Date),"%Y%m%d")
#     #File.Date.End   <- format(as.Date(myData.DateRange.End,myFormat.Date),"%Y%m%d")
#     strFile.Out <- paste("QCauto",strFile,sep="_")
#     # 10.2. Save to File the data (overwrites any existing file).
#     #print(paste("Saving output of file ",intCounter," of ",intCounter.Stop," files complete.",sep=""))
#     #flush.console()
#     write.csv(data.import,file=paste(myDir.data.export,"/",strFile.Out,sep=""),quote=FALSE,row.names=FALSE)
#     #
#*********************
# START QC manual stuff
#************************
#data.import <- read.csv(paste(myDir.data.import,strFile,sep="/"),as.is=TRUE,na.strings="")
#
# 4.0. Columns
# 4.1. Check for DataFields  (may have already been done)
myNames.DataFields.Present <- ContData.env$myNames.DataFields[ContData.env$myNames.DataFields %in% colnames(data.import)==TRUE]
# add Date.Time to names for modification
myNames.DataFields2Mod <- c(ContData.env$myName.DateTime, myNames.DataFields.Present)
#
# 5.0. Add "RAW" and "Comment.MOD" fields
# default values
myName.Raw <- "RAW"
myName.Comment.Mod <- "Comment.MOD"
# 5.1. Cycle each present field
for (j in myNames.DataFields2Mod) {##FOR.j.START
#
# A. Add comment field and leave blank
data.import[,paste(myName.Comment.Mod,j,sep=".")] <- ""
# B. Add data.RAW and populate with original data
data.import[,paste(myName.Raw,j,sep=".")] <- data.import[,j]
#
}##FOR.j.END
#
#     # leave as a loop so get RAW and Comment together
#     j <- myNames.DataFields2Mod
#     # A. Add comment field and leave blank
#     data.import[,paste(myName.Comment.Mod,j,sep=".")] <- ""
#     # B. Add data.RAW and populate with original data
#     data.import[,paste(myName.Raw,j,sep=".")] <- data.import[,j]
#
# 6-9 #not here
#
###########################
# save file then run QC Report in a separate Script
###############
# 10.0. Output file
# 10.1. Set Name
File.Date.Start <- format(as.Date(strFile.Date.Start,ContData.env$myFormat.Date),"%Y%m%d")
File.Date.End   <- format(as.Date(strFile.Date.End,ContData.env$myFormat.Date),"%Y%m%d")
strFile.Out.Prefix <- "QC"
strFile.Out <- paste(paste(strFile.Out.Prefix,strFile.SiteID,strFile.DataType,File.Date.Start,File.Date.End,sep=ContData.env$myDelim),"csv",sep=".")
# 10.2. Save to File the data (overwrites any existing file).
#print(paste("Saving output of file ",intCounter," of ",intCounter.Stop," files complete.",sep=""))
#flush.console()
write.csv(data.import,file=paste(myDir.data.export,"/",strFile.Out,sep=""),quote=FALSE,row.names=FALSE)
#
#     # 11. Clean up
#     # 11.1. Inform user of progress and update LOG
#     myMsg <- "COMPLETE"
#     myItems.Complete <- myItems.Complete + 1
#     myItems.Log[intCounter,2] <- myMsg
#     fun.write.log(myItems.Log,myDate,myTime)
#     fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
#     flush.console()
#     # 11.2. Remove data (import)
#     rm(data.import)
#*********************
# end QC manual stuff
#************************
##################
# insert QC Report so runs without user intervention
##################
# run with same import and export directory
###
fun.Report(strFile.SiteID
,strFile.DataType
,strFile.Date.Start
,strFile.Date.End
,fun.myDir.BASE
,fun.myDir.SUB.export
,fun.myDir.SUB.export
,strFile.Out.Prefix)
##########
# QC
######
#                     fun.myData.SiteID           <- strFile.SiteID
#                     fun.myData.Type             <- strFile.DataType
#                     fun.myData.DateRange.Start  <- fun.myData.DateRange.Start
#                     fun.myData.DateRange.End    <- fun.myData.DateRange.End
#                     fun.myDir.BASE              <- fun.myDir.BASE
#                     fun.myDir.SUB.import        <- fun.myDir.SUB.export
#                     fun.myDir.SUB.export        <- fun.myDir.SUB.export
#                     fun.myFile.Prefix           <- strFile.Out.Prefix
######################
######################
# 11. Clean up
# 11.1. Inform user of progress and update LOG
myMsg <- "COMPLETE"
myItems.Complete <- myItems.Complete + 1
myItems.Log[intCounter,2] <- myMsg
fun.write.log(myItems.Log,myDate,myTime)
fun.Msg.Status(myMsg, intCounter, intItems.Total, strFile)
flush.console()
# 11.2. Remove data (import)
rm(data.import)
#
}##while.END
#
myTime.End <- Sys.time()
print(paste("Task COMPLETE; ",round(difftime(myTime.End,myTime.Start,units="mins"),2)," min.",sep=""))
flush.console()
#
# return data table
#return(data.import)  # don't want to return since are saving in the loop  (would only be last one anyway)
}##FUN.fun.QC.END
######################################################################
# # # ######################################################################
# # # # QC
# fun.data.import                 <- data.import
# fun.myField.Data                <- myName.WaterLevel
# fun.myThresh.Gross.Fail.Hi      <- myThresh.Gross.Fail.Hi.WaterLevel
# fun.myThresh.Gross.Fail.Lo      <- myThresh.Gross.Fail.Lo.WaterLevel
# fun.myThresh.Gross.Suspect.Hi   <- myThresh.Gross.Suspect.Hi.WaterLevel
# fun.myThresh.Gross.Suspect.Lo   <- myThresh.Gross.Suspect.Lo.WaterLevel
# fun.myThresh.Spike.Hi           <- myThresh.Spike.Hi.WaterLevel
# fun.myThresh.Spike.Lo           <- myThresh.Spike.Lo.WaterLevel
# fun.myThresh.RoC.SD.period      <- myThresh.RoC.SD.period.WaterLevel
# fun.myThresh.RoC.SD.number      <- myThresh.RoC.SD.number.WaterLevel
# fun.myThresh.Flat.Hi            <- myThresh.Flat.Hi.WaterLevel
# fun.myThresh.Flat.Lo            <- myThresh.Flat.Lo.WaterLevel
# fun.myThresh.Flat.Tolerance     <- myThresh.Flat.Tolerance.WaterLevel
# # # ####################################################################
########################
# FUNCTION
########################
# Generate QC Test Calculations, QC Test Flags, and Assign overall flags
# input is a single data field and the thresholds
# output is a data frame (assumes data.import)
# reuses items from this script and calling script.  Not a stand alone function
#
####
# @param fun.data.import data frame to perform QC
# @param fun.myField.Data data field
# @param fun.myThresh.Gross.Fail.Hi Pertinent QC threshold; Gross, Fail, Hi
# @param fun.myThresh.Gross.Fail.Lo Pertinent QC threshold; Gross, Fail, Lo
# @param fun.myThresh.Gross.Suspect.Hi Pertinent QC threshold; Gross, Suspect, Hi
# @param fun.myThresh.Gross.Suspect.Lo Pertinent QC threshold; Gross, Suspect, Lo
# @param fun.myThresh.Spike.Hi Pertinent QC threshold; Spike, Fail, Hi
# @param fun.myThresh.Spike.Lo Pertinent QC threshold; Spike, Fail, Lo
# @param fun.myThresh.RoC.SD.period Pertinent QC threshold; Rate of Change, Standard Deviation, period
# @param fun.myThresh.RoC.SD.number Pertinent QC threshold; Rate of Change, Standard Deviation, number
# @param fun.myThresh.Flat.Hi Pertinent QC threshold; Flat, Hi
# @param fun.myThresh.Flat.Lo Pertinent QC threshold; Flat, Hi
# @param fun.myThresh.Flat.Tolerance Pertinent QC threshold; Flat, tolerance
# @return Returns a data frame to calling function
# @keywords continuous data, qc, quality control
# @examples
# #Not intended to be accessed indepedently.
# @export
source('~/GitHub/ContDataQC/R/fun.QC.R', echo=TRUE)
source('~/GitHub/ContDataQC/R/fun.QC.R', echo=TRUE)
getwd()
setwd(paste0("./",myLibrary))
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
library(devtools)
setwd(paste0("./",myLibrary))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
setwd("..") # return to root directory first
devtools::install(myLibrary)
setwd(paste0("./",myLibrary))
devtools::document()
devtools::document()
setwd("..") # return to root directory first
devtools::install(myLibrary)
library(myLibrary,character.only = TRUE)
