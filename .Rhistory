myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "01187300" # Hubbard River near West Hartland, CT
myData.Type         <- "Gage"
myData.DateRange.Start  <- "2015-01-01"
myData.DateRange.End    <- "2016-12-31"
myDir.import <- getwd()
myDir.export <- getwd()# file.path(myDir.BASE,Selection.SUB[1])
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
myDF <- read.csv("01187300_Gage_20150101_20161231.csv", stringsAsFactors = FALSE)
head(myDF)
plot(myDF[,6])
myCols <- c("Date.Time","Discharge.ft3.s")
myDF <- myDF[,myCols]
myCols <- c("Date.Time","Discharge.ft3.s")
myDF <- myDF[,myCols]
myDF[,"Date"] <- as.Date(myDF[,"Date.Time"],format="%Y-%m-%d")
data.daily <- aggregate(myDF[,2] ~ myDF[,3], FUN=mean)
names(data.daily) <- c("Date","Discharge.ft3.s")
head(data.daily)
myData <- zoo(data.daily[,2],order.by=data.daily[,1])
myFile <- "01187300_Gage_20150101_20161231.csv"
myFile.IHA <- paste0("IHA_",myFile)
write.csv(myData,myFile.IHA)
?zoo
myYr <- "calendar" # "water" or "calendar"
Analysis.Group.1 <- group1(myData, year=myYr)
require(IHA)
require(XLConnect)
myYr <- "calendar" # "water" or "calendar"
Analysis.Group.1 <- group1(myData, year=myYr)
Analysis.Group.2 <- group2(myData, year=myYr)
Analysis.Group.3 <- group3(myData, year=myYr)
Analysis.Group.4 <- group4(myData, year=myYr)
Analysis.Group.5 <- group5(myData, year=myYr)
Group.Desc <- c("Magnitude of monthly water conditions"
,"Magnitude of monthly water condition and include 12 parameters"
,"Timing of annual extreme water conditions"
,"Frequency and duration of high and low pulses"
,"Rate and frequency of water condition changes")
# IHA
myYr <- "calendar" # "water" or "calendar"
# IHA Metrics
## IHA parameters group 1; Magnitude of monthly water conditions
Analysis.Group.1 <- group1(myData, year=myYr)
## IHA parameters group 2: Magnitude of monthly water condition and include 12 parameters
Analysis.Group.2 <- group2(myData, year=myYr)
## IHA parameters group 3; Timing of annual extreme water conditions
Analysis.Group.3 <- group3(myData, year=myYr)
## IHA parameters group 4; Frequency and duration of high and low pulses
# defaults to 25th and 75th percentiles
Analysis.Group.4 <- group4(myData, year=myYr)
## IHA parameters group 5; Rate and frequency of water condition changes
Analysis.Group.5 <- group5(myData, year=myYr)
#
# Save Results
Group.Desc <- c("Magnitude of monthly water conditions"
,"Magnitude of monthly water condition and include 12 parameters"
,"Timing of annual extreme water conditions"
,"Frequency and duration of high and low pulses"
,"Rate and frequency of water condition changes")
df.Groups <- as.data.frame(cbind(paste0("Group",1:5),Group.Desc))
#
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
# Notes section (add min/max dates)
Notes.User <- "Erik.Leppo@tetratech.com"
Notes.Names <- c("Dataset (SiteID)","IHA.Year","Analysis.Date (YYYYMMDD)","Analysis.Time (HHMMSS)","Analysis.User")
Notes.Data <- c(SiteID, myYr,myDate, myTime, Notes.User)
df.Notes <- as.data.frame(cbind(Notes.Names,Notes.Data))
Notes.Summary <- summary(myData)
# Open/Create file
myFile.XLSX <- paste("IHA",SiteID,myYr,myDate,myTime,"xlsx",sep=".")
wb <- loadWorkbook(myFile.XLSX, create = TRUE) # load workbook, create if not existing
# create sheets
createSheet(wb, name = "NOTES")
createSheet(wb, name = "Group1")
createSheet(wb, name = "Group2")
createSheet(wb, name = "Group3")
createSheet(wb, name = "Group4")
createSheet(wb, name = "Group5")
# write to worksheet
writeWorksheet(wb, df.Notes, sheet = "NOTES", startRow=1)
writeWorksheet(wb, Notes.Summary, sheet = "NOTES", startRow=10)
writeWorksheet(wb, df.Groups, sheet="NOTES", startRow=25)
writeWorksheet(wb, Analysis.Group.1, sheet = "Group1")
writeWorksheet(wb, Analysis.Group.2, sheet = "Group2")
writeWorksheet(wb, Analysis.Group.3, sheet = "Group3")
writeWorksheet(wb, Analysis.Group.4, sheet = "Group4")
writeWorksheet(wb, Analysis.Group.5, sheet = "Group5")
# save workbook
saveWorkbook(wb)
# 1.B. Use saved data
myFile <- "01187300_Gage_20150101_20161231.csv"
myCol.DateTime="Date.Time"
myCol.Discharge <- "Discharge.ft3.s"
# QC Function
fun.myFile <- myFile
fun.myDir.import=getwd()
fun.myDir.export=getwd()
fun.myDateRange.Start=NA
fun.myDateRange.End=NA
fun.myCol.DateTime <- myCol.DateTime
fun.myCol.Discharge <- myCol.Discharge
myDF <- read.csv(myFile, stringsAsFactors = FALSE)
myCols <- c(fun.myCol.DateTime,fun.myCol.Discharge)
myDF <- myDF[,myCols]
myDF[,"Date"] <- as.Date(myDF[,fun.myCol.DateTime],format="%Y-%m-%d")
if(!is.na(fun.myDateRange.Start)){
date.start <- as.Date(fun.myDateRange.Start, format="%Y-%m-%d")
myDF <- myDF[myDF[,"Date"]>=date.start,]
}
if(!is.na(fun.myDateRange.End)){
date.end <- as.Date(fun.myDateRange.End, format="%Y-%m-%d")
myDF <- myDF[myDF[,"Date"]<=date.end,]
}
dim(myDF)
myData.DateRange.Start  <- "2016-01-01"
myData.DateRange.End    <- "2016-12-31"
fun.myDateRange.Start <- myData.DateRange.Start # NA
if(!is.na(fun.myDateRange.Start)){
date.start <- as.Date(fun.myDateRange.Start, format="%Y-%m-%d")
myDF <- myDF[myDF[,"Date"]>=date.start,]
}
dim(myDF)
myData.DateRange.End    <- "2016-06-30"
fun.myDateRange.End=myData.DateRange.End #NA
if(!is.na(fun.myDateRange.End)){
date.end <- as.Date(fun.myDateRange.End, format="%Y-%m-%d")
myDF <- myDF[myDF[,"Date"]<=date.end,]
}
dim(myDF)
# QC Function
fun.myFile <- myFile
fun.myDir.import=getwd()
fun.myDir.export=getwd()
fun.myDateRange.Start <- NA
fun.myDateRange.End=NA
fun.myCol.DateTime <- myCol.DateTime
fun.myCol.Discharge <- myCol.Discharge
myDF <- read.csv(myFile, stringsAsFactors = FALSE)
myCols <- c(fun.myCol.DateTime,fun.myCol.Discharge)
# add date
myDF <- myDF[,myCols]
myDF[,"Date"] <- as.Date(myDF[,fun.myCol.DateTime],format="%Y-%m-%d")
# filter for date range supplied by user (if NA, default, do nothing)
if(!is.na(fun.myDateRange.Start)){
date.start <- as.Date(fun.myDateRange.Start, format="%Y-%m-%d")
myDF <- myDF[myDF[,"Date"]>=date.start,]
}
if(!is.na(fun.myDateRange.End)){
date.end <- as.Date(fun.myDateRange.End, format="%Y-%m-%d")
myDF <- myDF[myDF[,"Date"]<=date.end,]
}
# generate daily values
data.daily <- aggregate(myDF[,2] ~ myDF[,3], FUN=mean)
names(data.daily) <- c("Date",fun.myCol.Discharge)
#head(data.daily)
# Create zoo object for use with IHA library
myData <- zoo::zoo(data.daily[,2],order.by=data.daily[,1])
# Save
myFile.IHA <- paste0("IHA_",fun.myFile)
write.csv(myData,myFile.IHA)
# Return DF to user
?string
?gsub
?sub
?substr
myFile.base <- substr(fun.myFile,1,nchar(fun.myFile)-4)
myFile.ext <- substr(fun.myFile,nchar(myFile.base),nchar(fun.myFile))
myFile.base
myFile.ext
myFile.ext <- substr(fun.myFile,nchar(myFile.base)+1,nchar(fun.myFile))
myFile.ext
myFile.base <- substr(fun.myFile,1,nchar(fun.myFile)-4)
myFile.ext <- substr(fun.myFile,nchar(myFile.base)+1,nchar(fun.myFile))
myFile.dates <- paste0(_date.start,"_",date.end)
myFile.IHA <- paste0("IHA_",myFile.base,myFile.dates,myFile.ext)
myFile.dates <- paste0("_",date.start,"_",date.end)
myFile.IHA <- paste0("IHA_",myFile.base,myFile.dates,myFile.ext)
myFile.IHA
date.start <- "NA"
date.end <- "NA"
myFile.dates <- paste0("_",date.start,"_",date.end)
myFile.IHA <- paste0("IHA_",myFile.base,myFile.dates,myFile.ext)
myFile.IHA
fun.Export.IHA <- function(fun.myFile
,fun.myDir.import=getwd()
,fun.myDir.export=getwd()
,fun.myDateRange.Start=NA
,fun.myDateRange.End=NA
,fun.myCol.DateTime="Date.Time"
,fun.myCol.Discharge="Discharge.ft3.s"
)
{##FUNCTION.fun.Export.IHA.START
# import file
myDF <- read.csv(myFile, stringsAsFactors = FALSE)
myCols <- c(fun.myCol.DateTime,fun.myCol.Discharge)
# add date
myDF <- myDF[,myCols]
myDF[,"Date"] <- as.Date(myDF[,fun.myCol.DateTime],format="%Y-%m-%d")
# filter for date range supplied by user (if NA, default, do nothing)
if(!is.na(fun.myDateRange.Start)){
date.start <- as.Date(fun.myDateRange.Start, format="%Y-%m-%d")
myDF <- myDF[myDF[,"Date"]>=date.start,]
} else {
date.start <- "NA"
}
if(!is.na(fun.myDateRange.End)){
date.end <- as.Date(fun.myDateRange.End, format="%Y-%m-%d")
myDF <- myDF[myDF[,"Date"]<=date.end,]
} else {
date.end <- "NA"
}
# generate daily values
data.daily <- aggregate(myDF[,2] ~ myDF[,3], FUN=mean)
names(data.daily) <- c("Date",fun.myCol.Discharge)
#head(data.daily)
# Create zoo object for use with IHA library
myData <- zoo::zoo(data.daily[,2],order.by=data.daily[,1])
# Save
myFile.base <- substr(fun.myFile,1,nchar(fun.myFile)-4)
myFile.ext <- substr(fun.myFile,nchar(myFile.base)+1,nchar(fun.myFile))
myFile.dates <- paste0("_",date.start,"_",date.end)
myFile.IHA <- paste0("IHA_",myFile.base,myFile.dates,myFile.ext)
write.csv(myData,myFile.IHA)
# Return DF to user
return(myData)
}##FUNCTION.fun.Export.IHA.END
# 1.A. Use ContDataQC and Save (~1min for download)
myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "01187300" # Hubbard River near West Hartland, CT
myData.Type         <- "Gage"
myData.DateRange.Start  <- "2015-01-01"
myData.DateRange.End    <- "2016-12-31"
myDir.import <- getwd()
myDir.export <- getwd()
ContDataQC(myData.Operation, myData.SiteID, myData.Type
, myData.DateRange.Start, myData.DateRange.End
, myDir.import, myDir.export)
myData.IHA <- fun.Export.IHA(myFile
, fun.myCol.DateTime = myCol.DateTime
, fun.myCol.Discharge = myCol.Discharge
)
SiteID <- "01170100"
Notes.User <- "Erik.Leppo@tetratech.com"
require(IHA)
require(XLConnect)
myYr <- "calendar" # "water" or "calendar"
Analysis.Group.1 <- group1(myData.IHA, year=myYr)
Analysis.Group.2 <- group2(myData.IHA, year=myYr)
Analysis.Group.3 <- group3(myData.IHA, year=myYr)
Analysis.Group.4 <- group4(myData.IHA, year=myYr)
Analysis.Group.5 <- group5(myData.IHA, year=myYr)
Group.Desc <- c("Magnitude of monthly water conditions"
,"Magnitude of monthly water condition and include 12 parameters"
,"Timing of annual extreme water conditions"
,"Frequency and duration of high and low pulses"
,"Rate and frequency of water condition changes")
df.Groups <- as.data.frame(cbind(paste0("Group",1:5),Group.Desc))
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
Notes.Names <- c("Dataset (SiteID)","IHA.Year","Analysis.Date (YYYYMMDD)","Analysis.Time (HHMMSS)","Analysis.User")
Notes.Data <- c(SiteID, myYr, myDate, myTime, Notes.User)
df.Notes <- as.data.frame(cbind(Notes.Names,Notes.Data))
Notes.Summary <- summary(myData.IHA)
myFile.XLSX <- paste("IHA", SiteID, myYr, myDate, myTime, "xlsx", sep=".")
wb <- loadWorkbook(myFile.XLSX, create = TRUE) # load workbook, create if not existing
createSheet(wb, name = "NOTES")
createSheet(wb, name = "Group1")
createSheet(wb, name = "Group2")
createSheet(wb, name = "Group3")
createSheet(wb, name = "Group4")
createSheet(wb, name = "Group5")
writeWorksheet(wb, df.Notes, sheet = "NOTES", startRow=1)
writeWorksheet(wb, Notes.Summary, sheet = "NOTES", startRow=10)
writeWorksheet(wb, df.Groups, sheet="NOTES", startRow=25)
writeWorksheet(wb, Analysis.Group.1, sheet = "Group1")
writeWorksheet(wb, Analysis.Group.2, sheet = "Group2")
writeWorksheet(wb, Analysis.Group.3, sheet = "Group3")
writeWorksheet(wb, Analysis.Group.4, sheet = "Group4")
writeWorksheet(wb, Analysis.Group.5, sheet = "Group5")
saveWorkbook(wb)
?saveWorkbook
saveWorkbook(wb, myFile.XLSX)
# User info
SiteID <- myData.SiteID
Notes.User <- "Erik.Leppo@tetratech.com"
#~~~~~
# Library (install if needed)
# devtools::install_github("jasonelaw/IHA")
# install.packages("XLConnect")
# Library (load)
require(IHA)
require(XLConnect)
#~~~~~
# IHA
myYr <- "calendar" # "water" or "calendar"
# IHA Metrics
## IHA parameters group 1; Magnitude of monthly water conditions
Analysis.Group.1 <- group1(myData.IHA, year=myYr)
## IHA parameters group 2: Magnitude of monthly water condition and include 12 parameters
Analysis.Group.2 <- group2(myData.IHA, year=myYr)
## IHA parameters group 3; Timing of annual extreme water conditions
Analysis.Group.3 <- group3(myData.IHA, year=myYr)
## IHA parameters group 4; Frequency and duration of high and low pulses
# defaults to 25th and 75th percentiles
Analysis.Group.4 <- group4(myData.IHA, year=myYr)
## IHA parameters group 5; Rate and frequency of water condition changes
Analysis.Group.5 <- group5(myData.IHA, year=myYr)
#~~~~~
# Save Results to Excel (each group on its own worksheet)
Group.Desc <- c("Magnitude of monthly water conditions"
,"Magnitude of monthly water condition and include 12 parameters"
,"Timing of annual extreme water conditions"
,"Frequency and duration of high and low pulses"
,"Rate and frequency of water condition changes")
df.Groups <- as.data.frame(cbind(paste0("Group",1:5),Group.Desc))
#
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
# Notes section (add min/max dates)
Notes.Names <- c("Dataset (SiteID)","IHA.Year","Analysis.Date (YYYYMMDD)","Analysis.Time (HHMMSS)","Analysis.User")
Notes.Data <- c(SiteID, myYr, myDate, myTime, Notes.User)
df.Notes <- as.data.frame(cbind(Notes.Names,Notes.Data))
Notes.Summary <- summary(myData.IHA)
# Open/Create file
myFile.XLSX <- paste("IHA", SiteID, myYr, myDate, myTime, "xlsx", sep=".")
wb <- loadWorkbook(myFile.XLSX, create = TRUE) # load workbook, create if not existing
# create sheets
createSheet(wb, name = "NOTES")
createSheet(wb, name = "Group1")
createSheet(wb, name = "Group2")
createSheet(wb, name = "Group3")
createSheet(wb, name = "Group4")
createSheet(wb, name = "Group5")
# write to worksheet
writeWorksheet(wb, df.Notes, sheet = "NOTES", startRow=1)
writeWorksheet(wb, Notes.Summary, sheet = "NOTES", startRow=10)
writeWorksheet(wb, df.Groups, sheet="NOTES", startRow=25)
writeWorksheet(wb, Analysis.Group.1, sheet = "Group1")
writeWorksheet(wb, Analysis.Group.2, sheet = "Group2")
writeWorksheet(wb, Analysis.Group.3, sheet = "Group3")
writeWorksheet(wb, Analysis.Group.4, sheet = "Group4")
writeWorksheet(wb, Analysis.Group.5, sheet = "Group5")
# save workbook
saveWorkbook(wb, myFile.XLSX)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
??ContDataQC
?fun.Export.IHA
# 1.  Get Gage Data
#
# 1.A. Use ContDataQC and Save (~1min for download)
myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "01187300" # Hubbard River near West Hartland, CT
myData.Type         <- "Gage"
myData.DateRange.Start  <- "2015-01-01"
myData.DateRange.End    <- "2016-12-31"
myDir.import <- getwd()
myDir.export <- getwd()
ContDataQC(myData.Operation, myData.SiteID, myData.Type
, myData.DateRange.Start, myData.DateRange.End
, myDir.import, myDir.export)
# 1.B. Use saved data
myFile <- "01187300_Gage_20150101_20161231.csv"
myCol.DateTime="Date.Time"
myCol.Discharge <- "Discharge.ft3.s"
#
# 2. Prep Data
myData.IHA <- fun.Export.IHA(myFile
, fun.myCol.DateTime = myCol.DateTime
, fun.myCol.Discharge = myCol.Discharge
)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3. Run IHA
# Example using returned DF with IHA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User info
SiteID <- myData.SiteID
Notes.User <- "Erik.Leppo@tetratech.com"
#~~~~~
# Library (install if needed)
# devtools::install_github("jasonelaw/IHA")
# install.packages("XLConnect")
# Library (load)
require(IHA)
require(XLConnect)
#~~~~~
# IHA
myYr <- "calendar" # "water" or "calendar"
# IHA Metrics
## IHA parameters group 1; Magnitude of monthly water conditions
Analysis.Group.1 <- group1(myData.IHA, year=myYr)
## IHA parameters group 2: Magnitude of monthly water condition and include 12 parameters
Analysis.Group.2 <- group2(myData.IHA, year=myYr)
Analysis.Group.3 <- group3(myData.IHA, year=myYr)
## IHA parameters group 4; Frequency and duration of high and low pulses
# defaults to 25th and 75th percentiles
Analysis.Group.4 <- group4(myData.IHA, year=myYr)
## IHA parameters group 5; Rate and frequency of water condition changes
Analysis.Group.5 <- group5(myData.IHA, year=myYr)
#~~~~~
# Save Results to Excel (each group on its own worksheet)
Group.Desc <- c("Magnitude of monthly water conditions"
,"Magnitude of monthly water condition and include 12 parameters"
,"Timing of annual extreme water conditions"
,"Frequency and duration of high and low pulses"
,"Rate and frequency of water condition changes")
df.Groups <- as.data.frame(cbind(paste0("Group",1:5),Group.Desc))
#
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
# Notes section (add min/max dates)
Notes.Names <- c("Dataset (SiteID)","IHA.Year","Analysis.Date (YYYYMMDD)","Analysis.Time (HHMMSS)","Analysis.User")
Notes.Data <- c(SiteID, myYr, myDate, myTime, Notes.User)
df.Notes <- as.data.frame(cbind(Notes.Names,Notes.Data))
Notes.Summary <- summary(myData.IHA)
# Open/Create file
myFile.XLSX <- paste("IHA", SiteID, myYr, myDate, myTime, "xlsx", sep=".")
wb <- loadWorkbook(myFile.XLSX, create = TRUE) # load workbook, create if not existing
# create sheets
createSheet(wb, name = "NOTES")
createSheet(wb, name = "Group1")
createSheet(wb, name = "Group2")
createSheet(wb, name = "Group3")
createSheet(wb, name = "Group4")
createSheet(wb, name = "Group5")
# write to worksheet
writeWorksheet(wb, df.Notes, sheet = "NOTES", startRow=1)
writeWorksheet(wb, Notes.Summary, sheet = "NOTES", startRow=10)
writeWorksheet(wb, df.Groups, sheet="NOTES", startRow=25)
writeWorksheet(wb, Analysis.Group.1, sheet = "Group1")
writeWorksheet(wb, Analysis.Group.2, sheet = "Group2")
writeWorksheet(wb, Analysis.Group.3, sheet = "Group3")
writeWorksheet(wb, Analysis.Group.4, sheet = "Group4")
writeWorksheet(wb, Analysis.Group.5, sheet = "Group5")
# save workbook
saveWorkbook(wb, myFile.XLSX)
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
