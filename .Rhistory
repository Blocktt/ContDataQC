## Air Pressure
col_AirBP <- names(df_hobo)[grepl(paste0(find_Barom,".*",find_Pres,"|",find_Pres,".*",find_Barom)
, tolower(names(df_hobo)))]
## Water Pressure
# find Pres and not Barom
col_WaterP_find <- grepl(find_Pres, tolower(names(df_hobo))) + !grepl(find_Barom, tolower(names(df_hobo)))
col_WaterP <- names(df_hobo)[col_WaterP_find==2]
## Sensor Depth
col_SensorDepth <- names(df_hobo)[grepl(find_Depth, tolower(names(df_hobo)))]
## Logger (both)
LogID_str <- "LGR S/N: "
## Logger, Water
### conditional so is below
## Logger, Air
### conditional so is below
# Columns, Output
## same values as ContData.env$myName.*
col_out_SiteID        <- ContData.env$myName.SiteID # "SiteID"
col_out_DateTime      <- ContData.env$myName.DateTime # "Date.Time"
col_out_AirTemp       <- ContData.env$myName.AirTemp # "Air.Temp.C"
col_out_WaterTemp     <- ContData.env$myName.WaterTemp # "Water.Temp.C"
col_out_AirBP         <- ContData.env$myName.AirBP # "Air.BP.psi"
col_out_WaterP        <- ContData.env$myName.WaterP # "Water.P.psi"
col_out_SensorDepth   <- ContData.env$myName.SensorDepth # "Sensor.Depth.ft"
col_out_WaterLoggerID <- ContData.env$myName.LoggerID.Water # "Water.LoggerID"
col_out_AirLoggerID   <- ContData.env$myName.LoggerID.Air # "Air.LoggerID"
col_out_AirRowID      <- ContData.env$myName.RowID.Air
col_out_WaterRowID    <- ContData.env$myName.RowID.Water
# 01.04. DF Create ####
# Create output
nrow_hobo <- nrow(df_hobo)
df_out <- data.frame(matrix(, nrow=nrow_hobo, ncol=0)) # missing x on purpose
# assign SiteID
df_out[, col_out_SiteID] <- SiteID
# assign date time
df_out[, col_out_DateTime] <- df_hobo[,col_Date]
# all the rest are optional (unknown if included)
#
if(length(col_AirTemp)!=0){##IF.col_AirTemp.START
df_out[, col_out_AirTemp] <- df_hobo[, col_AirTemp]
# Logger, Air
LogID_Air_pos <- gregexpr(LogID_str, col_AirTemp)
LogID_Air_start <- LogID_Air_pos[[1]][1]+nchar(LogID_str)
LogID_Air_end <- nchar(col_AirTemp)
LogID_Air <- trimws(gsub(")", "", substr(col_AirTemp, LogID_Air_start, LogID_Air_end)))
df_out[, col_out_AirLoggerID] <- LogID_Air
df_out[, col_out_AirRowID] <- row.names(df_hobo)
}##IF.col_AirTemp.END
#
if(length(col_WaterTemp)!=0){##IF.col_WaterTemp.START
df_out[, col_out_WaterTemp] <- df_hobo[, col_WaterTemp]
# Logger, Water
LogID_Water_pos <- gregexpr(LogID_str, col_WaterTemp)
LogID_Water_start <- LogID_Water_pos[[1]][1]+nchar(LogID_str)
LogID_Water_end <- nchar(col_WaterTemp)
LogID_Water <- trimws(gsub(")", "", substr(col_WaterTemp, LogID_Water_start, LogID_Water_end)))
df_out[, col_out_WaterLoggerID] <- LogID_Water
df_out[, col_out_WaterRowID] <- row.names(df_hobo)
}##IF.col_WaterTemp.END
#
if(length(col_AirBP)!=0){##IF.col_AirBP.START
df_out[, col_out_AirBP] <- df_hobo[, col_AirBP]
}##IF.col_AirBP.END
#
if(length(col_WaterP)!=0){##IF.col_WaterP.START
df_out[, col_out_WaterP] <- df_hobo[, col_WaterP]
}##IF.col_WaterP.END
#
if(length(col_SensorDepth)!=0){##IF.col_SensorDepth.START
df_out[, col_out_SensorDepth] <- df_hobo[, col_SensorDepth]
}##IF.col_SensorDepth.END
# 01.05. DF Save ####
write.csv(df_out, file.path(fun.myDir.export, i), row.names=FALSE)
# 01.06. Cleanup
rm(df_out)
rm(df_hobo)
}
#
cat("Task complete.")
flush.console()
#
}##FUNCTION.END
formatHobo(fun.myFile, fun.myDir.import, fun.myDir.export)
# 0. Prep####
wd <- getwd() # assume is package directory
#library(devtools)
# All 3 files for SiteID = Charlies
# 1. Get data and process#####
# 1.1. Import Data
myFile <- "Charlies_Air_20170726_20170926.csv"
df.1 <- read.csv(file.path(wd,"data-raw",myFile))
myFile <- "Charlies_AW_20170726_20170926.csv"
df.2 <- read.csv(file.path(wd,"data-raw",myFile))
myFile <- "Charlies_Water_20170726_20170926.csv"
df.3 <- read.csv(file.path(wd,"data-raw",myFile))
x <- read.delim(file.path(wd,"data-raw", myFile))
x
head9x)
head(x)
head(df.1)
head(df.3)
# 1. Get data and process#####
# 1.1. Import Data
myFile <- "Charlies_Air_20170726_20170926.csv"
df.1 <- read.delim(file.path(wd,"data-raw", myFile))
myFile <- "Charlies_AW_20170726_20170926.csv"
df.2 <- read.delim(file.path(wd,"data-raw", myFile))
myFile <- "Charlies_Water_20170726_20170926.csv"
df.3 <- read.delim(file.path(wd,"data-raw", myFile))
# 1.2. Process Data
View(df.1)
View(df.2)
View(df.3)
# QC check
dim(df.1)
dim(df.2)
dim(df.3)
# structure
str(df.1)
str(df.2)
str(df.3)
data_raw_Charlies_Air_20170726_20170926 <- df.1
devtools::use_data(data_raw_Charlies_Air_20170726_20170926, overwrite = TRUE)
data_raw_Charlies_AW_20170726_20170926 <- df.2
devtools::use_data(data_raw_Charlies_AW_20170726_20170926, overwrite = TRUE)
data_raw_Charlies_Water_20170726_20170926 <- df.3
devtools::use_data(data_raw_Charlies_Water_20170726_20170926, overwrite = TRUE)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=pkg)
help(package="ContDataQC")
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB       <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE          <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data0_Original/ exists)
myData <- data_raw_Charlies_Air_20170726_20170926
write.csv(myData,paste0("./",Selection.SUB[1],"/Charlies_Air_20170726_20170926.csv"))
myData <- data_raw_Charlies_AW_20170726_20170926
write.csv(myData,paste0("./",Selection.SUB[1],"/Charlies_AW_20170726_20170926.csv"))
myData <- data_raw_Charlies_Water_20170726_20170926
write.csv(myData,paste0("./",Selection.SUB[1],"/Charlies_Water_20170726_20170926.csv"))
# Function Inputs
myFiles <- c("Charlies_Air_20170726_20170926.csv"
, "Charlies_AW_20170726_20170926.csv"
, "Charlies_Water_20170726_20170926.csv")
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export))
formatHobo(myFiles, myDir.import, myDir.export)
library(ContDataQC)
myFiles <- c("Charlies_Air_20170726_20170926.csv"
, "Charlies_AW_20170726_20170926.csv"
, "Charlies_Water_20170726_20170926.csv")
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export))
formatHobo(myFiles, myDir.import, myDir.export)
#' # Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB       <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE          <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data0_Original/ exists)
myData <- data_raw_Charlies_Air_20170726_20170926
write.csv(myData,paste0("./",Selection.SUB[1],"/Charlies_Air_20170726_20170926.csv"))
myData <- data_raw_Charlies_AW_20170726_20170926
write.csv(myData,paste0("./",Selection.SUB[1],"/Charlies_AW_20170726_20170926.csv"))
myData <- data_raw_Charlies_Water_20170726_20170926
write.csv(myData,paste0("./",Selection.SUB[1],"/Charlies_Water_20170726_20170926.csv"))
?file.path
??copy
file.path(".")
file.path(getwd())
?system.file
system.file(package = "stats")
system.file("INDEX")
system.file("help", "AnIndex", package = "splines")
system.file("extdata", fn_1, package="ContDataQC")
fn_1 <- "Charlies_Air_20170726_20170926.csv"
system.file("extdata", fn_1, package="ContDataQC")
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
#' # Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB       <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE          <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data0_Original/ exists)
fn_1 <- "Charlies_Air_20170726_20170926.csv"
file.copy(system.file("extdata", fn_1, package="ContDataQC"), file.path(myDir.BASE, Selection.SUB[1], fn_1)
fn_2 <- "Charlies_AW_20170726_20170926.csv"
file.copy(system.file("extdata", fn_2, package="ContDataQC"), file.path(myDir.BASE, Selection.SUB[1], fn_2)
fn_3 <- "Charlies_Water_20170726_20170926.csv"
file.copy(system.file("extdata", fn_2, package="ContDataQC"), file.path(myDir.BASE, Selection.SUB[1], fn_2)
system.file("extdata", fn_1, package="ContDataQC")
fn_1 <- "Charlies_Air_20170726_20170926.csv"
file.copy(system.file("extdata", fn_1, package="ContDataQC"), file.path(myDir.BASE, Selection.SUB[1], fn_1))
myFiles <- c("Charlies_Air_20170726_20170926.csv")
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB       <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE          <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data0_Original/ exists)
fn_1 <- "Charlies_Air_20170726_20170926.csv"
file.copy(system.file("extdata", fn_1, package="ContDataQC"), file.path(myDir.BASE, Selection.SUB[1], fn_1))
fn_2 <- "Charlies_AW_20170726_20170926.csv"
file.copy(system.file("extdata", fn_2, package="ContDataQC"), file.path(myDir.BASE, Selection.SUB[1], fn_2))
fn_3 <- "Charlies_Water_20170726_20170926.csv"
file.copy(system.file("extdata", fn_2, package="ContDataQC"), file.path(myDir.BASE, Selection.SUB[1], fn_2))
lapply(c(fn1,fn1,fn3), function(x) file.copy(system.file("extdata", x, package="ContDataQC"), file.path(myDir.BASE, Selection.SUB[1], x)))
fn_1 <- "Charlies_Air_20170726_20170926.csv"
fn_2 <- "Charlies_AW_20170726_20170926.csv"
fn_3 <- "Charlies_Water_20170726_20170926.csv"
lapply(c(fn1,fn1,fn3), function(x) file.copy(system.file("extdata", x, package="ContDataQC"), file.path(myDir.BASE, Selection.SUB[1], x)))
lapply(c(fn_1,fn_2,fn_3), function(x) file.copy(system.file("extdata", x, package="ContDataQC"), file.path(myDir.BASE, Selection.SUB[1], x)))
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB       <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE          <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data0_Original/ exists)
fn_1 <- "Charlies_Air_20170726_20170926.csv"
fn_2 <- "Charlies_AW_20170726_20170926.csv"
fn_3 <- "Charlies_Water_20170726_20170926.csv"
lapply(c(fn_1,fn_2,fn_3), function(x)
file.copy(system.file("extdata", x, package="ContDataQC")
, file.path(myDir.BASE, Selection.SUB[1], x)))
# Function Inputs
myFiles <- c("Charlies_Air_20170726_20170926.csv"
, "Charlies_AW_20170726_20170926.csv"
, "Charlies_Water_20170726_20170926.csv")
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
#
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB       <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE          <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data0_Original/ exists)
fn_1 <- "Charlies_Air_20170726_20170926.csv"
fn_2 <- "Charlies_AW_20170726_20170926.csv"
fn_3 <- "Charlies_Water_20170726_20170926.csv"
lapply(c(fn_1,fn_2,fn_3), function(x)
file.copy(system.file("extdata", x, package="ContDataQC")
, file.path(myDir.BASE, Selection.SUB[1], x)))
# Function Inputs
myFiles <- c("Charlies_Air_20170726_20170926.csv"
, "Charlies_AW_20170726_20170926.csv"
, "Charlies_Water_20170726_20170926.csv")
myDir.import <- file.path(getwd(), "Data0_Original")
myDir.export <- file.path(getwd(), "Data1_RAW")
# Run Function (with default config)
formatHobo(myFiles, myDir.import, myDir.export)
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- myFiles
myDir.import <- file.path(".","Data1_RAW")
myDir.export <- file.path(".","Data2_QC")
myReport.format <- "html"
ContDataQC(myData.Operation, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export, fun.myFile=myFile
, fun.myReport.format=myReport.format)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
