# 20170116, EWL
data.import <- fun.QC.datetime(data.import)
# Define time period fields
myNames.Fields.TimePeriods <- c(ContData.env$myName.Yr, ContData.env$myName.YrMo, ContData.env$myName.MoDa, ContData.env$myName.Mo
, ContData.env$myName.JuDa, ContData.env$myName.Season, ContData.env$myName.YrSeason)
# add time period fields
data.import[,ContData.env$myName.Yr]   <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%Y")
data.import[,ContData.env$myName.Mo]   <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%m")
data.import[,ContData.env$myName.YrMo] <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%Y%m")
data.import[,ContData.env$myName.MoDa] <- format(as.Date(data.import[,ContData.env$myName.Date]),format="%m%d")
data.import[,ContData.env$myName.JuDa] <- as.POSIXlt(data.import[,ContData.env$myName.Date], format=ContData.env$myFormat.Date)$yday +1
## add Season fields
#   md <- data.import[,myName.MoDa]
#   data.import[,myName.Season] <- NA
#   data.import[,myName.Season][as.numeric(md)>=as.numeric("0101") & as.numeric(md)<as.numeric(myTimeFrame.Season.Spring.Start)] <- "Winter"
#   data.import[,myName.Season][as.numeric(md)>=as.numeric(myTimeFrame.Season.Spring.Start) & as.numeric(md)<as.numeric(myTimeFrame.Season.Summer.Start)] <- "Spring"
#   data.import[,myName.Season][as.numeric(md)>=as.numeric(myTimeFrame.Season.Summer.Start) & as.numeric(md)<as.numeric(myTimeFrame.Season.Fall.Start)] <- "Summer"
#   data.import[,myName.Season][as.numeric(md)>=as.numeric(myTimeFrame.Season.Fall.Start) & as.numeric(md)<as.numeric(myTimeFrame.Season.Winter.Start)] <- "Fall"
#   data.import[,myName.Season][as.numeric(md)>=as.numeric(myTimeFrame.Season.Winter.Start) & as.numeric(md)<as.numeric("1231")] <- "Winter"
#   data.import[,myName.SeasonYr] <- paste(data.import[,"Season"],data.import[,"Year"],sep="")
data.import[,ContData.env$myName.Season] <- NA
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric("0101") & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Spring.Start)] <- "Winter"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Spring.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Summer.Start)] <- "Spring"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Summer.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Fall.Start)] <- "Summer"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Fall.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric(ContData.env$myTimeFrame.Season.Winter.Start)] <- "Fall"
data.import[,ContData.env$myName.Season][as.numeric(data.import[,ContData.env$myName.MoDa])>=as.numeric(ContData.env$myTimeFrame.Season.Winter.Start) & as.numeric(data.import[,ContData.env$myName.MoDa])<as.numeric("1231")] <- "Winter"
data.import[,ContData.env$myName.YrSeason] <- paste(data.import[,ContData.env$myName.Yr],data.import[,ContData.env$myName.Season],sep="")
#
# Loop - Parameter (n=3)
## Temperature (Air/Water)
## Flow (SensorDepth and Discharge)
## Nothing on Pressure (used to calculate SensorDepth)
# future add pH, Cond, etc from USGS gages
myFields.Data       <- c(ContData.env$myName.WaterTemp, ContData.env$myName.AirTemp, ContData.env$myName.SensorDepth
,ContData.env$myName.Discharge, ContData.env$myName.Cond, ContData.env$myName.DO, ContData.env$myName.pH
,ContData.env$myName.Turbidity, ContData.env$myName.Chlorophylla, ContData.env$myName.GageHeight)
myFields.Data.Flags <- paste0(ContData.env$myName.Flag,".",myFields.Data)
myFields.Type       <- c("Thermal", "Thermal", "Hydrologic"
,"Hydrologic", "WaterChemistry", "WaterChemistry", "WaterChemistry"
, "WaterChemistry", "WaterChemistry", "Hydrologic")
myFields.Keep <- c(ContData.env$myName.SiteID
, ContData.env$myName.Date
, ContData.env$myName.Time
, ContData.env$myName.DateTime
, ContData.env$myNames.Fields.TimePeriods
, ContData.env$myFields.Data
, ContData.env$myFields.Data.Flags
)
# keep only fields needed for stats
# data.import <- data.import[,myFields.Keep]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
data2process <- myFields.Data[myFields.Data %in% names(data.import)]
print(paste("Total items to process = ",length(data2process),":",sep=""))
print(data2process)
flush.console()
i <- data2process[1]
i.num <- match(i,myFields.Data)
Fields2Drop <- myFields.Data[-i.num]
data.stats <- data.import[,!(names(data.import) %in% Fields2Drop)]
# change fails to NA (so can na.rm=T when run stats)
# flag field
myFlag <- myFields.Data.Flags[i.num]
#data.stats.nofail <- data.stats[data.stats[,myFields.Data.Flags[i.num]]!=myFlagVal.Fail,]
# 20170519, feedback to user
print(paste0("Processing item ",i.num," of ",length(data2process),"; ",i))
flush.console()
#data.stats.nofail <- data.stats
#data.stats.nofail[data.stats.nofail[,data.stats[,myFields.Data.Flags[i.num]]=myFlagVal.Fail]] <- na
# change fail to NA for i (only if user define value == FALSE)
if(ContData.env$myStats.Fails.Exclude==TRUE) {##IF.myStats.Fails.Include.START
#
data.stats[,i][data.stats[,myFlag]==ContData.env$myFlagVal.Fail] <- NA
#
}##IF.myStats.Fails.Exclude.END
# #QC test where fails
# qc.section <- "For.i.A"
# print(paste0("QC.Section: ",qc.section))
#   flush.console()
names(data.stats)[names(data.stats) %in% ContData.env$myName.Date] <- "Date"
names(data.stats)[names(data.stats) %in% ContData.env$myName.YrMo] <- "YearMonth"
names(data.stats)[names(data.stats) %in% ContData.env$myName.YrSeason] <- "YearSeason"
names(data.stats)[names(data.stats) %in% ContData.env$myName.Yr] <- "Year"
#QC test where fails
# qc.section <- "For.i.B.namechanges"
# print(paste0("QC.Section: ",qc.section))
# print(dim(data.stats))
# flush.console()
# summaryBy not working with "i" as variable.  Have to do an ugly hack to get it working
#     # QC
#     print("test2")
#     print(i)
#     print("data.stats")
#     print(head(data.stats))
#     flush.console()
#
#
#     data(dietox)
#     dietox12    <- subset(dietox,Time==12)
#     j <- "Weight"
#
#     x<-doBy::summaryBy(as.numeric(Weight)+Feed~Evit+Cu, data=dietox12,
#               FUN=c(mean,var,length))
#
#     print(x)
#     flush.console()
#
#    # myDF <- data.stats
#     #x <- summaryBy(as.numeric(Water.Temp.C)~Date,data=myDF,FUN=c(mean),na.rm=TRUE)
#     #print(dim(x))
# Create Daily Values (mean) (DV is USGS term so use that)
# if(i==myFields.Data[1]) {
# dv.i <- doBy::summaryBy(as.numeric(Water.Temp.C)~Date, data=data.stats, FUN=c(mean), na.rm=TRUE
#                   , var.names="i",id=c(ContData.env$myName.SiteID, "Year", "YearMonth", ContData.env$myName.Mo, ContData.env$myName.MoDa
#                                        , ContData.env$myName.JuDa, ContData.env$myName.Season,"YearSeason"))
# } else if(i==myFields.Data[2]) {
#   dv.i <- doBy::summaryBy(as.numeric(Air.Temp.C)~Date, data=data.stats, FUN=c(mean), na.rm=TRUE
#                     , var.names="i",id=c(ContData.env$myName.SiteID, "Year", "YearMonth", ContData.env$myName.Mo, ContData.env$myName.MoDa
#                                          , ContData.env$myName.JuDa, ContData.env$myName.Season,"YearSeason"))
# } else if (i==myFields.Data[3]) {
#   dv.i <- doBy::summaryBy(as.numeric(Water.Level.ft)~Date, data=data.stats, FUN=c(mean), na.rm=TRUE
#                     , var.names="i",id=c(ContData.env$myName.SiteID, "Year", "YearMonth", ContData.env$myName.Mo, ContData.env$myName.MoDa
#                                          , ContData.env$myName.JuDa, ContData.env$myName.Season,"YearSeason"))
# }
# 20170519, fix hard coded names
#
# name to myVar then name back
ColNum.i <- match(i,names(data.stats))
names(data.stats)[ColNum.i] <- "myVar"
dv.i <- doBy::summaryBy(as.numeric(myVar)~Date, data=data.stats, FUN=c(mean), na.rm=TRUE
, var.names="i",id=c(ContData.env$myName.SiteID, ContData.env$myName.Yr , ContData.env$myName.YrMo, ContData.env$myName.Mo, ContData.env$myName.MoDa
, ContData.env$myName.JuDa, ContData.env$myName.Season, ContData.env$myName.YrSeason))
names(data.stats)[ColNum.i] <- i
names(dv.i)[2] <- "mean"
names(dv.i)[names(dv.i) %in% "Date"] <- ContData.env$myName.Date
names(dv.i)[names(dv.i) %in% "YearMonth"] <- ContData.env$myName.YrMo
names(dv.i)[names(dv.i) %in% "YearSeason"] <- ContData.env$myName.YrSeason
names(dv.i)[names(dv.i) %in% "Year"] <- ContData.env$myName.Yr
dv.i[,"Parameter"] <- i
dv.i.ColOrder <- c(ContData.env$myName.SiteID, "Parameter", "mean", ContData.env$myName.Date, ContData.env$myNames.Fields.TimePeriods)
dv.i <- dv.i[,dv.i.ColOrder]
head(dv.i)
strFile.Prefix.Out <- "DV"
strFile.Out <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,sep=ContData.env$myDelim),"csv",sep=".")
write.csv(dv.i,paste(myDir.data.export,strFile.Out,sep="/"),quote=FALSE,row.names=FALSE)
myQ <- c(0.01,0.05,0.10,0.25,0.50,0.75,0.90,0.95,0.99)
myFUN.Names <- c("mean","median","min","max","range","sd","var","cv","n",paste("q",formatC(100*myQ,width=2,flag="0"),sep=""))
myFUN.sumBy <- function(x, ...){##FUN.myFUN.sumBy.START
c(mean=mean(x,na.rm=TRUE)
,median=median(x,na.rm=TRUE)
,min=min(x,na.rm=TRUE)
,max=max(x,na.rm=TRUE)
,range=max(x,na.rm=TRUE)-min(x,na.rm=TRUE)
,sd=sd(x,na.rm=TRUE)
,var=var(x,na.rm=TRUE)
,cv=sd(x,na.rm=TRUE)/mean(x,na.rm=TRUE)
,n=length(x)
,q=quantile(x,probs=myQ,na.rm=TRUE)
)
}##FUN.myFUN.sumBy.END
names(data.stats)[names(data.stats) %in% ContData.env$myName.Date] <- "Date"
names(data.stats)[names(data.stats) %in% ContData.env$myName.YrMo] <- "YearMonth"
names(data.stats)[names(data.stats) %in% ContData.env$myName.YrSeason] <- "YearSeason"
names(data.stats)[names(data.stats) %in% ContData.env$myName.Yr] <- "Year"
names(data.stats)[names(data.stats) %in% ContData.env$myName.Mo] <- "Month"
names(data.stats)[names(data.stats) %in% ContData.env$myName.Season] <- "Season"
strFile.Prefix.Out <- fun.myProcedure.Step
strFile.plot <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,sep=ContData.env$myDelim),"pdf",sep=".")
myTimeFrame <- "day"
myTF.Field <- ContData.env$myName.Date
myDF <- data.stats
myTimeFrame <- "day"
myTF.Field <- ContData.env$myName.Date
myDF <- data.stats
ColNum.i <- match(i,names(myDF))
names(myDF)[ColNum.i] <- "myVar"
stats.i <- doBy::summaryBy(as.numeric(myVar)~Date, data=myDF, FUN=myFUN.sumBy, na.rm=TRUE, var.names=myTimeFrame)
names(myDF)[ColNum.i] <- i
head(myDF)
names(stats.i) <- c("TimeValue",myFUN.Names)
stats.i[,"Parameter"] <- i
stats.i[,"TimeFrame"] <- myTimeFrame
stats.i.d <- stats.i
myPlot.Type <- ifelse(nrow(stats.i)==1,"p","l")
plot(stats.i$mean,type=myPlot.Type
,main=i,ylab="mean",xlab=myTimeFrame,xaxt="n"
,ylim=c(min(stats.i$min),max(stats.i$max)))
myCol <- "gray"
lines(stats.i$max,col=myCol)
lines(stats.i$min,col=myCol)
polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)
lines(stats.i$mean)
n.Total <- length(factor(stats.i[,"TimeValue"]))
pct <- c(20,40,60,80,100)*.01
myAT <- c(1,round(n.Total * pct,0))
myLab <- stats.i[,"TimeValue"][myAT]
axis(1,at=myAT,labels=myLab,tick=TRUE)
myTimeFrame <- "JulianDay"
myTF.Field <- ContData.env$myName.JuDa
myDF <- dv.i
stats.i <- doBy::summaryBy(as.numeric(mean)~JulianDay,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)
head(stats.i)
names(stats.i) <- c("TimeValue",myFUN.Names)
stats.i[,"Parameter"] <- i
stats.i[,"TimeFrame"] <- myTimeFrame
stats.i.jd <- stats.i
myPlot.Type <- ifelse(nrow(stats.i)==1,"p","l")
plot(stats.i$mean,type=myPlot.Type
,main=i,ylab="mean",xlab=myTimeFrame,xaxt="n"
,ylim=c(min(stats.i$min),max(stats.i$max)))
myCol <- "gray"
lines(stats.i$max,col=myCol)
lines(stats.i$min,col=myCol)
polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)
lines(stats.i$mean)
n.Total <- length(factor(stats.i[,"TimeValue"]))
pct <- c(20,40,60,80,100)*.01
myAT <- c(1,round(n.Total * pct,0))
myLab <- stats.i[,"TimeValue"][myAT]
axis(1,at=myAT,labels=myLab,tick=TRUE)
myTimeFrame <- "year_month"
myTF.Field <- ContData.env$myName.YrMo
myDF <- dv.i
stats.i <- doBy::summaryBy(as.numeric(mean)~YearMonth,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)
names(stats.i) <- c("TimeValue",myFUN.Names)
stats.i[,"Parameter"] <- i
stats.i[,"TimeFrame"] <- myTimeFrame
stats.i.ym <- stats.i
myPlot.Type <- ifelse(nrow(stats.i)==1,"p","l")
plot(stats.i$mean,type=myPlot.Type
,main=i,ylab="mean",xlab=myTimeFrame,xaxt="n"
,ylim=c(min(stats.i$min),max(stats.i$max)))
myCol <- "gray"
lines(stats.i$max,col=myCol)
lines(stats.i$min,col=myCol)
polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)
lines(stats.i$mean)
n.Total <- length(factor(stats.i[,"TimeValue"]))
myAT <- 1:n.Total
myLab <- stats.i[,"TimeValue"][myAT]
axis(1,at=myAT,labels=myLab,tick=TRUE)
myTimeFrame <- "month"
myTF.Field <- ContData.env$myName.Mo
myDF <- dv.i
stats.i <- doBy::summaryBy(as.numeric(mean)~Month,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)
names(stats.i) <- c("TimeValue",myFUN.Names)
stats.i[,"Parameter"] <- i
stats.i[,"TimeFrame"] <- myTimeFrame
stats.i.m <- stats.i
myPlot.Type <- ifelse(nrow(stats.i)==1,"p","l")
plot(stats.i$mean,type=myPlot.Type
,main=i,ylab="mean",xlab=myTimeFrame,xaxt="n"
,ylim=c(min(stats.i$min),max(stats.i$max)))
myCol <- "gray"
lines(stats.i$max,col=myCol)
lines(stats.i$min,col=myCol)
polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)
lines(stats.i$mean)
n.Total <- length(factor(stats.i[,"TimeValue"]))
myAT <- 1:n.Total
myLab <- stats.i[,"TimeValue"][myAT]
axis(1,at=myAT,labels=myLab,tick=TRUE)
myTimeFrame <- "year_season"
myTF.Field <- ContData.env$myName.YrSeason
myDF <- dv.i
stat.i <- doBy::summaryBy(as.numeric(mean)~YearSeason,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)
names(stats.i) <- c("TimeValue",myFUN.Names)
stats.i[,"Parameter"] <- i
stats.i[,"TimeFrame"] <- myTimeFrame
stats.i.ys <- stats.i
myPlot.Type <- ifelse(nrow(stats.i)==1,"p","l")
plot(stats.i$mean,type=myPlot.Type
,main=i,ylab="mean",xlab=myTimeFrame,xaxt="n"
,ylim=c(min(stats.i$min),max(stats.i$max)))
myCol <- "gray"
lines(stats.i$max,col=myCol)
lines(stats.i$min,col=myCol)
polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)
lines(stats.i$mean)
n.Total <- length(factor(stats.i[,"TimeValue"]))
myAT <- 1:n.Total
myLab <- stats.i[,"TimeValue"][myAT]
axis(1,at=myAT,labels=myLab,tick=TRUE)
myTimeFrame <- "season"
myTF.Field <- ContData.env$myName.Season
myDF <- dv.i
stats.i <- doBy::summaryBy(as.numeric(mean)~Season,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)
names(stats.i) <- c("TimeValue",myFUN.Names)
stats.i[,"Parameter"] <- i
stats.i[,"TimeFrame"] <- myTimeFrame
stats.i.s <- stats.i
myPlot.Type <- ifelse(nrow(stats.i)==1,"p","l")
plot(stats.i$mean,type=myPlot.Type
,main=i,ylab="mean",xlab=myTimeFrame,xaxt="n"
,ylim=c(min(stats.i$min),max(stats.i$max)))
myCol <- "gray"
lines(stats.i$max,col=myCol)
lines(stats.i$min,col=myCol)
polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)
n.Total <- length(factor(stats.i[,"TimeValue"]))
lines(stats.i$mean)
myAT <- 1:n.Total
myLab <- stats.i[,"TimeValue"][myAT]
axis(1,at=myAT,labels=myLab,tick=TRUE)
myTimeFrame <- "year"
myTF.Field <- ContData.env$myName.Yr
myDF <- dv.i
stats.i <- doBy::summaryBy(as.numeric(mean)~Year,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)
names(stats.i) <- c("TimeValue",myFUN.Names)
stats.i[,"Parameter"] <- i
stats.i[,"TimeFrame"] <- myTimeFrame
stats.i.y <- stats.i
myPlot.Type <- ifelse(nrow(stats.i)==1,"p","l")
plot(stats.i$mean,type=myPlot.Type
,main=i,ylab="mean",xlab=myTimeFrame,xaxt="n"
,ylim=c(min(stats.i$min),max(stats.i$max)))
myCol <- "gray"
lines(stats.i$max,col=myCol)
lines(stats.i$min,col=myCol)
polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)
lines(stats.i$mean)
n.Total <- length(factor(stats.i[,"TimeValue"]))
myAT <- 1:n.Total
myLab <- stats.i[,"TimeValue"][myAT]
axis(1,at=myAT,labels=myLab,tick=TRUE)
dev.off()##PDF.END
stats.i.ALL <- rbind(stats.i.y, stats.i.s, stats.i.ys, stats.i.m, stats.i.ym, stats.i.jd, stats.i.d)
dim(stats.i.y)
sim(stats.i.s)
dim(stats.i.s)
dim(stats.i.ys)
dim(stats.i.m)
dim(stats.i.ym)
dim(stats.i.jd)
dim(stats.i.d)
names(stats.i.ys)
names(stats.i.d)
stats.i.ALL <- rbind(stats.i.y, stats.i.s, stats.i.m, stats.i.ym, stats.i.jd, stats.i.d)
stats.i.ALL[,myName.SiteID] <- fun.myData.SiteID
fun.myData.SiteID <- myData.SiteID
stats.i.ALL[,myName.SiteID] <- fun.myData.SiteID
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
# myDir.SUB.import <- ""
# myDir.SUB.export <- ""
# Summary Stats
myData.Operation <- "SummaryStats" #Selection.Operation[4]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(getwd(),Selection.SUB[3]) #"Data3_Aggregated"
myDir.export <- file.path(getwd(),Selection.SUB[4]) #"Data4_Stats"
#ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, getwd(), "", "", "")
# 2. fun.Stats.R ####
# fun.Stats <- function(fun.myData.SiteID
#                       ,fun.myData.Type
#                       ,fun.myData.DateRange.Start
#                       ,fun.myData.DateRange.End
#                       ,fun.myDir.BASE=getwd()
#                       ,fun.myDir.SUB.import=""
#                       ,fun.myDir.SUB.export=""
#                       ,fun.myProcedure.Step
#                       ,fun.myFile.Prefix)
fun.myData.SiteID <- myData.SiteID
fun.myData.Type <- myData.Type
fun.myData.DateRange.Start <- myData.DateRange.Start
fun.myData.DateRange.End <- myData.DateRange.End
fun.myDir.BASE <- getwd()
fun.myDir.import <- file.path(getwd(),Selection.SUB[3]) #"Data3_Aggregated"
fun.myDir.export <- file.path(getwd(),Selection.SUB[4]) #"Data4_Stats"
fun.myProcedure.Step <- "Stats"
fun.myFile.Prefix <- "DATA"
stats.i.ALL[,myName.SiteID] <- fun.myData.SiteID
fun.myData.SiteID <- "test2"
stats.i.ALL[,myName.SiteID] <- fun.myData.SiteID
head(stats.i.ALL)
myName.SiteID
stats.i.ALL[,ContData.env$myName.SiteID] <- fun.myData.SiteID
head(stats.i.ALL)
myCol.Order <- c(ncol(stats.i.ALL),(ncol(stats.i.ALL)-2),(ncol(stats.i.ALL)-1),1:(ncol(stats.i.ALL)-3))
myCol.Order
stats.i.ALL <- stats.i.ALL[,myCol.Order]
head(stats.i.ALL)
strFile.Prefix.Out <- fun.myProcedure.Step
strFile.Out <- paste(paste(strFile.Prefix.Out,strFile.SiteID,fun.myData.Type,strFile.Date.Start,strFile.Date.End,i,sep=ContData.env$myDelim),"csv",sep=".")
write.csv(stats.i.ALL,paste(myDir.data.export,strFile.Out,sep="/"),quote=FALSE,row.names=FALSE)
}##FOR.i.END
myTimeFrame <- "year_season"
myTF.Field <- ContData.env$myName.YrSeason
myDF <- dv.i
stat.i <- doBy::summaryBy(as.numeric(mean)~YearSeason,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)
head(stat.i)
names(stats.i) <- c("TimeValue",myFUN.Names)
stats.i[,"Parameter"] <- i
stats.i[,"TimeFrame"] <- myTimeFrame
stats.i.ys <- stats.i
myPlot.Type <- ifelse(nrow(stats.i)==1,"p","l")
plot(stats.i$mean,type=myPlot.Type
,main=i,ylab="mean",xlab=myTimeFrame,xaxt="n"
,ylim=c(min(stats.i$min),max(stats.i$max)))
myCol <- "gray"
lines(stats.i$max,col=myCol)
lines(stats.i$min,col=myCol)
polygon(c(1:nrow(stats.i),rev(1:nrow(stats.i))),c(stats.i$max,rev(stats.i$min)),col=myCol,border=NA)
lines(stats.i$mean)
n.Total <- length(factor(stats.i[,"TimeValue"]))
myAT <- 1:n.Total
myLab <- stats.i[,"TimeValue"][myAT]
axis(1,at=myAT,labels=myLab,tick=TRUE)
myTimeFrame <- "season"
stats.i.ALL <- rbind(stats.i.y, stats.i.s, stats.i.ys, stats.i.m, stats.i.ym, stats.i.jd, stats.i.d)
head(stats.i.ys)
stats.i <- doBy::summaryBy(as.numeric(mean)~YearSeason,data=myDF,FUN=myFUN.sumBy,var.names=myTimeFrame)
names(stats.i) <- c("TimeValue",myFUN.Names)
head(stats.i)
stats.i[,"Parameter"] <- i
head(stats.i)
stats.i[,"TimeFrame"] <- myTimeFrame
head(stats.i)
stats.i.ys <- stats.i
head(stats.i.ys)
stats.i.ALL <- rbind(stats.i.y, stats.i.s, stats.i.ys, stats.i.m, stats.i.ym, stats.i.jd, stats.i.d)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Restart R within RStudio:  Ctrl + Shift + F10
library(ContDataQC)
?ContDataQC
# Summary Stats
myData.Operation <- "SummaryStats" #Selection.Operation[4]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
myDir.export <- file.path(myDir.BASE,Selection.SUB[4]) #"Data4_Stats"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Summary Stats
myData.Operation <- "SummaryStats" #Selection.Operation[4]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
myDir.export <- file.path(myDir.BASE,Selection.SUB[4]) #"Data4_Stats"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Summary Stats
myData.Operation <- "SummaryStats" #Selection.Operation[4]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
myDir.export <- file.path(myDir.BASE,Selection.SUB[4]) #"Data4_Stats"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
