#~~~~~~~~~~~~~~~~
#
# Inform user that task is done
cat(paste0("PDF created; ",strFile.Out))
flush.console()
#
} #end of function; ##FUNCTION.CompSiteCDF.END
CompSiteCDF(ParamName.xlab = myXlab, df.input=myDF)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
?CompSiteCDF
# Variant 1 (with File)
# Load Data
myFile <- "CDF_WaterTemp_2014_MA.csv"
myDir.input <- file.path(path.package("ContDataQC"),"extdata") # example file from ContDataQC library files
myDir.output <- getwd()
# X Label
myXlab <- "Temperature, Water (deg C)"
# Run the Function
CompSiteCDF(file.input=myFile, dir.input=myDir.input, dir.output=myDir.output, ParamName.xlab=myXlab)
library(ContDataQC)
?CompSiteCDF
# Variant 2 (with Data Frame)
# Load Data
myDF <- data_CompSiteCDF
# X Label
myXlab <- "Temperature, Water (deg C)"
# Run the Function (output will default to working directory)
CompSiteCDF(ParamName.xlab=myXlab, df.input=myDF )
library(ContDataQC)
knitr::kable(head(data_CompSiteCDF))
# Load Data
myDF <- data_CompSiteCDF
# X Label
myXlab <- "Temperature, Water (deg C)"
# get code from function
data.import <- myDF
# Site Names (Columns)
Col.Sites <- names(data.import)[!(names(data.import) %in% ContData.env$myName.Date)]
# Load Data
myDF <- data_CompSiteCDF
# X Label
myXlab <- "Temperature, Water (deg C)"
# get code from function
data.import <- myDF
# Site Names (Columns)
Col.Sites <- names(data.import)[!(names(data.import) %in% ContData.env$myName.Date)]
# Load Data
myDF <- data_CompSiteCDF
# X Label
myXlab <- "Temperature, Water (deg C)"
# get code from function
data.import <- myDF
# Site Names (Columns)
Col.Sites <- names(data.import)[!(names(data.import) %in% "Date")]
#
# Add columns for time periods
# add Year, Month, Season, YearSeason (names are in config.R)
# assume Date is POSIXct
#
# add time period fields
data.import[,"Year"]   <- format(as.Date(data.import[,"Date"]),format="%Y")
data.import[,"Month"]   <- format(as.Date(data.import[,"Date"]),format="%m")
data.import[,"YearMonth"] <- format(as.Date(data.import[,"Date"]),format="%Y%m")
data.import[,"MonthDay"] <- format(as.Date(data.import[,"Date"]),format="%m%d")
# ## add Season fields
data.import[,"Season"] <- NA
data.import["Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0101") & as.numeric(data.import[,"MonthDay"])<as.numeric("0301")] <- "Winter"
# Load Data
myDF <- data_CompSiteCDF
# X Label
myXlab <- "Temperature, Water (deg C)"
# get code from function
data.import <- myDF
# Site Names (Columns)
Col.Sites <- names(data.import)[!(names(data.import) %in% "Date")]
#
# Add columns for time periods
# add Year, Month, Season, YearSeason (names are in config.R)
# assume Date is POSIXct
#
# add time period fields
data.import[,"Year"]   <- format(as.Date(data.import[,"Date"]),format="%Y")
data.import[,"Month"]   <- format(as.Date(data.import[,"Date"]),format="%m")
data.import[,"YearMonth"] <- format(as.Date(data.import[,"Date"]),format="%Y%m")
data.import[,"MonthDay"] <- format(as.Date(data.import[,"Date"]),format="%m%d")
# Remove bad date records
data.import <- data.import[!is.na(data.import[,"Year"]),]
# ## add Season fields
data.import[,"Season"] <- NA
data.import["Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0101") & as.numeric(data.import[,"MonthDay"])<as.numeric("0301")] <- "Winter"
# Load Data
myDF <- data_CompSiteCDF
# X Label
myXlab <- "Temperature, Water (deg C)"
# get code from function
data.import <- myDF
# Site Names (Columns)
Col.Sites <- names(data.import)[!(names(data.import) %in% "Date")]
#
# Add columns for time periods
# add Year, Month, Season, YearSeason (names are in config.R)
# assume Date is POSIXct
#
# add time period fields
data.import[,"Year"]   <- format(as.Date(data.import[,"Date"]),format="%Y")
data.import[,"Month"]   <- format(as.Date(data.import[,"Date"]),format="%m")
data.import[,"YearMonth"] <- format(as.Date(data.import[,"Date"]),format="%Y%m")
data.import[,"MonthDay"] <- format(as.Date(data.import[,"Date"]),format="%m%d")
# Remove bad date records
data.import <- data.import[!is.na(data.import[,"Year"]),]
# ## add Season fields
data.import[,"Season"] <- NA
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0101") & as.numeric(data.import[,"MonthDay"])<as.numeric("0301")] <- "Winter"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0301") & as.numeric(data.import[,"MonthDay"])<as.numeric("0601")] <- "Spring"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0601") & as.numeric(data.import[,"MonthDay"])<as.numeric("0901")] <- "Summer"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0901") & as.numeric(data.import[,"MonthDay"])<as.numeric(ContData.env$myTimeFrame.Season.Winter.Start)] <- "Fall"
# Load Data
myDF <- data_CompSiteCDF
# X Label
myXlab <- "Temperature, Water (deg C)"
# get code from function
data.import <- myDF
# Site Names (Columns)
Col.Sites <- names(data.import)[!(names(data.import) %in% "Date")]
#
# Add columns for time periods
# add Year, Month, Season, YearSeason (names are in config.R)
# assume Date is POSIXct
#
# add time period fields
data.import[,"Year"]   <- format(as.Date(data.import[,"Date"]),format="%Y")
data.import[,"Month"]   <- format(as.Date(data.import[,"Date"]),format="%m")
data.import[,"YearMonth"] <- format(as.Date(data.import[,"Date"]),format="%Y%m")
data.import[,"MonthDay"] <- format(as.Date(data.import[,"Date"]),format="%m%d")
# Remove bad date records
data.import <- data.import[!is.na(data.import[,"Year"]),]
# ## add Season fields
data.import[,"Season"] <- NA
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0101") & as.numeric(data.import[,"MonthDay"])<as.numeric("0301")] <- "Winter"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0301") & as.numeric(data.import[,"MonthDay"])<as.numeric("0601")] <- "Spring"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0601") & as.numeric(data.import[,"MonthDay"])<as.numeric("0901")] <- "Summer"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0901") & as.numeric(data.import[,"MonthDay"])<as.numeric("1201")] <- "Fall"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("1201") & as.numeric(data.import[,"MonthDay"])<=as.numeric("1231")] <- "Winter"
data.import[,"YearSeason"] <- paste(data.import[,"Year"],data.import[,"Season"],sep="")
# rectify December as part of winter of year + 1
mySelection <- data.import[,"Month"]=="12"
if(sum(mySelection) != 0){##IF.sum.START
data.import[,"YearSeason"][mySelection] <- paste(as.numeric(data.import[,"Year"])+1,data.import[,"Season"],sep="")
}##IF.sum.END
#
#View(data.import)
#
# Color Blind Palatte
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# The palette with black:
#cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#
myColors <- cbPalette #rainbow(length(Col.Sites))
#
# Season Names
SeasonNames <- c("Fall", "Winter", "Spring","Summer")
#
#~~~~~~~~PLOT CODE~~~~~~~~~~~
CreatePlots <- function(...) {##FUNCTION.CreatePlots.START
# PLOT 1
for (i in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.i <- data.plot[,Col.Sites[i]]
# different first iteration
if (i==1) {##IF.j==1,START
# need ylim
myYlim.max <- 0
for (ii in 1:length(Col.Sites)) {
myYlim.max <- max(hist(data.plot[,Col.Sites[ii]],plot=FALSE)$density, myYlim.max)
}
myYlim <- c(0,myYlim.max)
#
hist(data.plot[,Col.Sites[i]], prob=TRUE, border="white"
,main=myMain, xlab=ParamName.xlab, ylab="Proportion = value"
,ylim=myYlim)
box()
}##IF.j==1.END
# plot lines
lines(density(data.i, na.rm=TRUE), col=myColors[i], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
#
# Plot 2
myLWD <- 1.5
for (j in 1:length(Col.Sites)){##FOR.i.START
if(j==1){##IF.i==1.START
plot(ecdf(data.plot[,Col.Sites[j]]), col=myColors[j], verticals=TRUE, lwd=myLWD, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main=myMain, xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.plot[,Col.Sites[j]]), col=myColors[j], verticals=TRUE, lwd=myLWD, do.p=FALSE, add=T)
}##IF.i==1.END
}##FOR.i.END
legend("bottomright",Col.Sites,fill=myColors)
}##FUNCTION.CreatePlots.END
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# 2 plots per page
par(mfrow=c(2,1))
#
# ALL
myMain <- "All Data"
data.plot <- data.import
CreatePlots()
# Load Data
myDF <- data_CompSiteCDF
# X Label
myXlab <- "Temperature, Water (deg C)"
ParamName.xlab <- myXlab
# get code from function
data.import <- myDF
# Site Names (Columns)
Col.Sites <- names(data.import)[!(names(data.import) %in% "Date")]
#
# Add columns for time periods
# add Year, Month, Season, YearSeason (names are in config.R)
# assume Date is POSIXct
#
# add time period fields
data.import[,"Year"]   <- format(as.Date(data.import[,"Date"]),format="%Y")
data.import[,"Month"]   <- format(as.Date(data.import[,"Date"]),format="%m")
data.import[,"YearMonth"] <- format(as.Date(data.import[,"Date"]),format="%Y%m")
data.import[,"MonthDay"] <- format(as.Date(data.import[,"Date"]),format="%m%d")
# Remove bad date records
data.import <- data.import[!is.na(data.import[,"Year"]),]
# ## add Season fields
data.import[,"Season"] <- NA
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0101") & as.numeric(data.import[,"MonthDay"])<as.numeric("0301")] <- "Winter"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0301") & as.numeric(data.import[,"MonthDay"])<as.numeric("0601")] <- "Spring"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0601") & as.numeric(data.import[,"MonthDay"])<as.numeric("0901")] <- "Summer"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("0901") & as.numeric(data.import[,"MonthDay"])<as.numeric("1201")] <- "Fall"
data.import[,"Season"][as.numeric(data.import[,"MonthDay"])>=as.numeric("1201") & as.numeric(data.import[,"MonthDay"])<=as.numeric("1231")] <- "Winter"
data.import[,"YearSeason"] <- paste(data.import[,"Year"],data.import[,"Season"],sep="")
# rectify December as part of winter of year + 1
mySelection <- data.import[,"Month"]=="12"
if(sum(mySelection) != 0){##IF.sum.START
data.import[,"YearSeason"][mySelection] <- paste(as.numeric(data.import[,"Year"])+1,data.import[,"Season"],sep="")
}##IF.sum.END
#
#View(data.import)
#
# Color Blind Palatte
# http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# The palette with black:
#cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#
myColors <- cbPalette #rainbow(length(Col.Sites))
#
# Season Names
SeasonNames <- c("Fall", "Winter", "Spring","Summer")
#
#~~~~~~~~PLOT CODE~~~~~~~~~~~
CreatePlots <- function(...) {##FUNCTION.CreatePlots.START
# PLOT 1
for (i in 1:length(Col.Sites)){##FOR.j.START
# subset out NA
data.i <- data.plot[,Col.Sites[i]]
# different first iteration
if (i==1) {##IF.j==1,START
# need ylim
myYlim.max <- 0
for (ii in 1:length(Col.Sites)) {
myYlim.max <- max(hist(data.plot[,Col.Sites[ii]],plot=FALSE)$density, myYlim.max)
}
myYlim <- c(0,myYlim.max)
#
hist(data.plot[,Col.Sites[i]], prob=TRUE, border="white"
,main=myMain, xlab=ParamName.xlab, ylab="Proportion = value"
,ylim=myYlim)
box()
}##IF.j==1.END
# plot lines
lines(density(data.i, na.rm=TRUE), col=myColors[i], lwd=2)
}##FOR.j.END
legend("topright",Col.Sites,fill=myColors)
#
# Plot 2
myLWD <- 1.5
for (j in 1:length(Col.Sites)){##FOR.i.START
if(j==1){##IF.i==1.START
plot(ecdf(data.plot[,Col.Sites[j]]), col=myColors[j], verticals=TRUE, lwd=myLWD, do.p=FALSE #pch=19, cex=.75 #do.p=FALSE
#, col.01line="white"
, main=myMain, xlab=ParamName.xlab, ylab="Proportion <= value" )
} else {
plot(ecdf(data.plot[,Col.Sites[j]]), col=myColors[j], verticals=TRUE, lwd=myLWD, do.p=FALSE, add=T)
}##IF.i==1.END
}##FOR.i.END
legend("bottomright",Col.Sites,fill=myColors)
}##FUNCTION.CreatePlots.END
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# 2 plots per page
par(mfrow=c(2,1))
#
# ALL
myMain <- "All Data"
data.plot <- data.import
CreatePlots()
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[1],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile),file.path(getwd(),Selection.SUB[1],myFile))
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Get Gage Data
myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "01187300" # Hubbard River near West Hartland, CT
myData.Type         <- "Gage" #Selection.Type[4]
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- ""
myDir.export <- file.path(myDir.BASE,Selection.SUB[1])
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
?ContDataQC
# Examples of each operation
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[1]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[1]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Summary Stats
myData.Operation <- "SummaryStats" #Selection.Operation[4]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
myDir.export <- file.path(myDir.BASE,Selection.SUB[4]) #"Data4_Stats"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
library(knitr)
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[1]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# Summary Stats
myData.Operation <- "SummaryStats" #Selection.Operation[4]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
myDir.export <- file.path(myDir.BASE,Selection.SUB[4]) #"Data4_Stats"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start, myData.DateRange.End, myDir.import, myDir.export)
# 1.2. Use ContDataQC SummaryStats Data
myFile <- "STATS_test2_Aw_20130101_20141231_Water.Temp.C.csv"
myDir <- "Data4_Stats"
myData <- read.csv(file.path(path.package("ContDataQC"),"extdata",myFile), stringsAsFactors=FALSE)
# 1.2. Use ContDataQC SummaryStats Data
myFile <- "STATS_test2_Aw_20130101_20141231_Water.Temp.C.csv"
myDir <- "Data4_Stats"
myData <- read.csv(file.path(path.package("ContDataQC"),"extdata",myFile), stringsAsFactors=FALSE)
# Subset
Col.Keep <- c("SiteID", "TimeValue", "max", "min", "mean")
sitedata <- myData[myData[,"TimeFrame"]=="day",Col.Keep]
Names.ST <- c("SiteID", "Date", "MaxT", "MinT", "MeanT")
names(sitedata) <- Names.ST
# Convert date column to date type
sitedata[,"Date"] <- as.Date(sitedata[,"Date"])
knitr::kable(head(sitedata))
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
library(ContDataQC)
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
