myConfig            <- file.path(getwd(), "config_Test_JG.R")
#
ContDataQC(fun.myData.Operation=myData.Operation
, fun.myData.SiteID=myData.SiteID
, fun.myData.Type=myData.Type
, fun.myData.DateRange.Start=myData.DateRange.Start
, fun.myData.DateRange.End=myData.DateRange.End
, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export
, fun.myConfig=myConfig
, fun.myReport.format=myReport.format)
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "BOO"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2017-09-07"
myData.DateRange.End    <- "2018-05-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "html"
#
myConfig            <- file.path(getwd(), "config_Test_JG.R")
#
ContDataQC(fun.myData.Operation=myData.Operation
, fun.myData.SiteID=myData.SiteID
, fun.myData.Type=myData.Type
, fun.myData.DateRange.Start=myData.DateRange.Start
, fun.myData.DateRange.End=myData.DateRange.End
, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export
, fun.myConfig=myConfig
, fun.myReport.format=myReport.format)
library(ContDataQC)
?Config.Out
Config.Out(fun.myDir.export = file.path(getwd(), "config")
)
Config.Out(fun.myDir.export = file.path(getwd(), "_test", "config"))
Config.Out(fun.myDir.export = file.path(getwd(), "_test"
, "20190515_Carmignani_Jason" , "config"))
?config.load
source(file.path(getwd(), "inst", "extdata", "config.ORIG.R"))
View(ContData.env)
View(ContData.env)
ContData.env$myUnits.AirBP      <- "kpa"
ContData.env$myUnits.WaterP     <- ContData.env$myUnits.AirBP
ContData.env$myUnits.SensorDepth <- "m"
View(ContData.env)
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190515_Carmignani_Jason/config/Config_Test_JG.R', echo=TRUE)
View(ContData.env)
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190515_Carmignani_Jason/config/Config_Test_JG.R', echo=TRUE)
View(ContData.env)
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190515_Carmignani_Jason/config/Config_Test_JG.R', echo=TRUE)
View(ContData.env)
ContData.env$myName.Discrete.WaterP     <- paste(ContData.env$myPrefix.Discrete,ContData.env$myName.WaterP,sep=".")
ContData.env$myName.Discrete.AirBP      <- paste(ContData.env$myPrefix.Discrete,ContData.env$myName.AirBP,sep=".")
ContData.env$myName.Discrete.SensorDepth <- paste(ContData.env$myPrefix.Discrete,ContData.env$myName.SensorDepth,sep=".")
ContData.env$myPrefix.Discrete
ContData.env$myName.WaterP
View(ContData.env)
source(file.path(getwd(), "inst", "extdata", "config.ORIG.R"))
View(ContData.env)
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190515_Carmignani_Jason/config/Config_Test_JG.R', echo=TRUE)
View(ContData.env)
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test/20190515_Carmignani_Jason/config/Config_Test_JG.R', echo=TRUE)
View(ContData.env)
ContData.env$myName.Flag.AirBP
ContData.env$myName.Discrete.WaterP
ContData.env$myLab.Discrete.WaterP
View(ContData.env)
getwd()
file.path(getwd(), "_test", "20190515_Carmignani_Jason", "Run_QC_HTML.PNG")
file.exists(file.path(getwd(), "_test", "20190515_Carmignani_Jason", "Run_QC_HTML.PNG"))
file.exists(file.path(getwd(), "_test", "20190515_Carmignani_Jason", "Run_QC_DOCX.PNG"))
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "BOO"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2017-09-07"
myData.DateRange.End    <- "2018-05-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "html"
#
myConfig            <- file.path(getwd(), "_test", "20190515_Carmignani_Jason"
, "config", "config_Test_JG.R")
ContDataQC(fun.myData.Operation=myData.Operation
, fun.myData.SiteID=myData.SiteID
, fun.myData.Type=myData.Type
, fun.myData.DateRange.Start=myData.DateRange.Start
, fun.myData.DateRange.End=myData.DateRange.End
, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export
, fun.myConfig=myConfig
, fun.myReport.format=myReport.format)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "BOO"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2017-09-07"
myData.DateRange.End    <- "2018-05-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "html"
#
myConfig            <- file.path(getwd(), "_test", "20190515_Carmignani_Jason"
, "config", "config_Test_JG.R")
#
ContDataQC(fun.myData.Operation=myData.Operation
, fun.myData.SiteID=myData.SiteID
, fun.myData.Type=myData.Type
, fun.myData.DateRange.Start=myData.DateRange.Start
, fun.myData.DateRange.End=myData.DateRange.End
, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export
, fun.myConfig=myConfig
, fun.myReport.format=myReport.format)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "BOO"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2017-09-07"
myData.DateRange.End    <- "2018-05-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "html"
#
myConfig            <- file.path(myDir.BASE, "config", "config_Test_JG.R")
#
ContDataQC(fun.myData.Operation=myData.Operation
, fun.myData.SiteID=myData.SiteID
, fun.myData.Type=myData.Type
, fun.myData.DateRange.Start=myData.DateRange.Start
, fun.myData.DateRange.End=myData.DateRange.End
, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export
, fun.myConfig=myConfig
, fun.myReport.format=myReport.format)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "BOO"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2017-09-07"
myData.DateRange.End    <- "2018-05-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "docx"
#
myConfig            <- file.path(myDir.BASE, "config", "config_Test_JG.R")
#
ContDataQC(fun.myData.Operation=myData.Operation
, fun.myData.SiteID=myData.SiteID
, fun.myData.Type=myData.Type
, fun.myData.DateRange.Start=myData.DateRange.Start
, fun.myData.DateRange.End=myData.DateRange.End
, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export
, fun.myConfig=myConfig
, fun.myReport.format=myReport.format)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "BOO"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2017-09-07"
myData.DateRange.End    <- "2018-05-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "html"
#
myConfig            <- file.path(myDir.BASE, "config", "config_Test_JG.R")
#
ContDataQC(fun.myData.Operation=myData.Operation
, fun.myData.SiteID=myData.SiteID
, fun.myData.Type=myData.Type
, fun.myData.DateRange.Start=myData.DateRange.Start
, fun.myData.DateRange.End=myData.DateRange.End
, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export
, fun.myConfig=myConfig
, fun.myReport.format=myReport.format)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "BOO"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2017-09-07"
myData.DateRange.End    <- "2018-05-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "docx"
#
myConfig            <- file.path(myDir.BASE, "config", "config_Test_JG.R")
#
ContDataQC(fun.myData.Operation=myData.Operation
, fun.myData.SiteID=myData.SiteID
, fun.myData.Type=myData.Type
, fun.myData.DateRange.Start=myData.DateRange.Start
, fun.myData.DateRange.End=myData.DateRange.End
, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export
, fun.myConfig=myConfig
, fun.myReport.format=myReport.format)
file.path(getwd(), "_test", "20190515_Carmignani_Jason", "Run_QC_HTML.PNG")
getwd()
?include_Graphics
??include_graphics
list.files(file.path(myDir.BASE), pattern = ".png", full.names = TRUE)
list.files(myDir.BASE)
list.files(myDir.BASE, pattern=".png")
list.files(myDir.BASE, pattern=".PNG")
list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
myimages<-list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
knitr::include_graphics(myimages)
?sessionInfo
library(sessioninfo)
session_info()
sessionInfo()
library(ContDataQC)
library(sessioninfo)
session_info()
# Set wd to main folder (up one from current)
#knitr::opts_knit$set(root.dir = normalizePath(".."))
# Packages
library(ContDataQC)
library(sessioninfo)
# Session Info
session_info()
library(devtools)
Sys.setenv("TAR" = "internal") # needed for R 3.6.0 for devtools to work properly
install_github("leppott/ContDataQC", force=TRUE, build_vignettes=TRUE)
# Packages
library(DT)
# Load
fn_JG_data <- "BOO_AW_20170907_20180531.csv"
df_JG <- read.csv(fn_JG_data, stringsAsFactors = FALSE)
# Show data
## Use DT so can see in Notebook.
DT::datatable(df_JG
, caption = "Original data file."
, filter = "top")
str(df_JG)
names(df_JG)
summary(df_JG)
getwd()
# Packages
library(DT)
# Load
fn_JG_data <- "BOO_AW_20170907_20180531.csv"
df_JG <- read.csv(fn_JG_data, stringsAsFactors = FALSE)
# Show data
## Use DT so can see in Notebook.
DT::datatable(df_JG
, caption = "Original data file."
, filter = "top")
str(df_JG)
names(df_JG)
summary(df_JG)
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
knitr::include_graphics(myimages)
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
knitr::include_graphics(myimages)
list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
knitr::include_graphics(myimages)
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
knitr::include_graphics(myimages)
list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
myimages
file.exists(myimages)
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
knitr::include_graphics(myimages)
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
knitr::include_graphics(myimages)
file.exists(Run_QC_DOCX.PNG)
file.exists(list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE))
myDir.BASE
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
myimages
file.exists(myimages)
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
knitr::include_graphics(myimages)
getwd()
?include_graphics
# Packages
library(knitr)
# images
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
include_graphics(myimages)
# Packages
library(knitr)
# images
myDir.BASE <- file.path("_test", "20190515_Carmignani_Jason")
myimages <- list.files(myDir.BASE, pattern = ".PNG", full.names = TRUE)
include_graphics(myimages)
# Packages
library(knitr)
# images
myimages <- list.files(getwd(), pattern = ".PNG", full.names = TRUE)
include_graphics(myimages)
library(ContDataQC)
help(package="ContDataQC")
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
getwd()
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test")
myDir.BASE <- getwd()
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[2],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile)
,file.path(getwd(),Selection.SUB[2],myFile))
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "docx"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
myReport.format <- "html"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
# Packages
library(ContDataQC)
library(sessioninfo)
# Session Info
session_info()
# Packages
library(DT)
# Load
fn_JG_data <- "BOO_AW_20170907_20180531.csv"
df_JG <- read.csv(fn_JG_data, stringsAsFactors = FALSE)
# Show data
## Use DT so can see in Notebook.
DT::datatable(df_JG
, caption = "Original data file."
, filter = "top")
str(df_JG)
names(df_JG)
summary(df_JG)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- file.path(getwd(), "_test", "20190515_Carmignani_Jason")
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "BOO"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2017-09-07"
myData.DateRange.End    <- "2018-05-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "html"
#
myConfig            <- file.path(myDir.BASE, "config", "config_Test_JG.R")
#
ContDataQC(fun.myData.Operation=myData.Operation
, fun.myData.SiteID=myData.SiteID
, fun.myData.Type=myData.Type
, fun.myData.DateRange.Start=myData.DateRange.Start
, fun.myData.DateRange.End=myData.DateRange.End
, fun.myDir.import=myDir.import
, fun.myDir.export=myDir.export
, fun.myConfig=myConfig
, fun.myReport.format=myReport.format)
# generate Vignette
library(ContDataQC)
library(devtools)
devtools::build_vignettes()
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dir_base <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(file.path(dir_base, myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary, build_vignettes = TRUE, quick = FALSE, reload = TRUE)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(file.path(dir_base, myLibrary))
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dir_base <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(file.path(dir_base, myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary, build_vignettes = TRUE, quick = FALSE, reload = TRUE)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(file.path(dir_base, myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dir_base <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(file.path(dir_base, myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary, build_vignettes = TRUE, quick = FALSE, reload = TRUE)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(file.path(dir_base, myLibrary))
