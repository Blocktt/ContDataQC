if(!is.na(mySeed)) set.seed(mySeed)  #use seed if provided.
ranvec<-runif(n=nbug);
#sort the expanded sample randomly;
samp.ex2<-samp.expand[order(ranvec)];
#keep only the first piece of ranvec, of the desired fised count size;
#if there are fewer bugs than the fixed count size, keep them all;
if(nbug>subsiz){subsamp<-samp.ex2[1:subsiz]} else{subsamp<-samp.ex2};
#tabulate bugs in subsample;
subcnt<-table(subsamp);
#define new subsample frame and fill it with new reduced counts;
newsamp<-onesamp;
newsamp[,abund]<-0;
newsamp[match(newsamp$row.id,names(subcnt),nomatch=0)>0,abund]<-as.vector(subcnt);
outbug[outbug[,sample.ID]==isamp,abund]<-newsamp[,abund];
}; #end of sample loop;
elaps<-proc.time()-start.time;
cat(c("Rarify of samples complete. \n Number of samples = ",nsamp,"\n"))
cat(c("Execution time (sec) = ", elaps[1]))
flush.console()
return(outbug) #return subsampled data set as function value;
} #end of function; ##FUNCTION.rarify.END
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
?round
rarify<-function(inbug, sample.ID, abund, subsiz, mySeed=NA){##FUNCTION.rarify.START
start.time=proc.time();
outbug<-inbug;
sampid<-unique(inbug[,sample.ID]);
nsamp<-length(sampid);
#parameters are set up;
#zero out all abundances in output data set;
outbug[,abund]<-0;
#loop over samples, rarify each one in turn;
for(i in 1:nsamp) { ;
#extract current sample;
isamp<-sampid[i];
flush.console();
#print(as.character(isamp));
onesamp<-inbug[inbug[,sample.ID]==isamp,];
onesamp<-data.frame(onesamp,row.id=seq(1,dim(onesamp)[[1]])); #add sequence numbers as a new column;
#expand the sample into a vector of individuals;
samp.expand<-rep(x=onesamp$row.id,times=onesamp[,abund]);
nbug<-length(samp.expand); #number of bugs in sample;
#vector of uniform random numbers;
if(!is.na(mySeed)) set.seed(mySeed)  #use seed if provided.
ranvec<-runif(n=nbug);
#sort the expanded sample randomly;
samp.ex2<-samp.expand[order(ranvec)];
#keep only the first piece of ranvec, of the desired fised count size;
#if there are fewer bugs than the fixed count size, keep them all;
if(nbug>subsiz){subsamp<-samp.ex2[1:subsiz]} else{subsamp<-samp.ex2};
#tabulate bugs in subsample;
subcnt<-table(subsamp);
#define new subsample frame and fill it with new reduced counts;
newsamp<-onesamp;
newsamp[,abund]<-0;
newsamp[match(newsamp$row.id,names(subcnt),nomatch=0)>0,abund]<-as.vector(subcnt);
outbug[outbug[,sample.ID]==isamp,abund]<-newsamp[,abund];
}; #end of sample loop;
elaps<-proc.time()-start.time;
cat(c("Rarify of samples complete. \n Number of samples = ",nsamp,"\n"))
cat(c(" Execution time (sec) = ", elaps[1]))
flush.console()
return(outbug) #return subsampled data set as function value;
} #end of function; ##FUNCTION.rarify.END
?round
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
rarify<-function(inbug, sample.ID, abund, subsiz, mySeed=NA){##FUNCTION.rarify.START
start.time=proc.time();
outbug<-inbug;
sampid<-unique(inbug[,sample.ID]);
nsamp<-length(sampid);
#parameters are set up;
#zero out all abundances in output data set;
outbug[,abund]<-0;
#loop over samples, rarify each one in turn;
for(i in 1:nsamp) { ;
#extract current sample;
isamp<-sampid[i];
flush.console();
#print(as.character(isamp));
onesamp<-inbug[inbug[,sample.ID]==isamp,];
onesamp<-data.frame(onesamp,row.id=seq(1,dim(onesamp)[[1]])); #add sequence numbers as a new column;
#expand the sample into a vector of individuals;
samp.expand<-rep(x=onesamp$row.id,times=onesamp[,abund]);
nbug<-length(samp.expand); #number of bugs in sample;
#vector of uniform random numbers;
if(!is.na(mySeed)) set.seed(mySeed)  #use seed if provided.
ranvec<-runif(n=nbug);
#sort the expanded sample randomly;
samp.ex2<-samp.expand[order(ranvec)];
#keep only the first piece of ranvec, of the desired fised count size;
#if there are fewer bugs than the fixed count size, keep them all;
if(nbug>subsiz){subsamp<-samp.ex2[1:subsiz]} else{subsamp<-samp.ex2};
#tabulate bugs in subsample;
subcnt<-table(subsamp);
#define new subsample frame and fill it with new reduced counts;
newsamp<-onesamp;
newsamp[,abund]<-0;
newsamp[match(newsamp$row.id,names(subcnt),nomatch=0)>0,abund]<-as.vector(subcnt);
outbug[outbug[,sample.ID]==isamp,abund]<-newsamp[,abund];
}; #end of sample loop;
elaps<-proc.time()-start.time;
cat(c("Rarify of samples complete. \n Number of samples = ",nsamp,"\n"))
cat(c(" Execution time (sec) = ", round(elaps[1],2)))
flush.console()
return(outbug) #return subsampled data set as function value;
} #end of function; ##FUNCTION.rarify.END
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
rarify<-function(inbug, sample.ID, abund, subsiz, mySeed=NA){##FUNCTION.rarify.START
start.time=proc.time();
outbug<-inbug;
sampid<-unique(inbug[,sample.ID]);
nsamp<-length(sampid);
#parameters are set up;
#zero out all abundances in output data set;
outbug[,abund]<-0;
#loop over samples, rarify each one in turn;
for(i in 1:nsamp) { ;
#extract current sample;
isamp<-sampid[i];
flush.console();
#print(as.character(isamp));
onesamp<-inbug[inbug[,sample.ID]==isamp,];
onesamp<-data.frame(onesamp,row.id=seq(1,dim(onesamp)[[1]])); #add sequence numbers as a new column;
#expand the sample into a vector of individuals;
samp.expand<-rep(x=onesamp$row.id,times=onesamp[,abund]);
nbug<-length(samp.expand); #number of bugs in sample;
#vector of uniform random numbers;
if(!is.na(mySeed)) set.seed(mySeed)  #use seed if provided.
ranvec<-runif(n=nbug);
#sort the expanded sample randomly;
samp.ex2<-samp.expand[order(ranvec)];
#keep only the first piece of ranvec, of the desired fised count size;
#if there are fewer bugs than the fixed count size, keep them all;
if(nbug>subsiz){subsamp<-samp.ex2[1:subsiz]} else{subsamp<-samp.ex2};
#tabulate bugs in subsample;
subcnt<-table(subsamp);
#define new subsample frame and fill it with new reduced counts;
newsamp<-onesamp;
newsamp[,abund]<-0;
newsamp[match(newsamp$row.id,names(subcnt),nomatch=0)>0,abund]<-as.vector(subcnt);
outbug[outbug[,sample.ID]==isamp,abund]<-newsamp[,abund];
}; #end of sample loop;
elaps<-proc.time()-start.time;
cat(c("Rarify of samples complete. \n Number of samples = ",nsamp,"\n"))
cat(c(" Execution time (sec) = ", elaps[1]))
flush.console()
return(outbug) #return subsampled data set as function value;
} #end of function; ##FUNCTION.rarify.END
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
rarify<-function(inbug, sample.ID, abund, subsiz, mySeed=NA){##FUNCTION.rarify.START
start.time=proc.time();
outbug<-inbug;
sampid<-unique(inbug[,sample.ID]);
nsamp<-length(sampid);
#parameters are set up;
#zero out all abundances in output data set;
outbug[,abund]<-0;
#loop over samples, rarify each one in turn;
for(i in 1:nsamp) { ;
#extract current sample;
isamp<-sampid[i];
flush.console();
#print(as.character(isamp));
onesamp<-inbug[inbug[,sample.ID]==isamp,];
onesamp<-data.frame(onesamp,row.id=seq(1,dim(onesamp)[[1]])); #add sequence numbers as a new column;
#expand the sample into a vector of individuals;
samp.expand<-rep(x=onesamp$row.id,times=onesamp[,abund]);
nbug<-length(samp.expand); #number of bugs in sample;
#vector of uniform random numbers;
if(!is.na(mySeed)) set.seed(mySeed)  #use seed if provided.
ranvec<-runif(n=nbug);
#sort the expanded sample randomly;
samp.ex2<-samp.expand[order(ranvec)];
#keep only the first piece of ranvec, of the desired fised count size;
#if there are fewer bugs than the fixed count size, keep them all;
if(nbug>subsiz){subsamp<-samp.ex2[1:subsiz]} else{subsamp<-samp.ex2};
#tabulate bugs in subsample;
subcnt<-table(subsamp);
#define new subsample frame and fill it with new reduced counts;
newsamp<-onesamp;
newsamp[,abund]<-0;
newsamp[match(newsamp$row.id,names(subcnt),nomatch=0)>0,abund]<-as.vector(subcnt);
outbug[outbug[,sample.ID]==isamp,abund]<-newsamp[,abund];
}; #end of sample loop;
elaps<-proc.time()-start.time;
cat(c("Rarify of samples complete. \n Number of samples = ",nsamp,"\n"))
cat(c(" Execution time (sec) = ", elaps[1]))
flush.console()
return(outbug) #return subsampled data set as function value;
} #end of function; ##FUNCTION.rarify.END
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
table(data_bio2rarify)
str(data_bio2rarify)
session
sessionInfo()
?rarify
??rarify
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ContDataQC)
?rarify
# load bio data
DF.biodata <- data_bio2rarify
dim(DF.biodata)
View(DF.biodata)
# subsample
mySize <- 200
Seed.MS <- 18171210
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
dim(bugs.mysize)
View(bugs.mysize)
load("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/data/data_bio2rarify.rda")
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
?rarify
# load bio data
DF.biodata <- data_bio2rarify
dim(DF.biodata)
View(DF.biodata)
# subsample
mySize <- 200
Seed.MS <- 18171210
bugs.mysize <- rarify(inbug=DF.biodata, sample.ID="SampRep",abund="Count",subsiz=mySize, mySeed=Seed.MS)
dim(bugs.mysize)
View(bugs.mysize)
# save the data
write.table(bugs.mysize,paste("bugs",mySize,"txt",sep="."),sep="\t")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ContDataQC)
??ContDataQC
?fun.Export.IHA
# 1.  Get Gage Data
#
# 1.A. Use ContDataQC and Save (~1min for download)
myData.Operation    <- "GetGageData" #Selection.Operation[1]
myData.SiteID       <- "01187300" # Hubbard River near West Hartland, CT
myData.Type         <- "Gage"
myData.DateRange.Start  <- "2015-01-01"
myData.DateRange.End    <- "2016-12-31"
myDir.import <- getwd()
myDir.export <- getwd()
ContDataQC(myData.Operation, myData.SiteID, myData.Type
, myData.DateRange.Start, myData.DateRange.End
, myDir.import, myDir.export)
#
# 1.B. Use saved data
myFile <- "01187300_Gage_20150101_20161231.csv"
myCol.DateTime="Date.Time"
myCol.Discharge <- "Discharge.ft3.s"
#
# 2. Prep Data
myData.IHA <- fun.Export.IHA(myFile
, fun.myCol.DateTime = myCol.DateTime
, fun.myCol.Parameter = myCol.Discharge
)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3. Run IHA
# Example using returned DF with IHA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User info
SiteID <- myData.SiteID
Notes.User <- "Erik.Leppo@tetratech.com"
#~~~~~
# Library (install if needed)
# devtools::install_github("jasonelaw/IHA")
# install.packages("XLConnect")
# Library (load)
require(IHA)
require(XLConnect)
#~~~~~
# IHA
myYr <- "calendar" # "water" or "calendar"
# IHA Metrics
## IHA parameters group 1; Magnitude of monthly water conditions
Analysis.Group.1 <- group1(myData.IHA, year=myYr)
## IHA parameters group 2: Magnitude of monthly water condition and include 12 parameters
Analysis.Group.2 <- group2(myData.IHA, year=myYr)
Analysis.Group.3 <- group3(myData.IHA, year=myYr)
## IHA parameters group 4; Frequency and duration of high and low pulses
# defaults to 25th and 75th percentiles
Analysis.Group.4 <- group4(myData.IHA, year=myYr)
## IHA parameters group 5; Rate and frequency of water condition changes
Analysis.Group.5 <- group5(myData.IHA, year=myYr)
#~~~~~
# Save Results to Excel (each group on its own worksheet)
Group.Desc <- c("Magnitude of monthly water conditions"
,"Magnitude of monthly water condition and include 12 parameters"
,"Timing of annual extreme water conditions"
,"Frequency and duration of high and low pulses"
,"Rate and frequency of water condition changes")
df.Groups <- as.data.frame(cbind(paste0("Group",1:5),Group.Desc))
#
myDate <- format(Sys.Date(),"%Y%m%d")
myTime <- format(Sys.time(),"%H%M%S")
# Notes section (add min/max dates)
Notes.Names <- c("Dataset (SiteID)","IHA.Year","Analysis.Date (YYYYMMDD)","Analysis.Time (HHMMSS)","Analysis.User")
Notes.Data <- c(SiteID, myYr, myDate, myTime, Notes.User)
df.Notes <- as.data.frame(cbind(Notes.Names,Notes.Data))
Notes.Summary <- summary(myData.IHA)
# Open/Create file
myFile.XLSX <- paste("IHA", SiteID, myYr, myDate, myTime, "xlsx", sep=".")
wb <- loadWorkbook(myFile.XLSX, create = TRUE) # load workbook, create if not existing
# create sheets
createSheet(wb, name = "NOTES")
createSheet(wb, name = "Group1")
createSheet(wb, name = "Group2")
createSheet(wb, name = "Group3")
createSheet(wb, name = "Group4")
createSheet(wb, name = "Group5")
# write to worksheet
writeWorksheet(wb, df.Notes, sheet = "NOTES", startRow=1)
writeWorksheet(wb, Notes.Summary, sheet = "NOTES", startRow=10)
writeWorksheet(wb, df.Groups, sheet="NOTES", startRow=25)
writeWorksheet(wb, Analysis.Group.1, sheet = "Group1")
writeWorksheet(wb, Analysis.Group.2, sheet = "Group2")
writeWorksheet(wb, Analysis.Group.3, sheet = "Group3")
writeWorksheet(wb, Analysis.Group.4, sheet = "Group4")
writeWorksheet(wb, Analysis.Group.5, sheet = "Group5")
# save workbook
saveWorkbook(wb, myFile.XLSX)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(devtools)
install_github('StreamThermal','tsangyp')
install_github("tsangyp/StreamThermal")
library(StreamThermal)
?streamthermal
??streamthermal
?StreamThermal
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ContDataQC)
??ContDataQC
# Library Name
myLibrary <- "ContDataQC" # "ContDataQC","MMIcalc","MMIcalcNV","MBSStools","XC95"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# files to library folder
# file.copy("metric.values.R","./Library/MMIcalc/R/metric.values.R",overwrite=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ContDataQC)
??ContDataQC
