## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
#
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
myReport.format <- "docx"
#
# set config file with RMD directory as getwd()
myConfig            <- file.path(getwd(),Selection.SUB[2],"config.RMDdir.R")
# run function
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format, fun.myConfig = myConfig)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
#
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
myReport.format <- "docx"
#
# set config file with RMD directory as getwd()
myConfig            <- file.path(getwd(),Selection.SUB[2],"config.RMDdir.R")
# run function
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format, fun.myConfig = myConfig)
?ContDataQC
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
#Leave off myReport.format and get default (docx).
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export)
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
library(ContDataQC)
help(package="ContDataQC")
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/inst/extdata")
library(ContDataQC)
library(DataExplorer)
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/NCEA_RMN/DataExplorer")
?ContDataQC
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[1],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[1],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile)
,file.path(getwd(),Selection.SUB[1],myFile))
?DataExplorer
?PeriodStats
# Load File to use for PeriodStats
myDir <- getwd()
myFile <- "DATA_period_test2_Aw_20130101_20141231.csv"
df.x <- read.csv(file.path(myDir, myFile))
# function inputs
myDate <- "2013-09-30"
myDate.Format <- "%Y-%m-%d"
myPeriod.N <- c(30, 60, 90, 120, 1)
myPeriod.Units <- c("d", "d", "d", "d", "y")
myFile <- "DATA_period_test2_Aw_20130101_20141231.csv"
myDir.import <- getwd()
myDir.export <- getwd()
myParam.Name <- "Water.Temp.C"
myDateTime.Name <- "Date.Time"
myDateTime.Format <- "%Y-%m-%d %H:%M:%S"
myThreshold <- 20
myConfig <- ""
myReport.format <- "docx"
# Custom Config
myConfig.Fail.Include  <- "config.ExcludeFailsFalse.R"
# Run Function
## Example 1. default report format (html)
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Save example files from Package to use for example
## This step not needed for users working on their own files
df.x <- DATA_period_test2_Aw_20130101_20141231
write.csv(df.x,"DATA_period_test2_Aw_20130101_20141231.csv")
myFile <- "config.ExcludeFailsFalse.R"
file.copy(file.path(path.package("ContDataQC"), "extdata", myFile)
, file.path(getwd(), myFile))
#~~~~~~~~~~~~~~~~~
# Load File to use for PeriodStats
myDir <- getwd()
myFile <- "DATA_period_test2_Aw_20130101_20141231.csv"
df.x <- read.csv(file.path(myDir, myFile))
# function inputs
myDate <- "2013-09-30"
myDate.Format <- "%Y-%m-%d"
myPeriod.N <- c(30, 60, 90, 120, 1)
myPeriod.Units <- c("d", "d", "d", "d", "y")
myFile <- "DATA_period_test2_Aw_20130101_20141231.csv"
myDir.import <- getwd()
myDir.export <- getwd()
myParam.Name <- "Water.Temp.C"
myDateTime.Name <- "Date.Time"
myDateTime.Format <- "%Y-%m-%d %H:%M:%S"
myThreshold <- 20
myConfig <- ""
myReport.format <- "docx"
# Custom Config
myConfig.Fail.Include  <- "config.ExcludeFailsFalse.R"
# Run Function
## Example 1. default report format (html)
PeriodStats(myDate
, myDate.Format
, myPeriod.N
, myPeriod.Units
, myFile
, myDir.import
, myDir.export
, myParam.Name
, myDateTime.Name
, myDateTime.Format
, myThreshold
, myConfig)
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[1]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myReport.format <- "html"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
#Leave off myReport.format and get default (html).
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export)
# Summary Stats
myData.Operation <- "SummaryStats" #Selection.Operation[4]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[3]) #"Data3_Aggregated"
myDir.export <- file.path(myDir.BASE,Selection.SUB[4]) #"Data4_Stats"
#Leave off myReport.format and get default (html).
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export)
myReport.Name <- "DE_Report_QC"
fun.myReport.Dir <- "./rmd"
fun.myReport.format <- "html"
data.import <- read.csv("./Data2_QC/QC_test2_Aw_20130426_20130725.csv")
strFile.RMD <- file.path(fun.myReport.Dir, paste0(myReport.Name, "_", fun.myReport.format, ".rmd"))
strFile.out.ext <- paste0(".", fun.myReport.format) #".docx" # ".html"
strFile.out <- paste(paste(strFile.Prefix, strFile.SiteID, fun.myData.Type
, strFile.Date.Start
, strFile.Date.End
, myReport.Name
, sep=ContData.env$myDelim)
, strFile.out.ext,sep="")
myReport.Name <- "DE_Report_QC"
fun.myReport.Dir <- "./rmd"
fun.myReport.format <- "html"
strFile.Prefix <- "QC"
data.import <- read.csv("./Data2_QC/QC_test2_Aw_20130426_20130725.csv")
strFile.RMD <- file.path(fun.myReport.Dir, paste0(myReport.Name, "_", fun.myReport.format, ".rmd"))
strFile.out.ext <- paste0(".", fun.myReport.format) #".docx" # ".html"
strFile.out <- paste(paste(strFile.Prefix, strFile.SiteID, fun.myData.Type
, strFile.Date.Start
, strFile.Date.End
, myReport.Name
, sep=ContData.env$myDelim)
, strFile.out.ext,sep="")
myReport.Name <- "DE_Report_QC"
fun.myReport.Dir <- "./rmd"
fun.myReport.format <- "html"
strFile.Prefix <- "QC"
strFile.SiteID <- "test2"
data.import <- read.csv("./Data2_QC/QC_test2_Aw_20130426_20130725.csv")
strFile.RMD <- file.path(fun.myReport.Dir, paste0(myReport.Name, "_", fun.myReport.format, ".rmd"))
strFile.out.ext <- paste0(".", fun.myReport.format) #".docx" # ".html"
strFile.out <- paste(paste(strFile.Prefix, strFile.SiteID, fun.myData.Type
, strFile.Date.Start
, strFile.Date.End
, myReport.Name
, sep=ContData.env$myDelim)
, strFile.out.ext,sep="")
myReport.Name <- "DE_Report_QC"
fun.myReport.Dir <- "./rmd"
fun.myReport.format <- "html"
strFile.Prefix <- "QC"
strFile.SiteID <- "test2"
fun.myData.Type <- "Aw"
data.import <- read.csv("./Data2_QC/QC_test2_Aw_20130426_20130725.csv")
strFile.RMD <- file.path(fun.myReport.Dir, paste0(myReport.Name, "_", fun.myReport.format, ".rmd"))
strFile.out.ext <- paste0(".", fun.myReport.format) #".docx" # ".html"
strFile.out <- paste(paste(strFile.Prefix, strFile.SiteID, fun.myData.Type
, strFile.Date.Start
, strFile.Date.End
, myReport.Name
, sep=ContData.env$myDelim)
, strFile.out.ext,sep="")
myReport.Name <- "DE_Report_QC"
fun.myReport.Dir <- "./rmd"
fun.myReport.format <- "html"
strFile.Prefix <- "QC"
strFile.SiteID <- "test2"
fun.myData.Type <- "Aw"
strFile.Date.Start <- "20130426"
data.import <- read.csv("./Data2_QC/QC_test2_Aw_20130426_20130725.csv")
strFile.RMD <- file.path(fun.myReport.Dir, paste0(myReport.Name, "_", fun.myReport.format, ".rmd"))
strFile.out.ext <- paste0(".", fun.myReport.format) #".docx" # ".html"
strFile.out <- paste(paste(strFile.Prefix, strFile.SiteID, fun.myData.Type
, strFile.Date.Start
, strFile.Date.End
, myReport.Name
, sep=ContData.env$myDelim)
, strFile.out.ext,sep="")
#
myReport.Name <- "DE_Report_QC"
fun.myReport.Dir <- "./rmd"
fun.myReport.format <- "html"
strFile.Prefix <- "QC"
strFile.SiteID <- "test2"
fun.myData.Type <- "Aw"
strFile.Date.Start <- "20130426"
strFile.Date.End <- "20130725"
data.import <- read.csv("./Data2_QC/QC_test2_Aw_20130426_20130725.csv")
strFile.RMD <- file.path(fun.myReport.Dir, paste0(myReport.Name, "_", fun.myReport.format, ".rmd"))
strFile.out.ext <- paste0(".", fun.myReport.format) #".docx" # ".html"
strFile.out <- paste(paste(strFile.Prefix, strFile.SiteID, fun.myData.Type
, strFile.Date.Start
, strFile.Date.End
, myReport.Name
, sep=ContData.env$myDelim)
, strFile.out.ext,sep="")
library(ContDataQC)
source(file.path(path.package("ContDataQC"), "config.R")
)
getwd()
dir.ContDataQC <- "C://Users//Erik.Leppo//OneDrive - Tetra Tech, Inc//MyDocs_OneDrive//GitHub//ContDataQC//R"
source(file.path(dir.ContDataQC, "config.R")
)
View(ContData.env)
View(ContData.env)
myReport.Name <- "DE_Report_QC"
fun.myReport.Dir <- "./rmd"
fun.myReport.format <- "html"
strFile.Prefix <- "QC"
strFile.SiteID <- "test2"
fun.myData.Type <- "Aw"
strFile.Date.Start <- "20130426"
strFile.Date.End <- "20130725"
data.import <- read.csv("./Data2_QC/QC_test2_Aw_20130426_20130725.csv")
strFile.RMD <- file.path(fun.myReport.Dir, paste0(myReport.Name, "_", fun.myReport.format, ".rmd"))
strFile.out.ext <- paste0(".", fun.myReport.format) #".docx" # ".html"
strFile.out <- paste(paste(strFile.Prefix, strFile.SiteID, fun.myData.Type
, strFile.Date.Start
, strFile.Date.End
, myReport.Name
, sep=ContData.env$myDelim)
, strFile.out.ext,sep="")
fun.myDir.export <- "./Data2_QC"
strFile.RMD
strFile.out
rmarkdown::render(strFile.RMD, output_file=strFile.out, output_dir=fun.myDir.export, quiet=TRUE)
library(DataExplorer)
data.DE <- data.import
plot_missing(data.DE)
data.DE <- data.import
plot_missing(data.DE)
data.DE <- data.import
plot_missing(data.DE)
data.DE <- data.import
plot_bar(data.DE)
data.DE <- data.import
plot_histogram(data.DE)
data.DE <- data.import
plot_correlation(data.DE, use="pairwise.complete.obs")
data.DE <- data.import
plot_correlation(data.DE, use="pairwise.complete.obs")
data.DE <- data.import
plot_missing(data.DE)
data.DE <- data.import
plot_bar(data.DE)
data.DE <- data.import
plot_histogram(data.DE)
data.DE <- data.import
plot_correlation(data.DE, use="pairwise.complete.obs")
ibrary(DataExplorer)
# Get config.R from ContDataQC
dir.ContDataQC <- "C://Users//Erik.Leppo//OneDrive - Tetra Tech, Inc//MyDocs_OneDrive//GitHub//ContDataQC//R"
source(file.path(dir.ContDataQC, "config.R"))
myReport.Name <- "DE_Report_QC"
fun.myReport.Dir <- "./rmd"
fun.myReport.format <- "html"
strFile.Prefix <- "QC"
strFile.SiteID <- "test2"
fun.myData.Type <- "Aw"
strFile.Date.Start <- "20130426"
strFile.Date.End <- "20130725"
fun.myDir.export <- "./Data2_QC"
data.import <- read.csv("./Data2_QC/QC_test2_Aw_20130426_20130725.csv")
strFile.RMD <- file.path(fun.myReport.Dir, paste0(myReport.Name, "_", fun.myReport.format, ".rmd"))
strFile.out.ext <- paste0(".", fun.myReport.format) #".docx" # ".html"
strFile.out <- paste(paste(strFile.Prefix, strFile.SiteID, fun.myData.Type
, strFile.Date.Start
, strFile.Date.End
, myReport.Name
, sep=ContData.env$myDelim)
, strFile.out.ext,sep="")
rmarkdown::render(strFile.RMD, output_file=strFile.out, output_dir=fun.myDir.export, quiet=TRUE)
myReport.Name <- "DE_Report_QC"
fun.myReport.Dir <- "./rmd"
fun.myReport.format <- "html"
strFile.Prefix <- "QC"
strFile.SiteID <- "test2"
fun.myData.Type <- "Aw"
strFile.Date.Start <- "20130426"
strFile.Date.End <- "20130725"
fun.myDir.export <- "./Data2_QC"
strFile <- "QC_test2_Aw_20130426_20130725.csv"
data.import <- read.csv("./Data2_QC/QC_test2_Aw_20130426_20130725.csv")
strFile.RMD <- file.path(fun.myReport.Dir, paste0(myReport.Name, "_", fun.myReport.format, ".rmd"))
strFile.out.ext <- paste0(".", fun.myReport.format) #".docx" # ".html"
strFile.out <- paste(paste(strFile.Prefix, strFile.SiteID, fun.myData.Type
, strFile.Date.Start
, strFile.Date.End
, myReport.Name
, sep=ContData.env$myDelim)
, strFile.out.ext,sep="")
#
rmarkdown::render(strFile.RMD, output_file=strFile.out, output_dir=fun.myDir.export, quiet=TRUE)
strFile.RMD <- file.path(fun.myReport.Dir, "Report_DEonly.rmd")
strFile.out <- paste(paste(strFile.Prefix
, strFile.SiteID
, fun.myData.Type
, strFile.Date.Start
, strFile.Date.End
, myReport.Name
, sep=ContData.env$myDelim)
, strFile.out.ext,sep="")
#
rmarkdown::render(strFile.RMD, output_file=strFile.out, output_dir=fun.myDir.export, quiet=TRUE)
library(ContDataQC)
?rarify
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
install.packages("zoo")
# Library Name
myLibrary <- "ContDataQC"
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
setwd(paste0("./",myLibrary))
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(paste0("./",myLibrary))
