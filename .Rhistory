#file.remove("NEWS.md")
#
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary
, build_vignettes = TRUE
, quick = FALSE
, reload = TRUE)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(file.path(dir_base, myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set working directory
myLibrary <- "ContDataQC"
dir_base <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub"
setwd(file.path(dir_base, myLibrary))
#
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary
, build_vignettes = TRUE
, quick = FALSE
, reload = TRUE)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(file.path(dir_base, myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
devtools::install_github("leppott/ContDataQC")
# Copy Config file to Shiny
# Run each time update master config file (data\config.R)
#
# Erik.Leppo@tetratech.com
# 2021-01-20
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 0. Prep####
wd <- getwd() # assume is package directory
#library(devtools)
# 1. Copy file with new name
config.from <- file.path(".", "R", "config.R")
config.to  <- file.path(".", "inst", "shiny-examples", "ContDataQC"
, "www", "Config.R")
file.copy(config.from, config.to, overwrite = TRUE)
# 2. Copy and save as "TEMPLATE"
config.from <- file.path(".", "R", "config.R")
config.to.template <- file.path(".", "inst", "shiny-examples", "ContDataQC"
, "www", "Config_Template.R")
file.copy(config.from, config.to.template, overwrite = TRUE)
# 3. Copy to extdata
config.from <- file.path(".", "R", "config.R")
config.to   <- file.path(".", "inst", "extdata", "Config.ORIG.R")
file.copy(config.from, config.to, overwrite = TRUE)
# 4. Comment out env.new() in TEMPLATE
###### MANUAL *************************************
# 5. Create zip file from TEMPLATE
###### MANUAL *************************************
# Set working directory
myLibrary <- "ContDataQC"
dir_base <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub"
setwd(file.path(dir_base, myLibrary))
#
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary
, build_vignettes = TRUE
, quick = FALSE
, reload = TRUE)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(file.path(dir_base, myLibrary))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
devtools::install_github("leppott/ContDataQC")
shiny::runApp('inst/shiny-examples/ContDataQC')
runApp('inst/shiny-examples/ContDataQC')
runApp('inst/shiny-examples/ContDataQC')
library(ContDataQC)
# Data
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205\\data"
list.files(dn)
df1 <- read.csv(file.path(dn, fn1))
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205\\data"
fn1 <- list.files(dn)[1]
df1 <- read.csv(file.path(dn, fn1))
head9df1
head9df1)
head(df1)
fn1 <- list.files(dn)[1]
df1 <- read.csv(file.path(dn, fn1))
fn2 <- list.files(dn)[2]
df2 <- read.csv(file.path(dn, fn2))
str(df1)
str(df2)
kable(head(df1), caption = "df1. imports ok")
kable(head(df2), caption = "df2. fails")
library(knitr)
kable(head(df1), caption = "df1. imports ok")
kable(head(df2), caption = "df2. fails")
str(df1)
kable(df1)
kable(str(df1))
str(df1)
# Compare
kable(head(df1), caption = "df1. imports ok")
kable(head(df2), caption = "df2. fails")
str(df1)
str(df2)
dt1 <- unique(df1$Date.Time)
dt2 <- unique(df2$Date.Time)
dt1
dt1 <- unique(df1$Date.Time)
dt2 <- unique(df2$Date.Time)
dt1_posix <- as.POSIXct(dt1)
dt2_posix <- as.POSIXct(dt2)
?as.POSIXct
dt1_posix <- as.POSIXlt(dt1)
dt1_posix <- as.POSIXlt(dt1, format = "%m/%d/%Y %h:%m")
dt1_posix
as.POSIXct(dt1, format = "%m/%d/%Y %h:%m")
as.POSIXct("x <- "11/3/2018 8:01"
as.POSIXct(x, format = "%m/%d/%Y %h:%m")")
x <- "11/3/2018 8:01"
as.POSIXct(x, format = "%m/%d/%Y %h:%m")
as.POSIXct(x)
x <- "11/3/2018 8:01"
fmt <- "%m/%d/%Y %h:%m"
as.POSIXct(x, format = fmt)
strptime(x, fmt)
x <- "11/3/2018"
fmt <- "%m/%d/%Y"
as.POSIXct(x, format = fmt)
strptime(x, fmt)
x <- "11/3/2018 8:01"
fmt <- "%m/%d/%Y %H:%M"
as.POSIXct(x, format = fmt)
strptime(x, fmt)
fun.DateTimeFormat(x, "datetime")
fun.DateTimeFormat(dt1, "datetime")
fun.DateTimeFormat(dt2, "datetime")
?character
?na
??na
?NA_character_
??NA
runApp('inst/shiny-examples/ContDataQC')
runApp('inst/shiny-examples/ContDataQC')
runApp('inst/shiny-examples/ContDataQC')
runApp('inst/shiny-examples/ContDataQC')
n
runApp('inst/shiny-examples/ContDataQC')
fileName
operation
# Packages
library(ContDataQC)
library(knitr)
# Data
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205\\data"
fn1 <- list.files(dn)[1]
df1 <- read.csv(file.path(dn, fn1))
head(df1)
?ContDataQC
# Packages
library(ContDataQC)
library(knitr)
# Data
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205\\data"
setwd(dn)
setwd("..")
getwd()
operation <- "QCRaw"
fileName <- fn1
# Server, line 558
#Runs ContDataQC() on an individual file
ContDataQC(operation,
fun.myDir.import = file.path(".", "data"),
fun.myDir.export = file.path(".", "data"),
#fun.myConfig = config,
fun.myFile = fileName,
fun.myReport.format = "",
fun.myReport.Dir = "./rmd"
)
ContDataQC(operation,
fun.myDir.import = file.path(".", "data"),
fun.myDir.export = file.path(".", "data"),
#fun.myConfig = config,
fun.myFile = fileName,
fun.myReport.format = "",
#fun.myReport.Dir = "./rmd"
)
fn1 <- list.files(dn)[2]
df1 <- read.csv(file.path(dn, fn1))
operation <- "QCRaw"
fileName <- fn1
# Server, line 558
#Runs ContDataQC() on an individual file
ContDataQC(operation,
fun.myDir.import = file.path(".", "data"),
fun.myDir.export = file.path(".", "qc"),
#fun.myConfig = config,
fun.myFile = fileName,
fun.myReport.format = "",
#fun.myReport.Dir = "./rmd"
)
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/R/zfun.ContDataQC.R')
debugSource('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/R/zfun.ContDataQC.R')
fn1 <- list.files(dn)[2]
df1 <- read.csv(file.path(dn, fn1))
operation <- "QCRaw"
fileName <- fn1
# Server, line 558
#Runs ContDataQC() on an individual file
ContDataQC(operation,
fun.myDir.import = file.path(".", "data"),
fun.myDir.export = file.path(".", "qc"),
#fun.myConfig = config,
fun.myFile = fileName,
fun.myReport.format = "",
#fun.myReport.Dir = "./rmd"
)
fn1 <- list.files(dn)[2]
df1 <- read.csv(file.path(dn, fn1))
operation <- "QCRaw"
fileName <- fn1
# Server, line 558
#Runs ContDataQC() on an individual file
ContDataQC(operation,
fun.myDir.import = file.path(".", "data"),
fun.myDir.export = file.path(".", "qc"),
#fun.myConfig = config,
fun.myFile = fileName,
fun.myReport.format = "",
#fun.myReport.Dir = "./rmd"
)
fn1 <- list.files(dn)[2]
df1 <- read.csv(file.path(dn, fn1))
operation <- "QCRaw"
fileName <- fn1
# Server, line 558
#Runs ContDataQC() on an individual file
ContDataQC(operation,
fun.myDir.import = file.path(".", "data"),
fun.myDir.export = file.path(".", "qc"),
#fun.myConfig = config,
fun.myFile = fileName,
fun.myReport.format = "",
#fun.myReport.Dir = "./rmd"
)
debugSource('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/R/zfun.ContDataQC.R')
browser()
browser(ContDataQC(operation,
fun.myDir.import = file.path(".", "data"),
fun.myDir.export = file.path(".", "qc"),
#fun.myConfig = config,
fun.myFile = fileName,
fun.myReport.format = "",
#fun.myReport.Dir = "./rmd"
))
debugSource('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/R/zfun.ContDataQC.R')
ContDataQC(operation,
fun.myDir.import = file.path(".", "data"),
fun.myDir.export = file.path(".", "qc"),
#fun.myConfig = config,
fun.myFile = fileName,
fun.myReport.format = "",
#fun.myReport.Dir = "./rmd"
)
runApp('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/inst/shiny-examples/ContDataQC')
?ContDataQC
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC")
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC")
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205"
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
View(data.import)
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
, fun.myFile = myFile
, fun.myReport.format = myReport.format)\
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
debugSource('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/R/zfun.ContDataQC.R')
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/R/fun.QC.File.R')
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/R/fun.QC.File.R')
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
library(ContDataQC)
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
# Set working directory
myLibrary <- "ContDataQC"
dir_base <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub"
setwd(file.path(dir_base, myLibrary))
#
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
#file.remove("NEWS.md")
#
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary
, build_vignettes = TRUE
, quick = FALSE
, reload = TRUE)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(file.path(dir_base, myLibrary))
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205"
fn1 <- list.files(file.path(dn, "data"))[2]
df1 <- read.csv(file.path(dn, fn1))
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205"
fn1 <- list.files(file.path(dn, "data"))[2]
df1 <- read.csv(fn1)
list.files(file.path(dn, "data"))[2]
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205"
fn1 <- list.files(file.path(dn, "data"), full.names = TRUE)[2]
df1 <- read.csv(fn1)
str(df1)
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
# 02.Alt. QC Data
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205"
fn1 <- list.files(file.path(dn, "data"))[2]
df1 <- read.csv(file.path(dn, "data", fn1))
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
list.files(dn, "data")
# 02.Alt. QC Data
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205"
fn1 <- list.files(file.path(dn, "data"))[2]
df1 <- read.csv(file.path(dn, "data", fn1))
myConfig <- file.path(dn, "Config_NH.R")
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
#, fun.myConfig = myConfig
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
# 02.Alt. QC Data
dn <- "C:\\Users\\Erik.Leppo\\OneDrive - Tetra Tech, Inc\\MyDocs_OneDrive\\_HOME\\RMN\\Issue_NH_20210205"
fn1 <- list.files(file.path(dn, "data"))[2]
df1 <- read.csv(file.path(dn, "data", fn1))
myConfig <- file.path(dn, "Config_NH.R")
myData.Operation <- "QCRaw" #Selection.Operation[2]
myFile <- c(fn1)
myDir.import <- file.path(dn, "data")
myDir.export <- file.path(dn, "qc")
myReport.format <- "docx"
ContDataQC(myData.Operation
, fun.myDir.import = myDir.import
, fun.myDir.export = myDir.export
#, fun.myConfig = myConfig
, fun.myFile = myFile
, fun.myReport.format = myReport.format)
str(data.import)
myFormat.In
ContData.env$myFormat.Date
myFormat.In
myFormat.Out
View(data.import)
myFormat.In
myFormat.Out
View(data.import)
str(data.import)
ContData.env$myName.DateTime
ContData.env$myFormat.DateTime
data.import[, myField][is.na(data.import[, myField])]
myField
dim(data.import)
