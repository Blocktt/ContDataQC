," units of one another"))
txt_pH_S <- c(val_pH[1]
, "Suspect"
, paste0("> ",val_pH[4]," ",val_pH[2]
," or < ",val_pH[6]," ",val_pH[2])
, paste0(">= ", val_pH[8]," ",val_pH[2]," (+/-)")
, paste0(">= ",val_pH[9]," standard deviations within "
,val_pH[10]," hours")
, paste0("> ",val_pH[12]
," consecutive measurements within ",val_pH[13]
," units of one another"))
# Turbidity
nam_Turbidity <- c("myLab.Turbidity"                          #1
, "myUnits.Turbidity"                    #2
, "myThresh.Gross.Fail.Hi.Turbidity"     #3
, "myThresh.Gross.Fail.Lo.Turbidity"     #4
, "myThresh.Gross.Suspect.Hi.Turbidity"  #5
, "myThresh.Gross.Suspect.Lo.Turbidity"  #6
, "myThresh.Spike.Hi.Turbidity"          #7
, "myThresh.Spike.Lo.Turbidity"          #8
, "myThresh.RoC.SD.number.Turbidity"     #9
, "myThresh.RoC.SD.period.Turbidity"     #10
, "myThresh.Flat.Hi.Turbidity"           #11
, "myThresh.Flat.Lo.Turbidity"           #12
, "myThresh.Flat.Tolerance.Turbidity"    #13
)
val_Turbidity <- mget(nam_Turbidity, envir=ContData.env)
txt_Turbidity_F <- c(val_Turbidity[1]
, "Fail"
, paste0("> ",val_Turbidity[3]," ",val_Turbidity[2]
,"  or < ",val_Turbidity[4]," ",val_Turbidity[2])
, paste0(">= ", val_Turbidity[7]," ",val_Turbidity[2]," (+/-)")
, "NA"
, paste0("> ",val_Turbidity[11]
," consecutive measurements within ",val_Turbidity[13]
," units of one another"))
txt_Turbidity_S <- c(val_Turbidity[1]
, "Suspect"
, paste0("> ",val_Turbidity[4]," ",val_Turbidity[2]
," or < ",val_Turbidity[6]," ",val_Turbidity[2])
, paste0(">= ", val_Turbidity[8]," ",val_Turbidity[2]," (+/-)")
, paste0(">= ",val_Turbidity[9]," standard deviations within "
,val_Turbidity[10]," hours")
, paste0("> ",val_Turbidity[12]
," consecutive measurements within ",val_Turbidity[13]
," units of one another"))
# Chlorophylla
nam_Chlorophylla <- c("myLab.Chlorophylla"                          #1
, "myUnits.Chlorophylla"                    #2
, "myThresh.Gross.Fail.Hi.Chlorophylla"     #3
, "myThresh.Gross.Fail.Lo.Chlorophylla"     #4
, "myThresh.Gross.Suspect.Hi.Chlorophylla"  #5
, "myThresh.Gross.Suspect.Lo.Chlorophylla"  #6
, "myThresh.Spike.Hi.Chlorophylla"          #7
, "myThresh.Spike.Lo.Chlorophylla"          #8
, "myThresh.RoC.SD.number.Chlorophylla"     #9
, "myThresh.RoC.SD.period.Chlorophylla"     #10
, "myThresh.Flat.Hi.Chlorophylla"           #11
, "myThresh.Flat.Lo.Chlorophylla"           #12
, "myThresh.Flat.Tolerance.Chlorophylla"    #13
)
val_Chlorophylla <- mget(nam_Chlorophylla, envir=ContData.env)
txt_Chlorophylla_F <- c(val_Chlorophylla[1]
, "Fail"
, paste0("> ",val_Chlorophylla[3]," ",val_Chlorophylla[2]
,"  or < ",val_Chlorophylla[4]," ",val_Chlorophylla[2])
, paste0(">= ", val_Chlorophylla[7]," ",val_Chlorophylla[2]," (+/-)")
, "NA"
, paste0("> ",val_Chlorophylla[11]
," consecutive measurements within ",val_Chlorophylla[13]
," units of one another"))
txt_Chlorophylla_S <- c(val_Chlorophylla[1]
, "Suspect"
, paste0("> ",val_Chlorophylla[4]," ",val_Chlorophylla[2]
," or < ",val_Chlorophylla[6]," ",val_Chlorophylla[2])
, paste0(">= ", val_Chlorophylla[8]," ",val_Chlorophylla[2]," (+/-)")
, paste0(">= ",val_Chlorophylla[9]," standard deviations within "
,val_Chlorophylla[10]," hours")
, paste0("> ",val_Chlorophylla[12]
," consecutive measurements within ",val_Chlorophylla[13]
," units of one another"))
# GageHeight
nam_GageHeight <- c("myLab.GageHeight"                          #1
, "myUnits.GageHeight"                    #2
, "myThresh.Gross.Fail.Hi.GageHeight"     #3
, "myThresh.Gross.Fail.Lo.GageHeight"     #4
, "myThresh.Gross.Suspect.Hi.GageHeight"  #5
, "myThresh.Gross.Suspect.Lo.GageHeight"  #6
#, "myThresh.Spike.Hi.GageHeight"          #7 -removed
#, "myThresh.Spike.Lo.GageHeight"          #8 - removed
, "myThresh.RoC.SD.number.GageHeight"     #9 - 7
, "myThresh.RoC.SD.period.GageHeight"     #10 - 8
, "myThresh.Flat.Hi.GageHeight"           #11 - 9
, "myThresh.Flat.Lo.GageHeight"           #12 - 10
, "myThresh.Flat.Tolerance.GageHeight"    #13 - 11
)
val_GageHeight <- mget(nam_GageHeight, envir=ContData.env)
txt_GageHeight_F <- c(val_GageHeight[1]
, "Fail"
, paste0("> ",val_GageHeight[3]," ",val_GageHeight[2]
,"  or < ",val_GageHeight[4]," ",val_GageHeight[2])
, "NA"
, "NA"
, paste0("> ",val_GageHeight[9]
," consecutive measurements within ",val_GageHeight[11]
," units of one another"))
txt_GageHeight_S <- c(val_GageHeight[1]
, "Suspect"
, paste0("> ",val_GageHeight[4]," ",val_GageHeight[2]
," or < ",val_GageHeight[6]," ",val_GageHeight[2])
, "NA"
, paste0(">= ",val_GageHeight[7]," standard deviations within "
,val_GageHeight[8]," hours")
, paste0("> ",val_GageHeight[10]
," consecutive measurements within ",val_GageHeight[11]
," units of one another"))
df_Env <- data.frame(rbind(txt_WaterTemp_F, txt_WaterTemp_S
,txt_AirTemp_F, txt_AirTemp_S
, txt_WaterP_F, txt_WaterP_S
, txt_AirBP_F, txt_AirBP_S
, txt_SensorDepth_F, txt_SensorDepth_S
, txt_Discharge_F, txt_Discharge_S
, txt_Cond_F, txt_Cond_S
, txt_DO_F, txt_DO_S
, txt_pH_F, txt_pH_S
, txt_Turbidity_F, txt_Turbidity_S
, txt_Chlorophylla_F, txt_Chlorophylla_S
, txt_GageHeight_F, txt_GageHeight_S
)
, row.names = NULL)
names(df_Env) <- txt_header
knitr::kable(df_Env, caption = kbl_caption)
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC")
getwd()
myLibrary <- "ContDataQC"
devtools::install_github(paste0("leppott/",myLibrary))
library(ContDataQC)
?ContDataQC
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/_test")
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[2],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile)
,file.path(getwd(),Selection.SUB[2],myFile))
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "docx"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
setwd("..")
# Examples of each operation
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[2],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile)
,file.path(getwd(),Selection.SUB[2],myFile))
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "docx"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
# Aggregate Data
myData.Operation <- "Aggregate" #Selection.Operation[3]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myDir.export <- file.path(myDir.BASE,Selection.SUB[4]) #"Data3_Aggregated"
#Leave off myReport.format and get default (docx).
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export)
# 0. Prep####
wd <- getwd() # assume is package directory
#library(devtools)
# df.1, date, time, and datetime
# df.2 only datetime (different format)
# df.3 subset (one month) of df.2
# 1. Get data and process#####
# 1.1. Import Data
myFile <- "test2_AW_20130426_20130725.csv"
df.1 <- read.csv(file.path(wd,"data-raw",myFile))
myFile <- "test2_AW_20130725_20131015.csv"
df.2 <- read.csv(file.path(wd,"data-raw",myFile))
myFile <- "test2_AW_20140901_20140930.csv"
df.3 <- read.csv(file.path(wd,"data-raw",myFile))
# 1.2. Process Data
View(df.1)
View(df.2)
View(df.3)
# QC check
dim(df.1)
dim(df.2)
dim(df.3)
# structure
str(df.1)
str(df.2)
str(df.3)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2. Save as RDA for use in package####
#
data_raw_test2_AW_20130426_20130725 <- df.1
devtools::use_data(data_raw_test2_AW_20130426_20130725,overwrite = TRUE)
data_raw_test2_AW_20130725_20131015 <- df.2
devtools::use_data(data_raw_test2_AW_20130725_20131015,overwrite = TRUE)
data_raw_test2_AW_20140901_20140930 <- df.3
devtools::use_data(data_raw_test2_AW_20140901_20140930,overwrite = TRUE)
# Prepare data for example for test2
# 3 example files.
# 3rd file is a subset of the 2nd file
#
# Erik.Leppo@tetratech.com
# 20170509
# 20201203, devtools to usethis, resave files
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 0. Prep####
wd <- getwd() # assume is package directory
#library(devtools)
# df.1, date, time, and datetime
# df.2 only datetime (different format)
# df.3 subset (one month) of df.2
# 1. Get data and process#####
# 1.1. Import Data
myFile <- "test2_AW_20130426_20130725.csv"
df.1 <- read.csv(file.path(wd,"data-raw",myFile))
myFile <- "test2_AW_20130725_20131015.csv"
df.2 <- read.csv(file.path(wd,"data-raw",myFile))
myFile <- "test2_AW_20140901_20140930.csv"
df.3 <- read.csv(file.path(wd,"data-raw",myFile))
# 1.2. Process Data
View(df.1)
View(df.2)
View(df.3)
# QC check
dim(df.1)
dim(df.2)
dim(df.3)
# structure
str(df.1)
str(df.2)
str(df.3)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2. Save as RDA for use in package####
#
data_raw_test2_AW_20130426_20130725 <- df.1
usethis::use_data(data_raw_test2_AW_20130426_20130725,overwrite = TRUE)
data_raw_test2_AW_20130725_20131015 <- df.2
usethis::use_data(data_raw_test2_AW_20130725_20131015,overwrite = TRUE)
data_raw_test2_AW_20140901_20140930 <- df.3
usethis::use_data(data_raw_test2_AW_20140901_20140930,overwrite = TRUE)
# Set working directory
myLibrary <- "ContDataQC"
dir_base <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub"
setwd(file.path(dir_base, myLibrary))
#
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary, build_vignettes = TRUE, quick = FALSE, reload = TRUE)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(file.path(dir_base, myLibrary))
devtools::install_github("jasonelaw/iha")
devtools::install_github("tsangyp/StreamThermal")
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
#
# Set working directory
myLibrary <- "ContDataQC"
dir_base <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub"
setwd(file.path(dir_base, myLibrary))
#
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary, build_vignettes = TRUE, quick = FALSE, reload = TRUE)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(file.path(dir_base, myLibrary))
pkg <- "ContDataQC"
library(pkg, character.only = TRUE)
help(package=(pkg))
# Set working directory
myLibrary <- "ContDataQC"
dir_base <- "C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub"
setwd(file.path(dir_base, myLibrary))
#
# NEWS
# Render then Copy NEWS so picked up in help
rmarkdown::render("NEWS.rmd", "all")
file.copy("NEWS.md", "NEWS", overwrite = TRUE)
file.remove("NEWS.html")
file.remove("NEWS.md")
#
# Load Library
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create Package
# create(myLibrary)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Document, Install, and Reload Library
## Generate Documentation
devtools::document()
## Install New Package (locally)
setwd("..") # return to root directory first
devtools::install(myLibrary, build_vignettes = TRUE, quick = FALSE, reload = TRUE)
## Reload library
library(myLibrary,character.only = TRUE)
# change wd back to package
setwd(file.path(dir_base, myLibrary))
library(ContDataQC)
?ContDataQC
# Parameters
Selection.Operation <- c("GetGageData","QCRaw", "Aggregate", "SummaryStats")
Selection.Type      <- c("Air","Water","AW","Gage","AWG","AG","WG")
Selection.SUB <- c("Data0_Original", "Data1_RAW","Data2_QC","Data3_Aggregated","Data4_Stats")
myDir.BASE <- getwd()
# Create data directories
myDir.create <- paste0("./",Selection.SUB[1])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[2])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[3])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[4])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
myDir.create <- paste0("./",Selection.SUB[5])
ifelse(dir.exists(myDir.create)==FALSE,dir.create(myDir.create),"Directory already exists")
# Save example data (assumes directory ./Data1_RAW/ exists)
myData <- data_raw_test2_AW_20130426_20130725
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20130426_20130725.csv"))
myData <- data_raw_test2_AW_20130725_20131015
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20130725_20131015.csv"))
myData <- data_raw_test2_AW_20140901_20140930
write.csv(myData,paste0("./",Selection.SUB[2],"/test2_AW_20140901_20140930.csv"))
myData <- data_raw_test4_AW_20160418_20160726
write.csv(myData,paste0("./",Selection.SUB[2],"/test4_AW_20160418_20160726.csv"))
myFile <- "config.TZ.Central.R"
file.copy(file.path(path.package("ContDataQC"),"extdata",myFile)
,file.path(getwd(),Selection.SUB[2],myFile))
# QC Raw Data
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test2"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2013-01-01"
myData.DateRange.End    <- "2014-12-31"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "docx"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
# QC Raw Data (offset collection times for air and water sensors)
myData.Operation <- "QCRaw" #Selection.Operation[2]
myData.SiteID    <- "test4"
myData.Type      <- Selection.Type[3] #"AW"
myData.DateRange.Start  <- "2016-04-28"
myData.DateRange.End    <- "2016-07-26"
myDir.import <- file.path(myDir.BASE,Selection.SUB[2]) #"Data1_RAW"
myDir.export <- file.path(myDir.BASE,Selection.SUB[3]) #"Data2_QC"
myReport.format <- "html"
ContDataQC(myData.Operation, myData.SiteID, myData.Type, myData.DateRange.Start
, myData.DateRange.End, myDir.import, myDir.export
, fun.myReport.format=myReport.format)
?runShinyExample()
runShinyExample()
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/inst/shiny-examples/ContDataQC")
runApp()
runApp()
runApp()
runApp()
UserFile_Name()
getwd()
list.files(getwd())
?deleteFiles
runApp()
runApp()
getwd()
list.files(file.path(".", "data"))
zip.csv_DV    <- dir(file.path(".", "data"), full.names=FALSE, pattern="DV.*csv")
zip.csv_STATS <- dir(file.path(".", "data"), full.names=FALSE, pattern="STATS.*csv")
zip.pdf       <- dir(file.path(".", "data"), full.names=FALSE, pattern=".*pdf")
files2zip <- c(zip.csv_DV, zip.csv_STATS, zip.pdf)
files2zip
zip.csv  <- dir(file.path(".", "data"), full.names=FALSE, pattern="QC.*csv")
zip.docx <- dir(file.path(".", "data"), full.names=FALSE, pattern="QC.*docx")
zip.html <- dir(file.path(".", "data"), full.names=FALSE, pattern="QC.*html")
files2zip <- c(zip.csv, zip.docx, zip.html)
files2zip
?zip
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/inst/shiny-examples/ContDataQC")
getwd()
setwd("C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/ContDataQC/inst/shiny-examples/ContDataQC/data")
zip("test.zip", files = list.files("."))
setwd("..")
zip("test.zip", files = list.files(".", "data"))
zip("test.zip", files = list.files(".", "data"))
list.files(".", "data")
list.files(file.path(".", "data"))
zip("test.zip", files = file.path(".", "data"))
zip("test2.zip", files = list.files(file.path(".", "data")))
list.files(file.path(".", "data"))
zip.csv  <- dir(file.path(".", "data"), full.names=FALSE, pattern="DATA.*csv")
zip.docx <- dir(file.path(".", "data"), full.names=FALSE, pattern=".*docx")
zip.html <- dir(file.path(".", "data"), full.names=FALSE, pattern=".*html")
files2zip <- file.path(".", "data", c(zip.csv, zip.docx, zip.html))
files2zip
getwd()
zip.csv <- dir(file.path(".", "data"), full.names = FALSE, pattern = "*.csv")
zip.csv
files2zip <- file.path(".", "data", c(zip.csv, zip.docx, zip.html))
files2zip
fname = "test3.zip"
zip(zipfile = fname, files = files2zip)
shiny::runApp()
getwd()
dir(file.path("data"))
runApp()
?file.remove
